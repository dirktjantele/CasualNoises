
SimpleSynth_0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef08  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800f1d8  0800f1d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f608  0800f608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f610  0800f610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f614  0800f614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f618  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  0800f7f4  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  0800f854  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00042260  2400029c  0800f8b4  0001129c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240424fc  0800f8b4  000114fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001129c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036b8c  00000000  00000000  000112ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a85  00000000  00000000  00047e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  0004d8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab6  00000000  00000000  0004faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006d09  00000000  00000000  00051556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bde4  00000000  00000000  0005825f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00170e3c  00000000  00000000  00084043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f4e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  001f4ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001fee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400029c 	.word	0x2400029c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1c0 	.word	0x0800f1c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a0 	.word	0x240002a0
 800030c:	0800f1c0 	.word	0x0800f1c0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_ZN12CasualNoises13W25Qxx_Driver13isDriverReadyEv>:
	uint32_t& operator[] (uint32_t index) override;

	HAL_StatusTypeDef	eraseAllDevices() override;
	HAL_StatusTypeDef 	flushSectorCache() override;

	bool				isDriverReady() override		{ return mDriverReady; }
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN12CasualNoises13W25Qxx_Driver16getTotalCapacityEv>:
	uint32_t			getTotalCapacity() override		{ return mDeviceCapacity * mInitDataPtr->noOfDevices; }
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	8812      	ldrh	r2, [r2, #0]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <_ZN12CasualNoises13W25Qxx_Driver18outOfRangeDetectedEv>:

	bool				outOfRangeDetected() override	{ return mOutOfRangeDetected; }
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <_ZN12CasualNoises10NVM_DriverC1Ev>:
};

/*
 * The NVM_Driver class
 */
class NVM_Driver
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <_ZN12CasualNoises10NVM_DriverC1Ev+0x1c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	0800f224 	.word	0x0800f224

08000724 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE>:
//==============================================================================
//          W25Qxx_Driver()
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
W25Qxx_Driver::W25Qxx_Driver(const sNVM_DriverInitData* initDataPtr)
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	@ 0x38
 8000728:	af08      	add	r7, sp, #32
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
: mInitDataPtr(initDataPtr)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffe7 	bl	8000704 <_ZN12CasualNoises10NVM_DriverC1Ev>
 8000736:	4a94      	ldr	r2, [pc, #592]	@ (8000988 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x264>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	721a      	strb	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800075a:	61da      	str	r2, [r3, #28]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800077a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	641a      	str	r2, [r3, #64]	@ 0x40
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000788:	645a      	str	r2, [r3, #68]	@ 0x44
{

	// Disable all devices
	for (uint16_t i = 0; i < mInitDataPtr->noOfDevices; ++i)
 800078a:	2300      	movs	r3, #0
 800078c:	82fb      	strh	r3, [r7, #22]
 800078e:	e013      	b.n	80007b8 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x94>
	{
		HAL_GPIO_WritePin(mInitDataPtr->deviceSelectPorts[i], mInitDataPtr->deviceSelectPins[i], GPIO_PIN_SET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	6858      	ldr	r0, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	8afb      	ldrh	r3, [r7, #22]
 80007a2:	3308      	adds	r3, #8
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	889b      	ldrh	r3, [r3, #4]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	f002 ff07 	bl	80035c0 <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < mInitDataPtr->noOfDevices; ++i)
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	3301      	adds	r3, #1
 80007b6:	82fb      	strh	r3, [r7, #22]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	8afa      	ldrh	r2, [r7, #22]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3e5      	bcc.n	8000790 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x6c>
	}

	// Enable SPI and initialise the flash devices
	__HAL_SPI_ENABLE(mInitDataPtr->hspix_ptr);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef res;
	for (uint16_t i = 0; i < mInitDataPtr->noOfDevices; ++i)
 80007dc:	2300      	movs	r3, #0
 80007de:	82bb      	strh	r3, [r7, #20]
 80007e0:	e09d      	b.n	800091e <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x1fa>
	{
		res = sendDeviceCommand(i, eFlashCommandCodes::ReleasePowerDown, 5);
 80007e2:	8ab9      	ldrh	r1, [r7, #20]
 80007e4:	2300      	movs	r3, #0
 80007e6:	9306      	str	r3, [sp, #24]
 80007e8:	2300      	movs	r3, #0
 80007ea:	9305      	str	r3, [sp, #20]
 80007ec:	2300      	movs	r3, #0
 80007ee:	9304      	str	r3, [sp, #16]
 80007f0:	2300      	movs	r3, #0
 80007f2:	9303      	str	r3, [sp, #12]
 80007f4:	2300      	movs	r3, #0
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	2300      	movs	r3, #0
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2300      	movs	r3, #0
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2305      	movs	r3, #5
 8000802:	22ab      	movs	r2, #171	@ 0xab
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f9d6 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 800080a:	4603      	mov	r3, r0
 800080c:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	f040 80a2 	bne.w	800095a <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x236>
		res = sendDeviceCommand(i, eFlashCommandCodes::EnableReset, 1);
 8000816:	8ab9      	ldrh	r1, [r7, #20]
 8000818:	2300      	movs	r3, #0
 800081a:	9306      	str	r3, [sp, #24]
 800081c:	2300      	movs	r3, #0
 800081e:	9305      	str	r3, [sp, #20]
 8000820:	2300      	movs	r3, #0
 8000822:	9304      	str	r3, [sp, #16]
 8000824:	2300      	movs	r3, #0
 8000826:	9303      	str	r3, [sp, #12]
 8000828:	2300      	movs	r3, #0
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2300      	movs	r3, #0
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	2266      	movs	r2, #102	@ 0x66
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f9bc 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 800083e:	4603      	mov	r3, r0
 8000840:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f040 808a 	bne.w	800095e <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x23a>
		res = sendDeviceCommand(i, eFlashCommandCodes::Reset, 1);
 800084a:	8ab9      	ldrh	r1, [r7, #20]
 800084c:	2300      	movs	r3, #0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2300      	movs	r3, #0
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2300      	movs	r3, #0
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	2300      	movs	r3, #0
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	2300      	movs	r3, #0
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2300      	movs	r3, #0
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2299      	movs	r2, #153	@ 0x99
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f9a2 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000872:	4603      	mov	r3, r0
 8000874:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d172      	bne.n	8000962 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x23e>
		HAL_Delay(1);					// Give the device time to reset (more than 64uSec)
 800087c:	2001      	movs	r0, #1
 800087e:	f001 ffab 	bl	80027d8 <HAL_Delay>
		res = sendDeviceCommand(i, eFlashCommandCodes::ManufactuereDeviceId, 6);
 8000882:	8ab9      	ldrh	r1, [r7, #20]
 8000884:	2300      	movs	r3, #0
 8000886:	9306      	str	r3, [sp, #24]
 8000888:	2300      	movs	r3, #0
 800088a:	9305      	str	r3, [sp, #20]
 800088c:	2300      	movs	r3, #0
 800088e:	9304      	str	r3, [sp, #16]
 8000890:	2300      	movs	r3, #0
 8000892:	9303      	str	r3, [sp, #12]
 8000894:	2300      	movs	r3, #0
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	2300      	movs	r3, #0
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2300      	movs	r3, #0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2306      	movs	r3, #6
 80008a2:	2290      	movs	r2, #144	@ 0x90
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f986 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73fb      	strb	r3, [r7, #15]
		if ((res != HAL_OK) ||
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d158      	bne.n	8000966 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x242>
				(((mInBuffer[4] != 0xef) || (mInBuffer[5] != 0x15)) &&
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7b5b      	ldrb	r3, [r3, #13]
		if ((res != HAL_OK) ||
 80008b8:	2bef      	cmp	r3, #239	@ 0xef
 80008ba:	d103      	bne.n	80008c4 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x1a0>
				(((mInBuffer[4] != 0xef) || (mInBuffer[5] != 0x15)) &&
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7b9b      	ldrb	r3, [r3, #14]
 80008c0:	2b15      	cmp	r3, #21
 80008c2:	d007      	beq.n	80008d4 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x1b0>
				 ((mInBuffer[4] != 0xef) || (mInBuffer[5] != 0x17))))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7b5b      	ldrb	r3, [r3, #13]
				(((mInBuffer[4] != 0xef) || (mInBuffer[5] != 0x15)) &&
 80008c8:	2bef      	cmp	r3, #239	@ 0xef
 80008ca:	d14c      	bne.n	8000966 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x242>
				 ((mInBuffer[4] != 0xef) || (mInBuffer[5] != 0x17))))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7b9b      	ldrb	r3, [r3, #14]
 80008d0:	2b17      	cmp	r3, #23
 80008d2:	d148      	bne.n	8000966 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x242>
			goto error;
		uint32_t capacity = 8 * 1024 * 1024;
 80008d4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008d8:	613b      	str	r3, [r7, #16]
		if (mInBuffer[5] == 0x17)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7b9b      	ldrb	r3, [r3, #14]
 80008de:	2b17      	cmp	r3, #23
 80008e0:	d102      	bne.n	80008e8 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x1c4>
			capacity = 16 * 1024 * 1024;
 80008e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008e6:	613b      	str	r3, [r7, #16]
		if ((i > 0) && (capacity != mDeviceCapacity))
 80008e8:	8abb      	ldrh	r3, [r7, #20]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d004      	beq.n	80008f8 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x1d4>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d138      	bne.n	800096a <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x246>
			goto error;
		mDeviceCapacity = capacity;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	615a      	str	r2, [r3, #20]
		if (res != HAL_OK) goto error;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d134      	bne.n	800096e <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x24a>
		res = readStatusRegisters(i);
 8000904:	8abb      	ldrh	r3, [r7, #20]
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f9c3 	bl	8000c94 <_ZN12CasualNoises13W25Qxx_Driver19readStatusRegistersEt>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d12c      	bne.n	8000972 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x24e>
	for (uint16_t i = 0; i < mInitDataPtr->noOfDevices; ++i)
 8000918:	8abb      	ldrh	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	82bb      	strh	r3, [r7, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	8aba      	ldrh	r2, [r7, #20]
 8000926:	429a      	cmp	r2, r3
 8000928:	f4ff af5b 	bcc.w	80007e2 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0xbe>
	}

	// Index 1 word above the upper limit, this is used for index error checking
	mErrorIndex = (mDeviceCapacity * mInitDataPtr->noOfDevices) / 4;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6852      	ldr	r2, [r2, #4]
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	089a      	lsrs	r2, r3, #2
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	619a      	str	r2, [r3, #24]

	// Load the first sector of the first device into the cache
	res = fastSectorRead(0);
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fa1a 	bl	8000d7c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
	mCurrentSectorNo = 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	645a      	str	r2, [r3, #68]	@ 0x44

	// On success
	mDriverReady = true;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	721a      	strb	r2, [r3, #8]
	return;
 8000958:	e010      	b.n	800097c <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x258>
		if (res != HAL_OK) goto error;
 800095a:	bf00      	nop
 800095c:	e00a      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
		if (res != HAL_OK) goto error;
 800095e:	bf00      	nop
 8000960:	e008      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
		if (res != HAL_OK) goto error;
 8000962:	bf00      	nop
 8000964:	e006      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
			goto error;
 8000966:	bf00      	nop
 8000968:	e004      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
			goto error;
 800096a:	bf00      	nop
 800096c:	e002      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
		if (res != HAL_OK) goto error;
 800096e:	bf00      	nop
 8000970:	e000      	b.n	8000974 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE+0x250>
		if (res != HAL_OK) goto error;
 8000972:	bf00      	nop

	// On failure
	error:
	mDriverReady = false;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	721a      	strb	r2, [r3, #8]
	return;
 800097a:	bf00      	nop

}
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	0800f204 	.word	0x0800f204

0800098c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv>:
// ToDo fill this in...
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
bool W25Qxx_Driver::checkForCacheChange()
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

	if ((mPreviousWordOffset != 0xffffffff) &&
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800099c:	d036      	beq.n	8000a0c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x80>
		(mSectorCache[mPreviousWordOffset] != mPreviousValue))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009a2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x90>)
 80009a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	if ((mPreviousWordOffset != 0xffffffff) &&
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d02d      	beq.n	8000a0c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x80>
	{

		// Set corresponding dirty flags
		mSectorCacheDirty = true;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		uint32_t pageNo = (mPreviousWordOffset * 4) / cFlashPageSizeBytes;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
		mPageCacheDirty[pageNo] = true;
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	332a      	adds	r3, #42	@ 0x2a
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]

		// Do we have to erase the complete sector
		// This has to be done when a 0 bit in flash is changed to a logical 1
		mSectorEraseRequired |= ~mPreviousValue & mSectorCache[mPreviousWordOffset];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80009d4:	4618      	mov	r0, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	43da      	mvns	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009e0:	490e      	ldr	r1, [pc, #56]	@ (8000a1c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x90>)
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	4013      	ands	r3, r2
 80009e8:	4303      	orrs	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

		// Update previous value and report change
		mPreviousValue = mSectorCache[mPreviousWordOffset];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009fe:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x90>)
 8000a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	641a      	str	r2, [r3, #64]	@ 0x40
		return true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv+0x82>

	}
	else
		return false;
 8000a0c:	2300      	movs	r3, #0

}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	240002b8 	.word	0x240002b8

08000a20 <_ZN12CasualNoises13W25Qxx_DriverixEm>:
//	a 32 bit word index
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
uint32_t& W25Qxx_Driver::operator[] (uint32_t index)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]

	// Some useful values
	uint32_t byteIndex  = index * 4;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
	uint32_t sectorNo   = byteIndex / cFlashSectorSizeBytes;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	0b1b      	lsrs	r3, r3, #12
 8000a34:	613b      	str	r3, [r7, #16]
	uint32_t byteOffset = byteIndex - (sectorNo * cFlashSectorSizeBytes);
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	031b      	lsls	r3, r3, #12
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	60fb      	str	r3, [r7, #12]
	uint32_t wordOffset = byteOffset / 4;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]

	// Valid index?
	if (index >= mErrorIndex)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d306      	bcc.n	8000a5e <_ZN12CasualNoises13W25Qxx_DriverixEm+0x3e>
	{
		mOutOfRangeDetected = true;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]
		return mOutOfRangeWord;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	331c      	adds	r3, #28
 8000a5c:	e02a      	b.n	8000ab4 <_ZN12CasualNoises13W25Qxx_DriverixEm+0x94>
	}

	// Access to the same location?
	if ((wordOffset == mPreviousWordOffset) &&
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d109      	bne.n	8000a7c <_ZN12CasualNoises13W25Qxx_DriverixEm+0x5c>
		(sectorNo   == mCurrentSectorNo))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	if ((wordOffset == mPreviousWordOffset) &&
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d104      	bne.n	8000a7c <_ZN12CasualNoises13W25Qxx_DriverixEm+0x5c>
	{
		return mSectorCache[wordOffset];
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <_ZN12CasualNoises13W25Qxx_DriverixEm+0x9c>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	e01b      	b.n	8000ab4 <_ZN12CasualNoises13W25Qxx_DriverixEm+0x94>
	}

	// Did previous location change?
	checkForCacheChange();
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff85 	bl	800098c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv>

	// Have to change sector?
	if (sectorNo != mCurrentSectorNo)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d005      	beq.n	8000a98 <_ZN12CasualNoises13W25Qxx_DriverixEm+0x78>
	{
		fastSectorRead(sectorNo * cFlashSectorSizeBytes);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	031b      	lsls	r3, r3, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f972 	bl	8000d7c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm>
	}

	// Remember this access and return reference
	mPreviousWordOffset = wordOffset;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	mPreviousValue 		= mSectorCache[wordOffset];
 8000a9e:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <_ZN12CasualNoises13W25Qxx_DriverixEm+0x9c>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	641a      	str	r2, [r3, #64]	@ 0x40
	return mSectorCache[mPreviousWordOffset];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4a02      	ldr	r2, [pc, #8]	@ (8000abc <_ZN12CasualNoises13W25Qxx_DriverixEm+0x9c>)
 8000ab2:	4413      	add	r3, r2

}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	240002b8 	.word	0x240002b8

08000ac0 <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv>:
// Erase all flash devices
//
//  CasualNoises    01/04/2023  First implementation
//==============================================================================
HAL_StatusTypeDef W25Qxx_Driver::eraseAllDevices()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	@ 0x30
 8000ac4:	af08      	add	r7, sp, #32
 8000ac6:	6078      	str	r0, [r7, #4]

	// Erase devices one by one
	HAL_StatusTypeDef res;
	for (uint16_t deviceNo = 0; deviceNo < mInitDataPtr->noOfDevices; ++deviceNo)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	81bb      	strh	r3, [r7, #12]
 8000acc:	e057      	b.n	8000b7e <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xbe>
	{

		// Erase a single device
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteEnable, 1);
 8000ace:	89b9      	ldrh	r1, [r7, #12]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9306      	str	r3, [sp, #24]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9305      	str	r3, [sp, #20]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9304      	str	r3, [sp, #16]
 8000adc:	2300      	movs	r3, #0
 8000ade:	9303      	str	r3, [sp, #12]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	2206      	movs	r2, #6
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f860 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d14e      	bne.n	8000b9e <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xde>
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::ChipErase, 1);
 8000b00:	89b9      	ldrh	r1, [r7, #12]
 8000b02:	2300      	movs	r3, #0
 8000b04:	9306      	str	r3, [sp, #24]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9305      	str	r3, [sp, #20]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9304      	str	r3, [sp, #16]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9303      	str	r3, [sp, #12]
 8000b12:	2300      	movs	r3, #0
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	22c7      	movs	r2, #199	@ 0xc7
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f847 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d137      	bne.n	8000ba2 <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xe2>
		res = waitUntilDeviceReady(deviceNo);
 8000b32:	89bb      	ldrh	r3, [r7, #12]
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f8fa 	bl	8000d30 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d12f      	bne.n	8000ba6 <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xe6>
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteDisable, 1);
 8000b46:	89b9      	ldrh	r1, [r7, #12]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9306      	str	r3, [sp, #24]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9305      	str	r3, [sp, #20]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9304      	str	r3, [sp, #16]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	2204      	movs	r2, #4
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f824 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	73fb      	strb	r3, [r7, #15]
		if (res != HAL_OK) goto error;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d118      	bne.n	8000baa <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xea>
	for (uint16_t deviceNo = 0; deviceNo < mInitDataPtr->noOfDevices; ++deviceNo)
 8000b78:	89bb      	ldrh	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	81bb      	strh	r3, [r7, #12]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	89ba      	ldrh	r2, [r7, #12]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3a1      	bcc.n	8000ace <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xe>

	}

	// Load the first sector of the first device into the cache
	res = fastSectorRead(0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f8f5 	bl	8000d7c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm>
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
	mCurrentSectorNo = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b9c:	e006      	b.n	8000bac <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xec>
		if (res != HAL_OK) goto error;
 8000b9e:	bf00      	nop
 8000ba0:	e004      	b.n	8000bac <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xec>
		if (res != HAL_OK) goto error;
 8000ba2:	bf00      	nop
 8000ba4:	e002      	b.n	8000bac <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xec>
		if (res != HAL_OK) goto error;
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <_ZN12CasualNoises13W25Qxx_Driver15eraseAllDevicesEv+0xec>
		if (res != HAL_OK) goto error;
 8000baa:	bf00      	nop

	error:
	return res;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>:
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
HAL_StatusTypeDef W25Qxx_Driver::sendDeviceCommand(uint16_t deviceNo, eFlashCommandCodes commandCode, uint8_t length,
		uint8_t byte_1, uint8_t byte_2, uint8_t byte_3, uint8_t byte_4, uint8_t byte_5, uint8_t byte_6, uint8_t byte_7)
{
 8000bb6:	b590      	push	{r4, r7, lr}
 8000bb8:	b08b      	sub	sp, #44	@ 0x2c
 8000bba:	af02      	add	r7, sp, #8
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	817b      	strh	r3, [r7, #10]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	727b      	strb	r3, [r7, #9]

	// Set chip select low (make sure it toggles)
	uint16_t deviceSelectPin = mInitDataPtr->deviceSelectPins[deviceNo];
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	897b      	ldrh	r3, [r7, #10]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	83bb      	strh	r3, [r7, #28]
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	8bb9      	ldrh	r1, [r7, #28]
 8000be8:	2201      	movs	r2, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fce8 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_RESET);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	897b      	ldrh	r3, [r7, #10]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	8bb9      	ldrh	r1, [r7, #28]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fcdd 	bl	80035c0 <HAL_GPIO_WritePin>

	// Fill output buffer with command code and clear input buffer
	uint8_t outBuffer[cCommandBufferSize];		   // Data to send
	outBuffer[0] = (uint8_t)commandCode;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	743b      	strb	r3, [r7, #16]
	outBuffer[1] = byte_1;
 8000c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c10:	747b      	strb	r3, [r7, #17]
	outBuffer[2] = byte_2;
 8000c12:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c16:	74bb      	strb	r3, [r7, #18]
	outBuffer[3] = byte_3;
 8000c18:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000c1c:	74fb      	strb	r3, [r7, #19]
	outBuffer[4] = byte_4;
 8000c1e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c22:	753b      	strb	r3, [r7, #20]
	outBuffer[5] = byte_5;
 8000c24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c28:	757b      	strb	r3, [r7, #21]
	outBuffer[6] = byte_6;
 8000c2a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000c2e:	75bb      	strb	r3, [r7, #22]
	outBuffer[7] = byte_7;
 8000c30:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c34:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < cCommandBufferSize; ++i)
 8000c36:	2300      	movs	r3, #0
 8000c38:	77fb      	strb	r3, [r7, #31]
 8000c3a:	e007      	b.n	8000c4c <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh+0x96>
		mInBuffer[i]  = 0x00;
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i < cCommandBufferSize; ++i)
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	77fb      	strb	r3, [r7, #31]
 8000c4c:	7ffb      	ldrb	r3, [r7, #31]
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	d9f4      	bls.n	8000c3c <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh+0x86>

	// Handle the command to the device and receive the response
	HAL_StatusTypeDef res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, outBuffer, mInBuffer, length, HAL_MAX_DELAY);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	69d8      	ldr	r0, [r3, #28]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f103 0209 	add.w	r2, r3, #9
 8000c5e:	7a7b      	ldrb	r3, [r7, #9]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f107 0110 	add.w	r1, r7, #16
 8000c66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c6a:	9400      	str	r4, [sp, #0]
 8000c6c:	f006 ff5e 	bl	8007b2c <HAL_SPI_TransmitReceive>
 8000c70:	4603      	mov	r3, r0
 8000c72:	76fb      	strb	r3, [r7, #27]

	// Chip select goes high to end the transaction
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	897b      	ldrh	r3, [r7, #10]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	8bb9      	ldrh	r1, [r7, #28]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fc9b 	bl	80035c0 <HAL_GPIO_WritePin>

	return res;
 8000c8a:	7efb      	ldrb	r3, [r7, #27]

}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3724      	adds	r7, #36	@ 0x24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <_ZN12CasualNoises13W25Qxx_Driver19readStatusRegistersEt>:
// Read status registers for a given device into mStatusRegisters
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
HAL_StatusTypeDef W25Qxx_Driver::readStatusRegisters(uint16_t deviceNo)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af08      	add	r7, sp, #32
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = sendDeviceCommand(deviceNo, eFlashCommandCodes::ReadStatusRegister1, 2);
 8000ca0:	8879      	ldrh	r1, [r7, #2]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9306      	str	r3, [sp, #24]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9305      	str	r3, [sp, #20]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9304      	str	r3, [sp, #16]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9303      	str	r3, [sp, #12]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff77 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <_ZN12CasualNoises13W25Qxx_Driver19readStatusRegistersEt+0x42>
		return res;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	e028      	b.n	8000d28 <_ZN12CasualNoises13W25Qxx_Driver19readStatusRegistersEt+0x94>
	mStatusRegisters[deviceNo].sStatisBits_S7_S0 = mInBuffer[1];
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	7a91      	ldrb	r1, [r2, #10]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	3310      	adds	r3, #16
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	705a      	strb	r2, [r3, #1]
	res = sendDeviceCommand(deviceNo, eFlashCommandCodes::ReadStatusRegister2, 2);
 8000ce8:	8879      	ldrh	r1, [r7, #2]
 8000cea:	2300      	movs	r3, #0
 8000cec:	9306      	str	r3, [sp, #24]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9305      	str	r3, [sp, #20]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9303      	str	r3, [sp, #12]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2302      	movs	r3, #2
 8000d08:	2235      	movs	r2, #53	@ 0x35
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff53 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000d10:	4603      	mov	r3, r0
 8000d12:	73fb      	strb	r3, [r7, #15]
	mStatusRegisters[deviceNo].sStatisBits_S15_S8 = mInBuffer[1];
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7a91      	ldrb	r1, [r2, #10]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	460a      	mov	r2, r1
 8000d24:	709a      	strb	r2, [r3, #2]
	return res;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt>:
// Performs a busy form of waiting!
//
//  CasualNoises    01/04/2023  First implementation       ;)
//==============================================================================
HAL_StatusTypeDef W25Qxx_Driver::waitUntilDeviceReady(uint16_t deviceNo)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	while (true)
	{
		res = readStatusRegisters(deviceNo);
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffa5 	bl	8000c94 <_ZN12CasualNoises13W25Qxx_Driver19readStatusRegistersEt>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
		if ((res != HAL_OK) || ((mStatusRegisters[deviceNo].sStatisBits_S7_S0 & 0x01) == 0))
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10d      	bne.n	8000d70 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt+0x40>
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	3310      	adds	r3, #16
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt+0x40>
			break;
		HAL_Delay(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f001 fd35 	bl	80027d8 <HAL_Delay>
		res = readStatusRegisters(deviceNo);
 8000d6e:	e7e7      	b.n	8000d40 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt+0x10>
	}
	return res;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm>:
//
//  CasualNoises    31/03/2023  First implementation
//==============================================================================
// address holds the address of the first byte of the sector, must be 4 KB aligned
HAL_StatusTypeDef W25Qxx_Driver::fastSectorRead(uint32_t address)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]

	// Flush the cache if it is dirty (even if the same sector is requested as the one in cache)
	if (mSectorCacheDirty)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x20>
	{
		flushSectorCache();
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3308      	adds	r3, #8
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	4798      	blx	r3
	}

	// Get the device no from the address
	uint32_t deviceNo = address / mDeviceCapacity;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	61bb      	str	r3, [r7, #24]
	uint32_t startAddress = address - (deviceNo * mDeviceCapacity);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]

	// Set chip select low (make sure it toggles)
	uint16_t deviceSelectPin = mInitDataPtr->deviceSelectPins[deviceNo];
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	827b      	strh	r3, [r7, #18]
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	8a79      	ldrh	r1, [r7, #18]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fbf1 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_RESET);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	8a79      	ldrh	r1, [r7, #18]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f002 fbe6 	bl	80035c0 <HAL_GPIO_WritePin>

	// Send a fast read command with the desired address
	uint8_t commandBuffer[4];
	commandBuffer[0] = (uint8_t)eFlashCommandCodes::FastReadData;
 8000df4:	230b      	movs	r3, #11
 8000df6:	733b      	strb	r3, [r7, #12]
	commandBuffer[1] = startAddress >> 16;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	737b      	strb	r3, [r7, #13]
	commandBuffer[2] = startAddress >> 8;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	73bb      	strb	r3, [r7, #14]
	commandBuffer[3] = startAddress;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, commandBuffer, mInBuffer, 4, HAL_MAX_DELAY);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	69d8      	ldr	r0, [r3, #28]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f103 0209 	add.w	r2, r3, #9
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2304      	movs	r3, #4
 8000e26:	f006 fe81 	bl	8007b2c <HAL_SPI_TransmitReceive>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	77fb      	strb	r3, [r7, #31]
	if (res != HAL_OK) goto error;
 8000e2e:	7ffb      	ldrb	r3, [r7, #31]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d13f      	bne.n	8000eb4 <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x138>

	// Send dummy 1 dummy byte (8 clock cycles) to set-up the device
	res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, commandBuffer, mInBuffer, 1, HAL_MAX_DELAY);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	69d8      	ldr	r0, [r3, #28]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f103 0209 	add.w	r2, r3, #9
 8000e40:	f107 010c 	add.w	r1, r7, #12
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f006 fe6e 	bl	8007b2c <HAL_SPI_TransmitReceive>
 8000e50:	4603      	mov	r3, r0
 8000e52:	77fb      	strb	r3, [r7, #31]
	if (res != HAL_OK) goto error;
 8000e54:	7ffb      	ldrb	r3, [r7, #31]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d12e      	bne.n	8000eb8 <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x13c>

	// Read the sector data
	res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, (uint8_t *)mSectorCache, (uint8_t *)mSectorCache, cFlashSectorSizeBytes, HAL_MAX_DELAY);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	69d8      	ldr	r0, [r3, #28]
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x164>)
 8000e6c:	491c      	ldr	r1, [pc, #112]	@ (8000ee0 <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x164>)
 8000e6e:	f006 fe5d 	bl	8007b2c <HAL_SPI_TransmitReceive>
 8000e72:	4603      	mov	r3, r0
 8000e74:	77fb      	strb	r3, [r7, #31]
	if (res != HAL_OK) goto error;
 8000e76:	7ffb      	ldrb	r3, [r7, #31]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11f      	bne.n	8000ebc <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x140>

	// Cache is clean now
	mSectorCacheDirty = false;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	for (uint16_t i = 0; i < cNoOfPagesInSector; ++i)
 8000e84:	2300      	movs	r3, #0
 8000e86:	83bb      	strh	r3, [r7, #28]
 8000e88:	e008      	b.n	8000e9c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x120>
		mPageCacheDirty[i] = false;
 8000e8a:	8bbb      	ldrh	r3, [r7, #28]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	for (uint16_t i = 0; i < cNoOfPagesInSector; ++i)
 8000e96:	8bbb      	ldrh	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	83bb      	strh	r3, [r7, #28]
 8000e9c:	8bbb      	ldrh	r3, [r7, #28]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	d9f3      	bls.n	8000e8a <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x10e>
	mSectorEraseRequired = false;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	mCurrentSectorNo = address / cFlashSectorSizeBytes;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0b1a      	lsrs	r2, r3, #12
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000eb2:	e004      	b.n	8000ebe <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x142>
	if (res != HAL_OK) goto error;
 8000eb4:	bf00      	nop
 8000eb6:	e002      	b.n	8000ebe <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x142>
	if (res != HAL_OK) goto error;
 8000eb8:	bf00      	nop
 8000eba:	e000      	b.n	8000ebe <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm+0x142>
	if (res != HAL_OK) goto error;
 8000ebc:	bf00      	nop

	error:

	// Chip select goes high to end the transaction
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	8a79      	ldrh	r1, [r7, #18]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fb76 	bl	80035c0 <HAL_GPIO_WritePin>

	return res;
 8000ed4:	7ffb      	ldrb	r3, [r7, #31]

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	240002b8 	.word	0x240002b8

08000ee4 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv>:
// Write the contents of the cache to the flash device
//
//  CasualNoises    02/04/2023  First implementation
//==============================================================================
HAL_StatusTypeDef W25Qxx_Driver::flushSectorCache()
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b097      	sub	sp, #92	@ 0x5c
 8000ee8:	af08      	add	r7, sp, #32
 8000eea:	6078      	str	r0, [r7, #4]

	// Only do this when the cache is dirty
	checkForCacheChange();
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fd4d 	bl	800098c <_ZN12CasualNoises13W25Qxx_Driver19checkForCacheChangeEv>
	if ( ! mSectorCacheDirty )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000ef8:	f083 0301 	eor.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x22>
		return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e16e      	b.n	80011e4 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x300>

	// Get the device no from the current sector no & sector no in device
	uint32_t noOfSectors = mDeviceCapacity / cFlashSectorSizeBytes;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	0b1b      	lsrs	r3, r3, #12
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t deviceNo    = mCurrentSectorNo / noOfSectors;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sectorNo	 = mCurrentSectorNo - (deviceNo * noOfSectors);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f22:	fb01 f303 	mul.w	r3, r1, r3
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24

	// Erase sector if required
	HAL_StatusTypeDef res;
	uint16_t deviceSelectPin;
	if (mSectorEraseRequired)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d06d      	beq.n	8001010 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x12c>
	{

		// Enable write on device
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteEnable, 1);
 8000f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f36:	b299      	uxth	r1, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9306      	str	r3, [sp, #24]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9305      	str	r3, [sp, #20]
 8000f40:	2300      	movs	r3, #0
 8000f42:	9304      	str	r3, [sp, #16]
 8000f44:	2300      	movs	r3, #0
 8000f46:	9303      	str	r3, [sp, #12]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	2206      	movs	r2, #6
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fe2c 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (res != HAL_OK) goto error;
 8000f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f040 811f 	bne.w	80011ac <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2c8>

		// Start sector erase
		uint32_t startAddress = sectorNo * cFlashSectorSizeBytes;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	031b      	lsls	r3, r3, #12
 8000f72:	623b      	str	r3, [r7, #32]
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::SectorErase, 4,
 8000f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f76:	b298      	uxth	r0, r3
				startAddress >> 16, startAddress >> 8, startAddress);
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::SectorErase, 4,
 8000f7c:	b2db      	uxtb	r3, r3
				startAddress >> 16, startAddress >> 8, startAddress);
 8000f7e:	6a3a      	ldr	r2, [r7, #32]
 8000f80:	0a12      	lsrs	r2, r2, #8
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::SectorErase, 4,
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	6a39      	ldr	r1, [r7, #32]
 8000f86:	b2c9      	uxtb	r1, r1
 8000f88:	2400      	movs	r4, #0
 8000f8a:	9406      	str	r4, [sp, #24]
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	9405      	str	r4, [sp, #20]
 8000f90:	2400      	movs	r4, #0
 8000f92:	9404      	str	r4, [sp, #16]
 8000f94:	2400      	movs	r4, #0
 8000f96:	9403      	str	r4, [sp, #12]
 8000f98:	9102      	str	r1, [sp, #8]
 8000f9a:	9201      	str	r2, [sp, #4]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fe06 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (res != HAL_OK) goto error;
 8000fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 80fb 	bne.w	80011b0 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2cc>

		// Wait until the device is ready
		res = waitUntilDeviceReady(deviceNo);
 8000fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff feb5 	bl	8000d30 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (res != HAL_OK) goto error;
 8000fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 80ef 	bne.w	80011b4 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2d0>

		// Disable write on device
		res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteDisable, 1);
 8000fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9306      	str	r3, [sp, #24]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9305      	str	r3, [sp, #20]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9304      	str	r3, [sp, #16]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fddb 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (res != HAL_OK) goto error;
 8001006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 80d4 	bne.w	80011b8 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2d4>

	}

	// Write current sector to flash page after page
	for (uint32_t pageNo = 0; pageNo < cNoOfPagesInSector; ++pageNo)
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
 8001014:	e0ba      	b.n	800118c <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2a8>
	{

		// Have to write this page?
		if (mSectorEraseRequired || mPageCacheDirty[pageNo])
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x14c>
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001024:	4413      	add	r3, r2
 8001026:	332a      	adds	r3, #42	@ 0x2a
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80ab 	beq.w	8001186 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2a2>
		{

			// Enable write on device
			res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteEnable, 1);
 8001030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001032:	b299      	uxth	r1, r3
 8001034:	2300      	movs	r3, #0
 8001036:	9306      	str	r3, [sp, #24]
 8001038:	2300      	movs	r3, #0
 800103a:	9305      	str	r3, [sp, #20]
 800103c:	2300      	movs	r3, #0
 800103e:	9304      	str	r3, [sp, #16]
 8001040:	2300      	movs	r3, #0
 8001042:	9303      	str	r3, [sp, #12]
 8001044:	2300      	movs	r3, #0
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2300      	movs	r3, #0
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2300      	movs	r3, #0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2206      	movs	r2, #6
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fdae 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (res != HAL_OK) goto error;
 8001060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 80a9 	bne.w	80011bc <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2d8>

			// Set chip select low (make sure it toggles)
			uint16_t deviceSelectPin = mInitDataPtr->deviceSelectPins[deviceNo];
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001070:	3308      	adds	r3, #8
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	889b      	ldrh	r3, [r3, #4]
 8001078:	83fb      	strh	r3, [r7, #30]
			HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	8bf9      	ldrh	r1, [r7, #30]
 8001088:	2201      	movs	r2, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fa98 	bl	80035c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_RESET);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	8bf9      	ldrh	r1, [r7, #30]
 800109e:	2200      	movs	r2, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fa8d 	bl	80035c0 <HAL_GPIO_WritePin>

			// Send destination address to the flash device
			uint32_t destAddress = (sectorNo * cFlashSectorSizeBytes) + (pageNo * cFlashPageSizeBytes);
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	011a      	lsls	r2, r3, #4
 80010aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ac:	4413      	add	r3, r2
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	61bb      	str	r3, [r7, #24]
			uint8_t commandBuffer[4];
			commandBuffer[0] = (uint8_t)eFlashCommandCodes::PageProgram;
 80010b2:	2302      	movs	r3, #2
 80010b4:	733b      	strb	r3, [r7, #12]
			commandBuffer[1] = destAddress >> 16;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	0c1b      	lsrs	r3, r3, #16
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	737b      	strb	r3, [r7, #13]
			commandBuffer[2] = destAddress >> 8;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	73bb      	strb	r3, [r7, #14]
			commandBuffer[3] = destAddress;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
			res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, commandBuffer, mInBuffer, 4, HAL_MAX_DELAY);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	69d8      	ldr	r0, [r3, #28]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f103 0209 	add.w	r2, r3, #9
 80010d8:	f107 010c 	add.w	r1, r7, #12
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2304      	movs	r3, #4
 80010e4:	f006 fd22 	bl	8007b2c <HAL_SPI_TransmitReceive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (res != HAL_OK) goto error;
 80010ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d164      	bne.n	80011c0 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2dc>

			// Perform the page write
			uint8_t* srcAddress = (uint8_t*)((uint32_t)mSectorCache) + (pageNo * cFlashPageSizeBytes);
 80010f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	4a3c      	ldr	r2, [pc, #240]	@ (80011ec <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x308>)
 80010fc:	4413      	add	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
			res = HAL_SPI_TransmitReceive (mInitDataPtr->hspix_ptr, srcAddress, srcAddress, cFlashPageSizeBytes, HAL_MAX_DELAY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	69d8      	ldr	r0, [r3, #28]
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	6979      	ldr	r1, [r7, #20]
 8001114:	f006 fd0a 	bl	8007b2c <HAL_SPI_TransmitReceive>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			// Chip select goes high to end the transaction
			HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	8bf9      	ldrh	r1, [r7, #30]
 800112c:	2201      	movs	r2, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fa46 	bl	80035c0 <HAL_GPIO_WritePin>

			// Wait until the device is ready
			res = waitUntilDeviceReady(deviceNo);
 8001134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001136:	b29b      	uxth	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fdf8 	bl	8000d30 <_ZN12CasualNoises13W25Qxx_Driver20waitUntilDeviceReadyEt>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (res != HAL_OK) goto error;
 8001146:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800114a:	2b00      	cmp	r3, #0
 800114c:	d13a      	bne.n	80011c4 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e0>

			// Disable write on device
			res = sendDeviceCommand(deviceNo, eFlashCommandCodes::WriteDisable, 1);
 800114e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001150:	b299      	uxth	r1, r3
 8001152:	2300      	movs	r3, #0
 8001154:	9306      	str	r3, [sp, #24]
 8001156:	2300      	movs	r3, #0
 8001158:	9305      	str	r3, [sp, #20]
 800115a:	2300      	movs	r3, #0
 800115c:	9304      	str	r3, [sp, #16]
 800115e:	2300      	movs	r3, #0
 8001160:	9303      	str	r3, [sp, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2300      	movs	r3, #0
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2300      	movs	r3, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	2204      	movs	r2, #4
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fd1f 	bl	8000bb6 <_ZN12CasualNoises13W25Qxx_Driver17sendDeviceCommandEtNS_18eFlashCommandCodesEhhhhhhhh>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			if (res != HAL_OK) goto error;
 800117e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001182:	2b00      	cmp	r3, #0
 8001184:	d120      	bne.n	80011c8 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e4>
	for (uint32_t pageNo = 0; pageNo < cNoOfPagesInSector; ++pageNo)
 8001186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001188:	3301      	adds	r3, #1
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
 800118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f af41 	bls.w	8001016 <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x132>
		}

	}

	// Reload the cache from flash (the page program command overwrites the cache...)
	mSectorCacheDirty = false;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	fastSectorRead(mCurrentSectorNo * cFlashSectorSizeBytes);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a0:	031b      	lsls	r3, r3, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fde9 	bl	8000d7c <_ZN12CasualNoises13W25Qxx_Driver14fastSectorReadEm>
 80011aa:	e00e      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
		if (res != HAL_OK) goto error;
 80011ac:	bf00      	nop
 80011ae:	e00c      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
		if (res != HAL_OK) goto error;
 80011b0:	bf00      	nop
 80011b2:	e00a      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
		if (res != HAL_OK) goto error;
 80011b4:	bf00      	nop
 80011b6:	e008      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
		if (res != HAL_OK) goto error;
 80011b8:	bf00      	nop
 80011ba:	e006      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
			if (res != HAL_OK) goto error;
 80011bc:	bf00      	nop
 80011be:	e004      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
			if (res != HAL_OK) goto error;
 80011c0:	bf00      	nop
 80011c2:	e002      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
			if (res != HAL_OK) goto error;
 80011c4:	bf00      	nop
 80011c6:	e000      	b.n	80011ca <_ZN12CasualNoises13W25Qxx_Driver16flushSectorCacheEv+0x2e6>
			if (res != HAL_OK) goto error;
 80011c8:	bf00      	nop

	error:

	// Chip select goes high to end the transaction
	HAL_GPIO_WritePin (mInitDataPtr->deviceSelectPorts[deviceNo], deviceSelectPin, GPIO_PIN_SET);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	8a79      	ldrh	r1, [r7, #18]
 80011d8:	2201      	movs	r2, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 f9f0 	bl	80035c0 <HAL_GPIO_WritePin>

	return res;
 80011e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37

}
 80011e4:	4618      	mov	r0, r3
 80011e6:	373c      	adds	r7, #60	@ 0x3c
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	240002b8 	.word	0x240002b8

080011f0 <_ZNK12CasualNoises10TLV_Driver6getTagEm>:
private:
	NVM_Driver* 			mNVM_DriverPtr;						// Driver used for NVM access
	uint32_t				mFreeTLV_Index { 0xffffffff };		// Index of the first free/empty TLV
	uint32_t				mNVM_AfterEndIndex  { 0 };			// Index one after last available index

	inline uint32_t 		getTag(uint32_t index) const noexcept						{ return (*mNVM_DriverPtr)[index + 0]; }
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	4610      	mov	r0, r2
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZNK12CasualNoises10TLV_Driver6setTagEmm>:
	inline void				setTag(uint32_t index, uint32_t tag) const noexcept			{ (*mNVM_DriverPtr)[index + 0] = tag; }
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>:
	inline uint32_t			getLength(uint32_t index) const noexcept					{ return (*mNVM_DriverPtr)[index + 1]; }
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6810      	ldr	r0, [r2, #0]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	3201      	adds	r2, #1
 800125e:	4611      	mov	r1, r2
 8001260:	4798      	blx	r3
 8001262:	4603      	mov	r3, r0
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZNK12CasualNoises10TLV_Driver9setLengthEmm>:
	inline void				setLength(uint32_t index, uint32_t length) const noexcept	{ (*mNVM_DriverPtr)[index + 1] = length; }
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	6810      	ldr	r0, [r2, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	3201      	adds	r2, #1
 800128a:	4611      	mov	r1, r2
 800128c:	4798      	blx	r3
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZNK12CasualNoises10TLV_Driver8setValueEmm>:
	inline uint32_t			getValue(uint32_t index) const noexcept						{ return (*mNVM_DriverPtr)[index + 2]; }
	inline void				setValue(uint32_t index, uint32_t value) const noexcept		{ (*mNVM_DriverPtr)[index + 2] = value; }
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6810      	ldr	r0, [r2, #0]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	3202      	adds	r2, #2
 80012b8:	4611      	mov	r1, r2
 80012ba:	4798      	blx	r3
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE>:
//==============================================================================
//          TLV_Driver()
//
//  CasualNoises    02/04/2023  First implementation
//==============================================================================
TLV_Driver::TLV_Driver(NVM_Driver* inNVM_DriverPtr) :
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
		mNVM_DriverPtr(inNVM_DriverPtr)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
{

	// First word should be the magic code
	uint32_t magic = (*mNVM_DriverPtr)[0];
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4610      	mov	r0, r2
 80012fa:	4798      	blx	r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
	if (magic != cMagicCode)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE+0xa4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d017      	beq.n	800133a <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE+0x6e>
	{

		// Erase all devices if magic was not found
		mNVM_DriverPtr->eraseAllDevices();
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4610      	mov	r0, r2
 800131a:	4798      	blx	r3

		// Initialise NVM / create first free TLV
		(*mNVM_DriverPtr)[0] = cMagicCode;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	4610      	mov	r0, r2
 800132c:	4798      	blx	r3
 800132e:	4603      	mov	r3, r0
 8001330:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE+0xa4>)
 8001332:	601a      	str	r2, [r3, #0]
		deleteAllTLVs();
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f81f 	bl	8001378 <_ZN12CasualNoises10TLV_Driver13deleteAllTLVsEv>

	}

	// NVM space ends here
	mNVM_AfterEndIndex = mNVM_DriverPtr->getTotalCapacity() / 4;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3310      	adds	r3, #16
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4610      	mov	r0, r2
 800134a:	4798      	blx	r3
 800134c:	4603      	mov	r3, r0
 800134e:	089a      	lsrs	r2, r3, #2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

	// Find first empty TLV
	mFreeTLV_Index = TLV_Driver::findNextTLV (cFreeTLV_Tag, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	4907      	ldr	r1, [pc, #28]	@ (8001374 <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE+0xa8>)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f845 	bl	80013e8 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]

}
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	09122024 	.word	0x09122024
 8001374:	65657246 	.word	0x65657246

08001378 <_ZN12CasualNoises10TLV_Driver13deleteAllTLVsEv>:
// Delete all TLV's by creating a large free TLV as the first one in NVM
//
//  CasualNoises    02/04/2023  First implementation
//==============================================================================
void TLV_Driver::deleteAllTLVs()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	// Replace the first tag with a FREE tag
	uint32_t freeSpace = (mNVM_DriverPtr->getTotalCapacity() / 4) - 1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3310      	adds	r3, #16
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4610      	mov	r0, r2
 8001390:	4798      	blx	r3
 8001392:	4603      	mov	r3, r0
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3b01      	subs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
	(*mNVM_DriverPtr)[1] = cFreeTLV_Tag;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4798      	blx	r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <_ZN12CasualNoises10TLV_Driver13deleteAllTLVsEv+0x6c>)
 80013b0:	601a      	str	r2, [r3, #0]
	(*mNVM_DriverPtr)[2] = freeSpace;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	2102      	movs	r1, #2
 80013c0:	4610      	mov	r0, r2
 80013c2:	4798      	blx	r3
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6013      	str	r3, [r2, #0]
	mNVM_DriverPtr->flushSectorCache();
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3308      	adds	r3, #8
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	65657246 	.word	0x65657246

080013e8 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm>:
// index = 0: start at the start of NVM space
//
//  CasualNoises    02/04/2023  First implementation
//==============================================================================
uint32_t TLV_Driver::findNextTLV (uint32_t tag, uint32_t index)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]

	// Skip current TLV or start from the first one?
	if (index <= 1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d802      	bhi.n	8001400 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x18>
		index = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e010      	b.n	8001422 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x3a>
	else
		index += getLength(index);
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7ff ff1e 	bl	8001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	607b      	str	r3, [r7, #4]

	// Find TLV until end of NVM space
	while ((index < mNVM_AfterEndIndex) &&
 8001410:	e007      	b.n	8001422 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x3a>
			(getTag(index) != tag))
		index += getLength(index);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff ff15 	bl	8001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	607b      	str	r3, [r7, #4]
	while ((index < mNVM_AfterEndIndex) &&
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	d209      	bcs.n	8001440 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x58>
			(getTag(index) != tag))
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fede 	bl	80011f0 <_ZNK12CasualNoises10TLV_Driver6getTagEm>
 8001434:	4602      	mov	r2, r0
	while ((index < mNVM_AfterEndIndex) &&
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4293      	cmp	r3, r2
 800143a:	d001      	beq.n	8001440 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x58>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x5a>
 8001440:	2300      	movs	r3, #0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e5      	bne.n	8001412 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x2a>

	// Return index if TLV found
	if (index >= mNVM_AfterEndIndex)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d301      	bcc.n	8001454 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x6c>
		return 0;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm+0x6e>
	else
		return index;
 8001454:	687b      	ldr	r3, [r7, #4]

}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm>:
// Return: false if no free NVM space was available
//
//  CasualNoises    30/10/2023  First implementation
//==============================================================================
bool TLV_Driver::addTLV(uint32_t tag, uint32_t length, uint32_t* valuePtr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]

	// Find free TLV that is large enough
	uint32_t index = findNextTLV (cFreeTLV_Tag, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	4938      	ldr	r1, [pc, #224]	@ (8001554 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0xf4>)
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb8 	bl	80013e8 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm>
 8001478:	61b8      	str	r0, [r7, #24]
	while (index != 0)
 800147a:	e00d      	b.n	8001498 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x38>
	{
		if (getLength(index) >= length + 2)
 800147c:	69b9      	ldr	r1, [r7, #24]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff fee0 	bl	8001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3302      	adds	r3, #2
 800148a:	429a      	cmp	r2, r3
 800148c:	bf2c      	ite	cs
 800148e:	2301      	movcs	r3, #1
 8001490:	2300      	movcc	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x40>
	while (index != 0)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ee      	bne.n	800147c <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x1c>
 800149e:	e000      	b.n	80014a2 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x42>
			break;
 80014a0:	bf00      	nop
	}
	if (index == 0)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x4c>
		return false;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e04e      	b.n	800154a <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0xea>

	// Create a new free TLV after this one
	if (getLength(index) > 8)
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fec8 	bl	8001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	bf8c      	ite	hi
 80014ba:	2301      	movhi	r3, #1
 80014bc:	2300      	movls	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d016      	beq.n	80014f2 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0x92>
	{
		uint32_t newIndex = index + length + 2;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	3302      	adds	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
		setTag(newIndex, cFreeTLV_Tag);
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0xf4>)
 80014d0:	6979      	ldr	r1, [r7, #20]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff fea0 	bl	8001218 <_ZNK12CasualNoises10TLV_Driver6setTagEmm>
		setLength(newIndex, getLength(index) - length - 2);
 80014d8:	69b9      	ldr	r1, [r7, #24]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff feb2 	bl	8001244 <_ZNK12CasualNoises10TLV_Driver9getLengthEm>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	3b02      	subs	r3, #2
 80014e8:	461a      	mov	r2, r3
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff febe 	bl	800126e <_ZNK12CasualNoises10TLV_Driver9setLengthEmm>
	}

	// Create new tag
	setTag(index, tag);
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fe8e 	bl	8001218 <_ZNK12CasualNoises10TLV_Driver6setTagEmm>
	setLength(index, length + 2);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3302      	adds	r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff feb2 	bl	800126e <_ZNK12CasualNoises10TLV_Driver9setLengthEmm>
	for (uint32_t i = 0; i < length; ++i)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e00e      	b.n	800152e <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0xce>
	{
		setValue(index + i, valuePtr[i]);
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	18d1      	adds	r1, r2, r3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff feba 	bl	800129c <_ZNK12CasualNoises10TLV_Driver8setValueEmm>
	for (uint32_t i = 0; i < length; ++i)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3ec      	bcc.n	8001510 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm+0xb0>
	}

	// Save changes into the flash devices
	mNVM_DriverPtr->flushSectorCache();
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3308      	adds	r3, #8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	4798      	blx	r3

	// Mission successful
	return true;
 8001548:	2301      	movs	r3, #1

}
 800154a:	4618      	mov	r0, r3
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	65657246 	.word	0x65657246

08001558 <_ZN12CasualNoisesL14CN_ReportFaultEm>:
{

#include "../../CasualNoises/Drivers/IO_Drivers/PCF8574_Driver.h"

static void CN_ReportFault(uint32_t faultCode)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
	uint8_t buf = ~faultCode << 4;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	73fb      	strb	r3, [r7, #15]
	uint8_t blank = 0xff;
 800156e:	23ff      	movs	r3, #255	@ 0xff
 8001570:	73bb      	strb	r3, [r7, #14]
	vTaskSuspendAll();
 8001572:	f009 fd47 	bl	800b004 <vTaskSuspendAll>
	for(;;)
	{
		/*HAL_StatusTypeDef res = */
		HAL_I2C_Master_Transmit(&hi2c1, CasualNoises::cPCF8574_Addres_1, &buf  , 1, 1000);
 8001576:	f107 020f 	add.w	r2, r7, #15
 800157a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2140      	movs	r1, #64	@ 0x40
 8001584:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <_ZN12CasualNoisesL14CN_ReportFaultEm+0x58>)
 8001586:	f002 f8eb 	bl	8003760 <HAL_I2C_Master_Transmit>
		HAL_Delay(500);
 800158a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800158e:	f001 f923 	bl	80027d8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, CasualNoises::cPCF8574_Addres_2, &blank, 1, 1000);
 8001592:	f107 020e 	add.w	r2, r7, #14
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	2142      	movs	r1, #66	@ 0x42
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <_ZN12CasualNoisesL14CN_ReportFaultEm+0x58>)
 80015a2:	f002 f8dd 	bl	8003760 <HAL_I2C_Master_Transmit>
		HAL_Delay(200);
 80015a6:	20c8      	movs	r0, #200	@ 0xc8
 80015a8:	f001 f916 	bl	80027d8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, CasualNoises::cPCF8574_Addres_1, &buf  , 1, 1000);
 80015ac:	bf00      	nop
 80015ae:	e7e2      	b.n	8001576 <_ZN12CasualNoisesL14CN_ReportFaultEm+0x1e>
 80015b0:	240013a0 	.word	0x240013a0

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f001 f8b2 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f822 	bl	8001604 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fa3c 	bl	8001a3c <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 80015c4:	f000 f89e 	bl	8001704 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 80015c8:	f000 f9d0 	bl	800196c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_HS_USB_Init();
 80015cc:	f000 fa2e 	bl	8001a2c <_ZL22MX_USB_OTG_HS_USB_Initv>
  MX_I2S2_Init();
 80015d0:	f000 f938 	bl	8001844 <_ZL12MX_I2S2_Initv>
  MX_I2C1_Init();
 80015d4:	f000 f8e8 	bl	80017a8 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 80015d8:	f000 f96c 	bl	80018b4 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015dc:	f008 fbd4 	bl	8009d88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015e0:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <main+0x44>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <main+0x48>)
 80015e6:	f008 fc19 	bl	8009e1c <osThreadNew>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <main+0x4c>)
 80015ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015f0:	f008 fbee 	bl	8009dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <main+0x40>
 80015f8:	0800f23c 	.word	0x0800f23c
 80015fc:	08001c59 	.word	0x08001c59
 8001600:	24001564 	.word	0x24001564

08001604 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09c      	sub	sp, #112	@ 0x70
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	224c      	movs	r2, #76	@ 0x4c
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00b ff44 	bl	800d4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00b ff3e 	bl	800d4a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001624:	2002      	movs	r0, #2
 8001626:	f002 fd95 	bl	8004154 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <_Z18SystemClock_Configv+0xfc>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a33      	ldr	r2, [pc, #204]	@ (8001700 <_Z18SystemClock_Configv+0xfc>)
 8001634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <_Z18SystemClock_Configv+0xfc>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001646:	bf00      	nop
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <_Z18SystemClock_Configv+0xfc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001660:	2321      	movs	r3, #33	@ 0x21
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001664:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	2302      	movs	r3, #2
 8001674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001676:	2304      	movs	r3, #4
 8001678:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800167a:	f240 1313 	movw	r3, #275	@ 0x113
 800167e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001680:	2301      	movs	r3, #1
 8001682:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001688:	2302      	movs	r3, #2
 800168a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800168c:	2304      	movs	r3, #4
 800168e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001690:	2300      	movs	r3, #0
 8001692:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fd93 	bl	80041c8 <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80016b2:	f000 fb65 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	233f      	movs	r3, #63	@ 0x3f
 80016b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2303      	movs	r3, #3
 80016bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016c2:	2308      	movs	r3, #8
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ca:	2340      	movs	r3, #64	@ 0x40
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016d4:	2340      	movs	r3, #64	@ 0x40
 80016d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2103      	movs	r1, #3
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 f94d 	bl	800497c <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80016f2:	f000 fb45 	bl	8001d80 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3770      	adds	r7, #112	@ 0x70
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	58024800 	.word	0x58024800

08001704 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <_ZL11MX_ETH_Initv+0x90>)
 800170c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 800171c:	22e1      	movs	r2, #225	@ 0xe1
 800171e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 8001734:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <_ZL11MX_ETH_Initv+0x94>)
 8001736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 800173a:	2201      	movs	r2, #1
 800173c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 8001740:	4a16      	ldr	r2, [pc, #88]	@ (800179c <_ZL11MX_ETH_Initv+0x98>)
 8001742:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 8001746:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <_ZL11MX_ETH_Initv+0x9c>)
 8001748:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 800174c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001750:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001752:	480f      	ldr	r0, [pc, #60]	@ (8001790 <_ZL11MX_ETH_Initv+0x8c>)
 8001754:	f001 f958 	bl	8002a08 <HAL_ETH_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	bf14      	ite	ne
 800175e:	2301      	movne	r3, #1
 8001760:	2300      	moveq	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8001768:	f000 fb0a 	bl	8001d80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800176c:	2238      	movs	r2, #56	@ 0x38
 800176e:	2100      	movs	r1, #0
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <_ZL11MX_ETH_Initv+0xa0>)
 8001772:	f00b fe95 	bl	800d4a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <_ZL11MX_ETH_Initv+0xa0>)
 8001778:	2221      	movs	r2, #33	@ 0x21
 800177a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <_ZL11MX_ETH_Initv+0xa0>)
 800177e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001782:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_ZL11MX_ETH_Initv+0xa0>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	240012f0 	.word	0x240012f0
 8001794:	40028000 	.word	0x40028000
 8001798:	24001568 	.word	0x24001568
 800179c:	2400023c 	.word	0x2400023c
 80017a0:	240001dc 	.word	0x240001dc
 80017a4:	240012b8 	.word	0x240012b8

080017a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <_ZL12MX_I2C1_Initv+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017b4:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <_ZL12MX_I2C1_Initv+0x98>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e2:	4815      	ldr	r0, [pc, #84]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 80017e4:	f001 ff20 	bl	8003628 <HAL_I2C_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80017f8:	f000 fac2 	bl	8001d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	480e      	ldr	r0, [pc, #56]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 8001800:	f002 fae0 	bl	8003dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001814:	f000 fab4 	bl	8001d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	4807      	ldr	r0, [pc, #28]	@ (8001838 <_ZL12MX_I2C1_Initv+0x90>)
 800181c:	f002 fb1d 	bl	8003e5a <HAL_I2CEx_ConfigDigitalFilter>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001830:	f000 faa6 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	240013a0 	.word	0x240013a0
 800183c:	40005400 	.word	0x40005400
 8001840:	60404e72 	.word	0x60404e72

08001844 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 800184a:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <_ZL12MX_I2S2_Initv+0x6c>)
 800184c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001850:	220a      	movs	r2, #10
 8001852:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001862:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001866:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 800186a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800186e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <_ZL12MX_I2S2_Initv+0x68>)
 8001890:	f002 fb30 	bl	8003ef4 <HAL_I2S_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZL12MX_I2S2_Initv+0x64>
  {
    Error_Handler();
 80018a4:	f000 fa6c 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	240013f4 	.word	0x240013f4
 80018b0:	40003800 	.word	0x40003800

080018b4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <_ZL12MX_SPI1_Initv+0xb4>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018ce:	2207      	movs	r2, #7
 80018d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018e8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80018ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001906:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001908:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001910:	2200      	movs	r2, #0
 8001912:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001916:	2200      	movs	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 800191c:	2200      	movs	r2, #0
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001928:	2200      	movs	r2, #0
 800192a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001934:	2200      	movs	r2, #0
 8001936:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 800193a:	2200      	movs	r2, #0
 800193c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001940:	2200      	movs	r2, #0
 8001942:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001944:	4807      	ldr	r0, [pc, #28]	@ (8001964 <_ZL12MX_SPI1_Initv+0xb0>)
 8001946:	f005 ffcd 	bl	80078e4 <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <_ZL12MX_SPI1_Initv+0xaa>
  {
    Error_Handler();
 800195a:	f000 fa11 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24001448 	.word	0x24001448
 8001968:	40013000 	.word	0x40013000

0800196c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001970:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001972:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001976:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800198a:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019b4:	481b      	ldr	r0, [pc, #108]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019b6:	f006 ffc3 	bl	8008940 <HAL_UART_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80019ca:	f000 f9d9 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4814      	ldr	r0, [pc, #80]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019d2:	f008 f8ca 	bl	8009b6a <HAL_UARTEx_SetTxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80019e6:	f000 f9cb 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80019ee:	f008 f8fa 	bl	8009be6 <HAL_UARTEx_SetRxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001a02:	f000 f9bd 	bl	8001d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001a08:	f008 f876 	bl	8009af8 <HAL_UARTEx_DisableFifoMode>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001a1c:	f000 f9b0 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	240014d0 	.word	0x240014d0
 8001a28:	40004800 	.word	0x40004800

08001a2c <_ZL22MX_USB_OTG_HS_USB_Initv>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b7a      	ldr	r3, [pc, #488]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	4a78      	ldr	r2, [pc, #480]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a62:	4b76      	ldr	r3, [pc, #472]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a70:	4b72      	ldr	r3, [pc, #456]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	4a71      	ldr	r2, [pc, #452]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a80:	4b6e      	ldr	r3, [pc, #440]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	4a69      	ldr	r2, [pc, #420]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9e:	4b67      	ldr	r3, [pc, #412]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab2:	4a62      	ldr	r2, [pc, #392]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001abc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ada:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae8:	4b54      	ldr	r3, [pc, #336]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aee:	4a53      	ldr	r2, [pc, #332]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001af8:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b06:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001b0e:	f043 0310 	orr.w	r3, r3, #16
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b16:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x200>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001b2a:	4845      	ldr	r0, [pc, #276]	@ (8001c40 <_ZL12MX_GPIO_Initv+0x204>)
 8001b2c:	f001 fd48 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b36:	4843      	ldr	r0, [pc, #268]	@ (8001c44 <_ZL12MX_GPIO_Initv+0x208>)
 8001b38:	f001 fd42 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FLASH_CS4_Pin|FLASH_CS3_Pin|FLASH_CS2_Pin|FLASH_CS1_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2178      	movs	r1, #120	@ 0x78
 8001b40:	4841      	ldr	r0, [pc, #260]	@ (8001c48 <_ZL12MX_GPIO_Initv+0x20c>)
 8001b42:	f001 fd3d 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4840      	ldr	r0, [pc, #256]	@ (8001c4c <_ZL12MX_GPIO_Initv+0x210>)
 8001b4c:	f001 fd38 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	483a      	ldr	r0, [pc, #232]	@ (8001c50 <_ZL12MX_GPIO_Initv+0x214>)
 8001b66:	f001 fb83 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001b6a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	482f      	ldr	r0, [pc, #188]	@ (8001c40 <_ZL12MX_GPIO_Initv+0x204>)
 8001b84:	f001 fb74 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4828      	ldr	r0, [pc, #160]	@ (8001c44 <_ZL12MX_GPIO_Initv+0x208>)
 8001ba2:	f001 fb65 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS4_Pin FLASH_CS3_Pin FLASH_CS2_Pin FLASH_CS1_Pin */
  GPIO_InitStruct.Pin = FLASH_CS4_Pin|FLASH_CS3_Pin|FLASH_CS2_Pin|FLASH_CS1_Pin;
 8001ba6:	2378      	movs	r3, #120	@ 0x78
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4822      	ldr	r0, [pc, #136]	@ (8001c48 <_ZL12MX_GPIO_Initv+0x20c>)
 8001bbe:	f001 fb57 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481c      	ldr	r0, [pc, #112]	@ (8001c48 <_ZL12MX_GPIO_Initv+0x20c>)
 8001bd8:	f001 fb4a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4818      	ldr	r0, [pc, #96]	@ (8001c54 <_ZL12MX_GPIO_Initv+0x218>)
 8001bf2:	f001 fb3d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4810      	ldr	r0, [pc, #64]	@ (8001c54 <_ZL12MX_GPIO_Initv+0x218>)
 8001c14:	f001 fb2c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <_ZL12MX_GPIO_Initv+0x210>)
 8001c30:	f001 fb1e 	bl	8003270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	@ 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58020400 	.word	0x58020400
 8001c44:	58020c00 	.word	0x58020c00
 8001c48:	58021800 	.word	0x58021800
 8001c4c:	58021000 	.word	0x58021000
 8001c50:	58020800 	.word	0x58020800
 8001c54:	58020000 	.word	0x58020000

08001c58 <_Z16StartDefaultTaskPv>:
//
//  CasualNoises    09/12/2024  First implementation
//==============================================================================
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b095      	sub	sp, #84	@ 0x54
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// Set default nucleo led state
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2101      	movs	r1, #1
 8001c64:	4834      	ldr	r0, [pc, #208]	@ (8001d38 <_Z16StartDefaultTaskPv+0xe0>)
 8001c66:	f001 fcab 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4833      	ldr	r0, [pc, #204]	@ (8001d3c <_Z16StartDefaultTaskPv+0xe4>)
 8001c70:	f001 fca6 	bl	80035c0 <HAL_GPIO_WritePin>

    // Get the amount of free heap memory
    size_t xFreeHeapSize = xPortGetFreeHeapSize();
 8001c74:	f00a fd7c 	bl	800c770 <xPortGetFreeHeapSize>
 8001c78:	64f8      	str	r0, [r7, #76]	@ 0x4c


    CasualNoises::sNVM_DriverInitData data;
    data.hspix_ptr 			  = &hspi1;
 8001c7a:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <_Z16StartDefaultTaskPv+0xe8>)
 8001c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    data.noOfDevices 		  = 4;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	83bb      	strh	r3, [r7, #28]
    data.deviceSelectPorts[0] = GPIOG;
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <_Z16StartDefaultTaskPv+0xec>)
 8001c84:	623b      	str	r3, [r7, #32]
    data.deviceSelectPins[0]  = FLASH_CS1_Pin;
 8001c86:	2340      	movs	r3, #64	@ 0x40
 8001c88:	863b      	strh	r3, [r7, #48]	@ 0x30
    data.deviceSelectPorts[1] = GPIOG;
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <_Z16StartDefaultTaskPv+0xec>)
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    data.deviceSelectPins[1]  = FLASH_CS2_Pin;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	867b      	strh	r3, [r7, #50]	@ 0x32
    data.deviceSelectPorts[2] = GPIOG;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	@ (8001d44 <_Z16StartDefaultTaskPv+0xec>)
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    data.deviceSelectPins[2]  = FLASH_CS3_Pin;
 8001c96:	2310      	movs	r3, #16
 8001c98:	86bb      	strh	r3, [r7, #52]	@ 0x34
    data.deviceSelectPorts[3] = GPIOG;
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <_Z16StartDefaultTaskPv+0xec>)
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    data.deviceSelectPins[3]  = FLASH_CS4_Pin;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	86fb      	strh	r3, [r7, #54]	@ 0x36

    CasualNoises::W25Qxx_Driver* driver = new CasualNoises::W25Qxx_Driver(&data);
 8001ca2:	2048      	movs	r0, #72	@ 0x48
 8001ca4:	f00a fe2c 	bl	800c900 <_Znwj>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461c      	mov	r4, r3
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7fe fd36 	bl	8000724 <_ZN12CasualNoises13W25Qxx_DriverC1EPKNS_19sNVM_DriverInitDataE>
 8001cb8:	64bc      	str	r4, [r7, #72]	@ 0x48
    CasualNoises::NVM_Driver* ptr = dynamic_cast<CasualNoises::NVM_Driver*>(driver);
 8001cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cbc:	647b      	str	r3, [r7, #68]	@ 0x44

    CasualNoises::TLV_Driver* tlv = new CasualNoises::TLV_Driver(ptr);
 8001cbe:	200c      	movs	r0, #12
 8001cc0:	f00a fe1e 	bl	800c900 <_Znwj>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461c      	mov	r4, r3
 8001cc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fafe 	bl	80012cc <_ZN12CasualNoises10TLV_DriverC1EPNS_10NVM_DriverE>
 8001cd0:	643c      	str	r4, [r7, #64]	@ 0x40

    uint32_t index = tlv->findNextTLV(0x12345678, 1);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	491c      	ldr	r1, [pc, #112]	@ (8001d48 <_Z16StartDefaultTaskPv+0xf0>)
 8001cd6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001cd8:	f7ff fb86 	bl	80013e8 <_ZN12CasualNoises10TLV_Driver11findNextTLVEmm>
 8001cdc:	63f8      	str	r0, [r7, #60]	@ 0x3c

    uint32_t array[4];
    array[0] = 0x11223344;
 8001cde:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <_Z16StartDefaultTaskPv+0xf4>)
 8001ce0:	60fb      	str	r3, [r7, #12]
    array[1] = 0x22334455;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <_Z16StartDefaultTaskPv+0xf8>)
 8001ce4:	613b      	str	r3, [r7, #16]
    array[2] = 0x33445566;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <_Z16StartDefaultTaskPv+0xfc>)
 8001ce8:	617b      	str	r3, [r7, #20]
    array[3] = 0x44556677;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <_Z16StartDefaultTaskPv+0x100>)
 8001cec:	61bb      	str	r3, [r7, #24]
    tlv->addTLV(0x12345678, 4, array);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4914      	ldr	r1, [pc, #80]	@ (8001d48 <_Z16StartDefaultTaskPv+0xf0>)
 8001cf6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001cf8:	f7ff fbb2 	bl	8001460 <_ZN12CasualNoises10TLV_Driver6addTLVEmmPm>

    driver->flushSectorCache();
 8001cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3308      	adds	r3, #8
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001d06:	4798      	blx	r3
	/* Infinite loop */
	for(;;)
	{

		// Toggle green and yellow led's
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <_Z16StartDefaultTaskPv+0xe0>)
 8001d0c:	f001 fc71 	bl	80035f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, LED_YELLOW_Pin);
 8001d10:	2102      	movs	r1, #2
 8001d12:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <_Z16StartDefaultTaskPv+0xe4>)
 8001d14:	f001 fc6d 	bl	80035f2 <HAL_GPIO_TogglePin>

	    // Get the amount of free heap memory
	    xFreeHeapSize = xPortGetFreeHeapSize();
 8001d18:	f00a fd2a 	bl	800c770 <xPortGetFreeHeapSize>
 8001d1c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	    if (xFreeHeapSize < 1024)
 8001d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d24:	d202      	bcs.n	8001d2c <_Z16StartDefaultTaskPv+0xd4>
	    	CasualNoises::CN_ReportFault(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff fc16 	bl	8001558 <_ZN12CasualNoisesL14CN_ReportFaultEm>

	    // Wait here for a short time
		osDelay(500);
 8001d2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d30:	f008 f906 	bl	8009f40 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8001d34:	e7e8      	b.n	8001d08 <_Z16StartDefaultTaskPv+0xb0>
 8001d36:	bf00      	nop
 8001d38:	58020400 	.word	0x58020400
 8001d3c:	58021000 	.word	0x58021000
 8001d40:	24001448 	.word	0x24001448
 8001d44:	58021800 	.word	0x58021800
 8001d48:	12345678 	.word	0x12345678
 8001d4c:	11223344 	.word	0x11223344
 8001d50:	22334455 	.word	0x22334455
 8001d54:	33445566 	.word	0x33445566
 8001d58:	44556677 	.word	0x44556677

08001d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d6e:	f000 fd13 	bl	8002798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <Error_Handler+0x8>

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_MspInit+0x38>)
 8001d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_MspInit+0x38>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_MspInit+0x38>)
 8001da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	210f      	movs	r1, #15
 8001db4:	f06f 0001 	mvn.w	r0, #1
 8001db8:	f000 fdfe 	bl	80029b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	58024400 	.word	0x58024400

08001dc8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a59      	ldr	r2, [pc, #356]	@ (8001f4c <HAL_ETH_MspInit+0x184>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f040 80ab 	bne.w	8001f42 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001df2:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dfc:	4b54      	ldr	r3, [pc, #336]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001dfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001e0a:	4b51      	ldr	r3, [pc, #324]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e10:	4a4f      	ldr	r2, [pc, #316]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001e28:	4b49      	ldr	r3, [pc, #292]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e2e:	4a48      	ldr	r2, [pc, #288]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e38:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b42      	ldr	r3, [pc, #264]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4c:	4a40      	ldr	r2, [pc, #256]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6a:	4a39      	ldr	r2, [pc, #228]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e74:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e92:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb0:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_ETH_MspInit+0x188>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ebe:	2332      	movs	r3, #50	@ 0x32
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ece:	230b      	movs	r3, #11
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481e      	ldr	r0, [pc, #120]	@ (8001f54 <HAL_ETH_MspInit+0x18c>)
 8001eda:	f001 f9c9 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ede:	2386      	movs	r3, #134	@ 0x86
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eee:	230b      	movs	r3, #11
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4817      	ldr	r0, [pc, #92]	@ (8001f58 <HAL_ETH_MspInit+0x190>)
 8001efa:	f001 f9b9 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f10:	230b      	movs	r3, #11
 8001f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4810      	ldr	r0, [pc, #64]	@ (8001f5c <HAL_ETH_MspInit+0x194>)
 8001f1c:	f001 f9a8 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f20:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f32:	230b      	movs	r3, #11
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <HAL_ETH_MspInit+0x198>)
 8001f3e:	f001 f997 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001f42:	bf00      	nop
 8001f44:	3738      	adds	r7, #56	@ 0x38
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40028000 	.word	0x40028000
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020800 	.word	0x58020800
 8001f58:	58020000 	.word	0x58020000
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	58021800 	.word	0x58021800

08001f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0b8      	sub	sp, #224	@ 0xe0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	22b8      	movs	r2, #184	@ 0xb8
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00b fa8b 	bl	800d4a0 <memset>
  if(hi2c->Instance==I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_I2C_MspInit+0xc4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d145      	bne.n	8002020 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f94:	f04f 0208 	mov.w	r2, #8
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 f8b4 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fb6:	f7ff fee3 	bl	8001d80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd8:	23c0      	movs	r3, #192	@ 0xc0
 8001fda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <HAL_I2C_MspInit+0xcc>)
 8001ffe:	f001 f937 	bl	8003270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002008:	4a08      	ldr	r2, [pc, #32]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 800200a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_I2C_MspInit+0xc8>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002020:	bf00      	nop
 8002022:	37e0      	adds	r7, #224	@ 0xe0
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40005400 	.word	0x40005400
 800202c:	58024400 	.word	0x58024400
 8002030:	58020400 	.word	0x58020400

08002034 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0ba      	sub	sp, #232	@ 0xe8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	22b8      	movs	r2, #184	@ 0xb8
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f00b fa23 	bl	800d4a0 <memset>
  if(hi2s->Instance==SPI2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a38      	ldr	r2, [pc, #224]	@ (8002140 <HAL_I2S_MspInit+0x10c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d169      	bne.n	8002138 <HAL_I2S_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002070:	2300      	movs	r3, #0
 8002072:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	4618      	mov	r0, r3
 800207a:	f003 f84d 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8002084:	f7ff fe7c 	bl	8001d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 800208a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800208e:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002094:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 800209a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800209e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b6:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_I2S_MspInit+0x110>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    PC3_C     ------> I2S2_SDO
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80020e2:	234c      	movs	r3, #76	@ 0x4c
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fa:	2305      	movs	r3, #5
 80020fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002104:	4619      	mov	r1, r3
 8002106:	4810      	ldr	r0, [pc, #64]	@ (8002148 <HAL_I2S_MspInit+0x114>)
 8002108:	f001 f8b2 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800210c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002126:	2305      	movs	r3, #5
 8002128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002130:	4619      	mov	r1, r3
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <HAL_I2S_MspInit+0x118>)
 8002134:	f001 f89c 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002138:	bf00      	nop
 800213a:	37e8      	adds	r7, #232	@ 0xe8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40003800 	.word	0x40003800
 8002144:	58024400 	.word	0x58024400
 8002148:	58020800 	.word	0x58020800
 800214c:	58020400 	.word	0x58020400

08002150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0ba      	sub	sp, #232	@ 0xe8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	22b8      	movs	r2, #184	@ 0xb8
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f00b f995 	bl	800d4a0 <memset>
  if(hspi->Instance==SPI1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a38      	ldr	r2, [pc, #224]	@ (800225c <HAL_SPI_MspInit+0x10c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d168      	bne.n	8002252 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002180:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800218c:	2300      	movs	r3, #0
 800218e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	4618      	mov	r0, r3
 8002196:	f002 ffbf 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021a0:	f7ff fdee 	bl	8001d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b27      	ldr	r3, [pc, #156]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d2:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_SPI_MspInit+0x110>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021fe:	2360      	movs	r3, #96	@ 0x60
 8002200:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002216:	2305      	movs	r3, #5
 8002218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002220:	4619      	mov	r1, r3
 8002222:	4810      	ldr	r0, [pc, #64]	@ (8002264 <HAL_SPI_MspInit+0x114>)
 8002224:	f001 f824 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002240:	2305      	movs	r3, #5
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002246:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800224a:	4619      	mov	r1, r3
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <HAL_SPI_MspInit+0x118>)
 800224e:	f001 f80f 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	37e8      	adds	r7, #232	@ 0xe8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40013000 	.word	0x40013000
 8002260:	58024400 	.word	0x58024400
 8002264:	58020000 	.word	0x58020000
 8002268:	58020c00 	.word	0x58020c00

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0b8      	sub	sp, #224	@ 0xe0
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	22b8      	movs	r2, #184	@ 0xb8
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f00b f907 	bl	800d4a0 <memset>
  if(huart->Instance==USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_UART_MspInit+0xc8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d146      	bne.n	800232a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800229c:	f04f 0202 	mov.w	r2, #2
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 ff30 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022be:	f7ff fd5f 	bl	8001d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e6:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_UART_MspInit+0xcc>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80022fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002302:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002318:	2307      	movs	r3, #7
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800231e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_UART_MspInit+0xd0>)
 8002326:	f000 ffa3 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800232a:	bf00      	nop
 800232c:	37e0      	adds	r7, #224	@ 0xe0
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004800 	.word	0x40004800
 8002338:	58024400 	.word	0x58024400
 800233c:	58020c00 	.word	0x58020c00

08002340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08e      	sub	sp, #56	@ 0x38
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d844      	bhi.n	80023d8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800234e:	2200      	movs	r2, #0
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	2019      	movs	r0, #25
 8002354:	f000 fb30 	bl	80029b8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002358:	2019      	movs	r0, #25
 800235a:	f000 fb47 	bl	80029ec <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800235e:	4a24      	ldr	r2, [pc, #144]	@ (80023f0 <HAL_InitTick+0xb0>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002364:	4b23      	ldr	r3, [pc, #140]	@ (80023f4 <HAL_InitTick+0xb4>)
 8002366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800236a:	4a22      	ldr	r2, [pc, #136]	@ (80023f4 <HAL_InitTick+0xb4>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002374:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <HAL_InitTick+0xb4>)
 8002376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002382:	f107 020c 	add.w	r2, r7, #12
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fe81 	bl	8005094 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002392:	f002 fe69 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8002396:	4603      	mov	r3, r0
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239e:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <HAL_InitTick+0xb8>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	3b01      	subs	r3, #1
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <HAL_InitTick+0xbc>)
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <HAL_InitTick+0xc0>)
 80023ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0xbc>)
 80023b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023b8:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_InitTick+0xbc>)
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_InitTick+0xbc>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_InitTick+0xbc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80023ca:	480c      	ldr	r0, [pc, #48]	@ (80023fc <HAL_InitTick+0xbc>)
 80023cc:	f005 ffd1 	bl	8008372 <HAL_TIM_Base_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_InitTick+0xa6>
 80023d6:	e001      	b.n	80023dc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e005      	b.n	80023e8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80023dc:	4807      	ldr	r0, [pc, #28]	@ (80023fc <HAL_InitTick+0xbc>)
 80023de:	f006 f829 	bl	8008434 <HAL_TIM_Base_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3738      	adds	r7, #56	@ 0x38
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	24000008 	.word	0x24000008
 80023f4:	58024400 	.word	0x58024400
 80023f8:	431bde83 	.word	0x431bde83
 80023fc:	24001570 	.word	0x24001570
 8002400:	40010000 	.word	0x40010000

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <NMI_Handler+0x4>

0800240c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <MemManage_Handler+0x4>

0800241c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <UsageFault_Handler+0x4>

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <TIM1_UP_IRQHandler+0x10>)
 8002442:	f006 f87d 	bl	8008540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	24001570 	.word	0x24001570

08002450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_kill>:

int _kill(int pid, int sig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800246a:	f00b f8cf 	bl	800d60c <__errno>
 800246e:	4603      	mov	r3, r0
 8002470:	2216      	movs	r2, #22
 8002472:	601a      	str	r2, [r3, #0]
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_exit>:

void _exit (int status)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ffe7 	bl	8002460 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002492:	bf00      	nop
 8002494:	e7fd      	b.n	8002492 <_exit+0x12>

08002496 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e00a      	b.n	80024be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a8:	f3af 8000 	nop.w
 80024ac:	4601      	mov	r1, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	60ba      	str	r2, [r7, #8]
 80024b4:	b2ca      	uxtb	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	dbf0      	blt.n	80024a8 <_read+0x12>
  }

  return len;
 80024c6:	687b      	ldr	r3, [r7, #4]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e009      	b.n	80024f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	60ba      	str	r2, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbf1      	blt.n	80024e2 <_write+0x12>
  }
  return len;
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_close>:

int _close(int file)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002530:	605a      	str	r2, [r3, #4]
  return 0;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_isatty>:

int _isatty(int file)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f00b f834 	bl	800d60c <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	24050000 	.word	0x24050000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	240015bc 	.word	0x240015bc
 80025d8:	24042500 	.word	0x24042500

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025e0:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <SystemInit+0xd0>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e6:	4a31      	ldr	r2, [pc, #196]	@ (80026ac <SystemInit+0xd0>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025f0:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <SystemInit+0xd4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d807      	bhi.n	800260c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025fc:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <SystemInit+0xd4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 030f 	bic.w	r3, r3, #15
 8002604:	4a2a      	ldr	r2, [pc, #168]	@ (80026b0 <SystemInit+0xd4>)
 8002606:	f043 0307 	orr.w	r3, r3, #7
 800260a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800260c:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <SystemInit+0xd8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a28      	ldr	r2, [pc, #160]	@ (80026b4 <SystemInit+0xd8>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002618:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <SystemInit+0xd8>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800261e:	4b25      	ldr	r3, [pc, #148]	@ (80026b4 <SystemInit+0xd8>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4924      	ldr	r1, [pc, #144]	@ (80026b4 <SystemInit+0xd8>)
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <SystemInit+0xdc>)
 8002626:	4013      	ands	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800262a:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <SystemInit+0xd4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <SystemInit+0xd4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 030f 	bic.w	r3, r3, #15
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <SystemInit+0xd4>)
 8002640:	f043 0307 	orr.w	r3, r3, #7
 8002644:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <SystemInit+0xd8>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <SystemInit+0xd8>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002652:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <SystemInit+0xd8>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <SystemInit+0xd8>)
 800265a:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <SystemInit+0xe0>)
 800265c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <SystemInit+0xd8>)
 8002660:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <SystemInit+0xe4>)
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <SystemInit+0xd8>)
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <SystemInit+0xe8>)
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <SystemInit+0xd8>)
 800266c:	2200      	movs	r2, #0
 800266e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002670:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <SystemInit+0xd8>)
 8002672:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <SystemInit+0xe8>)
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <SystemInit+0xd8>)
 8002678:	2200      	movs	r2, #0
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <SystemInit+0xd8>)
 800267e:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <SystemInit+0xe8>)
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <SystemInit+0xd8>)
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <SystemInit+0xd8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <SystemInit+0xd8>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <SystemInit+0xd8>)
 8002696:	2200      	movs	r2, #0
 8002698:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <SystemInit+0xec>)
 800269c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	52002000 	.word	0x52002000
 80026b4:	58024400 	.word	0x58024400
 80026b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80026bc:	02020200 	.word	0x02020200
 80026c0:	01ff0000 	.word	0x01ff0000
 80026c4:	01010280 	.word	0x01010280
 80026c8:	52004000 	.word	0x52004000

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026d0:	f7ff ff84 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	@ (8002708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	@ (800270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f00a ff8d 	bl	800d618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7fe ff59 	bl	80015b4 <main>
  bx  lr
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002708:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800270c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002710:	0800f618 	.word	0x0800f618
  ldr r2, =_sbss
 8002714:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 8002718:	240424fc 	.word	0x240424fc

0800271c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC3_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002726:	2003      	movs	r0, #3
 8002728:	f000 f93b 	bl	80029a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800272c:	f002 fadc 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_Init+0x68>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	4913      	ldr	r1, [pc, #76]	@ (800278c <HAL_Init+0x6c>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800274a:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_Init+0x68>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_Init+0x6c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_Init+0x70>)
 8002762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002764:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <HAL_Init+0x74>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276a:	200f      	movs	r0, #15
 800276c:	f7ff fde8 	bl	8002340 <HAL_InitTick>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e002      	b.n	8002780 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800277a:	f7ff fb07 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	58024400 	.word	0x58024400
 800278c:	0800f260 	.word	0x0800f260
 8002790:	24000004 	.word	0x24000004
 8002794:	24000000 	.word	0x24000000

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	2400000c 	.word	0x2400000c
 80027bc:	240015c0 	.word	0x240015c0

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	240015c0 	.word	0x240015c0

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2400000c 	.word	0x2400000c

08002820 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002830:	4904      	ldr	r1, [pc, #16]	@ (8002844 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	58000400 	.word	0x58000400

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <__NVIC_SetPriorityGrouping+0x40>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	4313      	orrs	r3, r2
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <__NVIC_SetPriorityGrouping+0x40>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00
 800288c:	05fa0000 	.word	0x05fa0000

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	@ (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	@ (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	@ (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff4c 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c6:	f7ff ff63 	bl	8002890 <__NVIC_GetPriorityGrouping>
 80029ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	6978      	ldr	r0, [r7, #20]
 80029d2:	f7ff ffb3 	bl	800293c <NVIC_EncodePriority>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff82 	bl	80028e8 <__NVIC_SetPriority>
}
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff56 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0e3      	b.n	8002be2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2223      	movs	r2, #35	@ 0x23
 8002a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff f9cb 	bl	8001dc8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_ETH_Init+0x1e4>)
 8002a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a38:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <HAL_ETH_Init+0x1e4>)
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a42:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_ETH_Init+0x1e4>)
 8002a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7a1b      	ldrb	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fee1 	bl	8002820 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a5e:	e003      	b.n	8002a68 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a60:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a64:	f7ff fedc 	bl	8002820 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a68:	4b61      	ldr	r3, [pc, #388]	@ (8002bf0 <HAL_ETH_Init+0x1e8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a84:	f7ff fe9c 	bl	80027c0 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a8a:	e011      	b.n	8002ab0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a8c:	f7ff fe98 	bl	80027c0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a9a:	d909      	bls.n	8002ab0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	22e0      	movs	r2, #224	@ 0xe0
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e098      	b.n	8002be2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e4      	bne.n	8002a8c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f89e 	bl	8002c04 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002ac8:	f002 fa88 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <HAL_ETH_Init+0x1ec>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	0c9a      	lsrs	r2, r3, #18
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3a01      	subs	r2, #1
 8002adc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fa81 	bl	8002fe8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002af2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b02:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	22e0      	movs	r2, #224	@ 0xe0
 8002b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e05d      	b.n	8002be2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b32:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_ETH_Init+0x1f0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6952      	ldr	r2, [r2, #20]
 8002b3a:	0051      	lsls	r1, r2, #1
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b46:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fae9 	bl	8003122 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fb2f 	bl	80031b4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	3305      	adds	r3, #5
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	021a      	lsls	r2, r3, #8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	3303      	adds	r3, #3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	061a      	lsls	r2, r3, #24
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	3302      	adds	r3, #2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ba2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ba4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <HAL_ETH_Init+0x1f4>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <HAL_ETH_Init+0x1f8>)
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	58000400 	.word	0x58000400
 8002bf4:	431bde83 	.word	0x431bde83
 8002bf8:	ffff8001 	.word	0xffff8001
 8002bfc:	0c020060 	.word	0x0c020060
 8002c00:	0c20c000 	.word	0x0c20c000

08002c04 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c1e:	f002 f9dd 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8002c22:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	@ (8002c90 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d804      	bhi.n	8002c36 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e022      	b.n	8002c7c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d204      	bcs.n	8002c48 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e019      	b.n	8002c7c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d915      	bls.n	8002c7c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d804      	bhi.n	8002c62 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e00c      	b.n	8002c7c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d804      	bhi.n	8002c74 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e003      	b.n	8002c7c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	02160ebf 	.word	0x02160ebf
 8002c94:	03938700 	.word	0x03938700
 8002c98:	05f5e0ff 	.word	0x05f5e0ff
 8002c9c:	08f0d17f 	.word	0x08f0d17f
 8002ca0:	0ee6b27f 	.word	0x0ee6b27f

08002ca4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7b1b      	ldrb	r3, [r3, #12]
 8002cc4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	7b5b      	ldrb	r3, [r3, #13]
 8002ccc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	7b9b      	ldrb	r3, [r3, #14]
 8002cd4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	7bdb      	ldrb	r3, [r3, #15]
 8002cdc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	7c12      	ldrb	r2, [r2, #16]
 8002ce4:	2a00      	cmp	r2, #0
 8002ce6:	d102      	bne.n	8002cee <ETH_SetMACConfig+0x4a>
 8002ce8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002cec:	e000      	b.n	8002cf0 <ETH_SetMACConfig+0x4c>
 8002cee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cf0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	7c52      	ldrb	r2, [r2, #17]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	d102      	bne.n	8002d00 <ETH_SetMACConfig+0x5c>
 8002cfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cfe:	e000      	b.n	8002d02 <ETH_SetMACConfig+0x5e>
 8002d00:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7c9b      	ldrb	r3, [r3, #18]
 8002d08:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d0a:	431a      	orrs	r2, r3
               macconf->Speed |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d10:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002d16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	7f1b      	ldrb	r3, [r3, #28]
 8002d1c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	7f5b      	ldrb	r3, [r3, #29]
 8002d24:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	7f92      	ldrb	r2, [r2, #30]
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	d102      	bne.n	8002d36 <ETH_SetMACConfig+0x92>
 8002d30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d34:	e000      	b.n	8002d38 <ETH_SetMACConfig+0x94>
 8002d36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7fdb      	ldrb	r3, [r3, #31]
 8002d3e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d40:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	d102      	bne.n	8002d52 <ETH_SetMACConfig+0xae>
 8002d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d50:	e000      	b.n	8002d54 <ETH_SetMACConfig+0xb0>
 8002d52:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d54:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d62:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d64:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b56      	ldr	r3, [pc, #344]	@ (8002ed0 <ETH_SetMACConfig+0x22c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d8e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d98:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002da2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002da4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	d102      	bne.n	8002db6 <ETH_SetMACConfig+0x112>
 8002db0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002db4:	e000      	b.n	8002db8 <ETH_SetMACConfig+0x114>
 8002db6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002db8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	4b42      	ldr	r3, [pc, #264]	@ (8002ed4 <ETH_SetMACConfig+0x230>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	68f9      	ldr	r1, [r7, #12]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ddc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <ETH_SetMACConfig+0x234>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e00:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d101      	bne.n	8002e16 <ETH_SetMACConfig+0x172>
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	e000      	b.n	8002e18 <ETH_SetMACConfig+0x174>
 8002e16:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e18:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e2a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	68f9      	ldr	r1, [r7, #12]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002e40:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002e48:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e56:	f023 0103 	bic.w	r1, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002e6e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d101      	bne.n	8002e92 <ETH_SetMACConfig+0x1ee>
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	e000      	b.n	8002e94 <ETH_SetMACConfig+0x1f0>
 8002e92:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002e9c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002ea6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002eb4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	00048083 	.word	0x00048083
 8002ed4:	c0f88000 	.word	0xc0f88000
 8002ed8:	fffffef0 	.word	0xfffffef0

08002edc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <ETH_SetDMAConfig+0xf8>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f02:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7b1b      	ldrb	r3, [r3, #12]
 8002f14:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <ETH_SetDMAConfig+0xfc>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f34:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7b5b      	ldrb	r3, [r3, #13]
 8002f3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002f50:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <ETH_SetDMAConfig+0x100>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f60:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7d1b      	ldrb	r3, [r3, #20]
 8002f6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7f5b      	ldrb	r3, [r3, #29]
 8002f74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f82:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <ETH_SetDMAConfig+0x104>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f96:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	7f1b      	ldrb	r3, [r3, #28]
 8002f9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <ETH_SetDMAConfig+0x108>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fc4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	ffff87fd 	.word	0xffff87fd
 8002fd8:	ffff2ffe 	.word	0xffff2ffe
 8002fdc:	fffec000 	.word	0xfffec000
 8002fe0:	ffc0efef 	.word	0xffc0efef
 8002fe4:	7fc0ffff 	.word	0x7fc0ffff

08002fe8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b0a4      	sub	sp, #144	@ 0x90
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003028:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003030:	2300      	movs	r3, #0
 8003032:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003040:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003044:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800304c:	2300      	movs	r3, #0
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003062:	2300      	movs	r3, #0
 8003064:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003066:	2300      	movs	r3, #0
 8003068:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800306a:	2300      	movs	r3, #0
 800306c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003080:	2320      	movs	r3, #32
 8003082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003092:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800309c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80030a4:	2302      	movs	r3, #2
 80030a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030c2:	2300      	movs	r3, #0
 80030c4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fde6 	bl	8002ca4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030d8:	2301      	movs	r3, #1
 80030da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030dc:	2301      	movs	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003100:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003108:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fee1 	bl	8002edc <ETH_SetDMAConfig>
}
 800311a:	bf00      	nop
 800311c:	3790      	adds	r7, #144	@ 0x90
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e01d      	b.n	800316c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68d9      	ldr	r1, [r3, #12]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	3206      	adds	r2, #6
 8003162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3301      	adds	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d9de      	bls.n	8003130 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003180:	461a      	mov	r2, r3
 8003182:	2303      	movs	r3, #3
 8003184:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003194:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e023      	b.n	800320a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	3212      	adds	r2, #18
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d9d8      	bls.n	80031c2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003236:	461a      	mov	r2, r3
 8003238:	2303      	movs	r3, #3
 800323a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800324a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800327e:	4b86      	ldr	r3, [pc, #536]	@ (8003498 <HAL_GPIO_Init+0x228>)
 8003280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003282:	e18c      	b.n	800359e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 817e 	beq.w	8003598 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d005      	beq.n	80032b4 <HAL_GPIO_Init+0x44>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 0201 	and.w	r2, r3, #1
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b03      	cmp	r3, #3
 8003320:	d017      	beq.n	8003352 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d123      	bne.n	80033a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	69b9      	ldr	r1, [r7, #24]
 80033a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0203 	and.w	r2, r3, #3
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80d8 	beq.w	8003598 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e8:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <HAL_GPIO_Init+0x22c>)
 80033ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_GPIO_Init+0x22c>)
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033f8:	4b28      	ldr	r3, [pc, #160]	@ (800349c <HAL_GPIO_Init+0x22c>)
 80033fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003406:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_GPIO_Init+0x230>)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_GPIO_Init+0x234>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04a      	beq.n	80034c8 <HAL_GPIO_Init+0x258>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1c      	ldr	r2, [pc, #112]	@ (80034a8 <HAL_GPIO_Init+0x238>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02b      	beq.n	8003492 <HAL_GPIO_Init+0x222>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1b      	ldr	r2, [pc, #108]	@ (80034ac <HAL_GPIO_Init+0x23c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d025      	beq.n	800348e <HAL_GPIO_Init+0x21e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1a      	ldr	r2, [pc, #104]	@ (80034b0 <HAL_GPIO_Init+0x240>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <HAL_GPIO_Init+0x21a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <HAL_GPIO_Init+0x244>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0x216>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_GPIO_Init+0x248>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0x212>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <HAL_GPIO_Init+0x24c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00d      	beq.n	800347e <HAL_GPIO_Init+0x20e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <HAL_GPIO_Init+0x250>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x20a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <HAL_GPIO_Init+0x254>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_GPIO_Init+0x206>
 8003472:	2309      	movs	r3, #9
 8003474:	e029      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 8003476:	230a      	movs	r3, #10
 8003478:	e027      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 800347a:	2307      	movs	r3, #7
 800347c:	e025      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 800347e:	2306      	movs	r3, #6
 8003480:	e023      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 8003482:	2305      	movs	r3, #5
 8003484:	e021      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 8003486:	2304      	movs	r3, #4
 8003488:	e01f      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 800348a:	2303      	movs	r3, #3
 800348c:	e01d      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 800348e:	2302      	movs	r3, #2
 8003490:	e01b      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 8003492:	2301      	movs	r3, #1
 8003494:	e019      	b.n	80034ca <HAL_GPIO_Init+0x25a>
 8003496:	bf00      	nop
 8003498:	58000080 	.word	0x58000080
 800349c:	58024400 	.word	0x58024400
 80034a0:	58000400 	.word	0x58000400
 80034a4:	58020000 	.word	0x58020000
 80034a8:	58020400 	.word	0x58020400
 80034ac:	58020800 	.word	0x58020800
 80034b0:	58020c00 	.word	0x58020c00
 80034b4:	58021000 	.word	0x58021000
 80034b8:	58021400 	.word	0x58021400
 80034bc:	58021800 	.word	0x58021800
 80034c0:	58021c00 	.word	0x58021c00
 80034c4:	58022400 	.word	0x58022400
 80034c8:	2300      	movs	r3, #0
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	f002 0203 	and.w	r2, r2, #3
 80034d0:	0092      	lsls	r2, r2, #2
 80034d2:	4093      	lsls	r3, r2
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034da:	4938      	ldr	r1, [pc, #224]	@ (80035bc <HAL_GPIO_Init+0x34c>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800353c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	3301      	adds	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f ae6b 	bne.w	8003284 <HAL_GPIO_Init+0x14>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	3724      	adds	r7, #36	@ 0x24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	58000400 	.word	0x58000400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	041a      	lsls	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	041a      	lsls	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43d9      	mvns	r1, r3
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	400b      	ands	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e08b      	b.n	8003752 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fc88 	bl	8001f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d108      	bne.n	80036ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e007      	b.n	80036da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_I2C_Init+0x134>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	02008000 	.word	0x02008000

08003760 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	817b      	strh	r3, [r7, #10]
 8003770:	4613      	mov	r3, r2
 8003772:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	f040 80fd 	bne.w	800397c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_I2C_Master_Transmit+0x30>
 800378c:	2302      	movs	r3, #2
 800378e:	e0f6      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003798:	f7ff f812 	bl	80027c0 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2319      	movs	r3, #25
 80037a4:	2201      	movs	r2, #1
 80037a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f914 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0e1      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	@ 0x21
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2210      	movs	r2, #16
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2bff      	cmp	r3, #255	@ 0xff
 80037ea:	d906      	bls.n	80037fa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	22ff      	movs	r2, #255	@ 0xff
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80037f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e007      	b.n	800380a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003808:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d024      	beq.n	800385c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	781a      	ldrb	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3301      	adds	r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	8979      	ldrh	r1, [r7, #10]
 800384e:	4b4e      	ldr	r3, [pc, #312]	@ (8003988 <HAL_I2C_Master_Transmit+0x228>)
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fa83 	bl	8003d60 <I2C_TransferConfig>
 800385a:	e066      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	4b48      	ldr	r3, [pc, #288]	@ (8003988 <HAL_I2C_Master_Transmit+0x228>)
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa78 	bl	8003d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003870:	e05b      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	6a39      	ldr	r1, [r7, #32]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f907 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07b      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d034      	beq.n	800392a <HAL_I2C_Master_Transmit+0x1ca>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d130      	bne.n	800392a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2180      	movs	r1, #128	@ 0x80
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f880 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e04d      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2bff      	cmp	r3, #255	@ 0xff
 80038ea:	d90e      	bls.n	800390a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	22ff      	movs	r2, #255	@ 0xff
 80038f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa2c 	bl	8003d60 <I2C_TransferConfig>
 8003908:	e00f      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fa1b 	bl	8003d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d19e      	bne.n	8003872 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	6a39      	ldr	r1, [r7, #32]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8ed 	bl	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01a      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <HAL_I2C_Master_Transmit+0x22c>)
 800395c:	400b      	ands	r3, r1
 800395e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	80002000 	.word	0x80002000
 800398c:	fe00e800 	.word	0xfe00e800

08003990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d103      	bne.n	80039ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d007      	beq.n	80039cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	619a      	str	r2, [r3, #24]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	e03b      	b.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f8d6 	bl	8003ba0 <I2C_IsErrorOccurred>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e041      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a04:	d02d      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe fedb 	bl	80027c0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d122      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d113      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0b4      	beq.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a96:	e033      	b.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f87f 	bl	8003ba0 <I2C_IsErrorOccurred>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e031      	b.n	8003b10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ab2:	d025      	beq.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fe fe84 	bl	80027c0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11a      	bne.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d013      	beq.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d1c4      	bne.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b24:	e02f      	b.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f838 	bl	8003ba0 <I2C_IsErrorOccurred>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e02d      	b.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fe41 	bl	80027c0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11a      	bne.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d013      	beq.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e007      	b.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d1c8      	bne.n	8003b26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d068      	beq.n	8003c9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd4:	e049      	b.n	8003c6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bdc:	d045      	beq.n	8003c6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe fdef 	bl	80027c0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_IsErrorOccurred+0x54>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c16:	d121      	bne.n	8003c5c <I2C_IsErrorOccurred+0xbc>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1e:	d01d      	beq.n	8003c5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d01a      	beq.n	8003c5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c36:	f7fe fdc3 	bl	80027c0 <HAL_GetTick>
 8003c3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3c:	e00e      	b.n	8003c5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c3e:	f7fe fdbf 	bl	80027c0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b19      	cmp	r3, #25
 8003c4a:	d907      	bls.n	8003c5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c5a:	e006      	b.n	8003c6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d1e9      	bne.n	8003c3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d003      	beq.n	8003c80 <I2C_IsErrorOccurred+0xe0>
 8003c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0aa      	beq.n	8003bd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01c      	beq.n	8003d4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fe3b 	bl	8003990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <I2C_IsErrorOccurred+0x1bc>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	@ 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	fe00e800 	.word	0xfe00e800

08003d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d78:	7a7b      	ldrb	r3, [r7, #9]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	0d5b      	lsrs	r3, r3, #21
 8003d9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d9e:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <I2C_TransferConfig+0x60>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	43db      	mvns	r3, r3
 8003da4:	ea02 0103 	and.w	r1, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	03ff63ff 	.word	0x03ff63ff

08003dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d138      	bne.n	8003e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e032      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	@ 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d139      	bne.n	8003ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e033      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	@ 0x24
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e11a      	b.n	800413c <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe f88a 	bl	8002034 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d008      	beq.n	8003f68 <HAL_I2S_Init+0x74>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d004      	beq.n	8003f68 <HAL_I2S_Init+0x74>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	f040 8094 	bne.w	8004090 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d067      	beq.n	8004040 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e001      	b.n	8003f82 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b30      	cmp	r3, #48	@ 0x30
 8003f88:	d003      	beq.n	8003f92 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003f8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f90:	d102      	bne.n	8003f98 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003f92:	2301      	movs	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	e001      	b.n	8003f9c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	@ (8004144 <HAL_I2S_Init+0x250>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d107      	bne.n	8003fb6 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8003fa6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	f002 fa53 	bl	8006458 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	e006      	b.n	8003fc4 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003fb6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	f002 fa4b 	bl	8006458 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fc2:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fcc:	d113      	bne.n	8003ff6 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	3305      	adds	r3, #5
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e014      	b.n	8004020 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	fbb2 f2f3 	udiv	r2, r2, r3
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	3305      	adds	r3, #5
 800401e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4a49      	ldr	r2, [pc, #292]	@ (8004148 <HAL_I2S_Init+0x254>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	08db      	lsrs	r3, r3, #3
 800402a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e003      	b.n	8004048 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004040:	2302      	movs	r3, #2
 8004042:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <HAL_I2S_Init+0x160>
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <HAL_I2S_Init+0x166>
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2bff      	cmp	r3, #255	@ 0xff
 8004058:	d907      	bls.n	800406a <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405e:	f043 0210 	orr.w	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e068      	b.n	800413c <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8004070:	2301      	movs	r3, #1
 8004072:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800407a:	4b34      	ldr	r3, [pc, #208]	@ (800414c <HAL_I2S_Init+0x258>)
 800407c:	4013      	ands	r3, r2
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	0411      	lsls	r1, r2, #16
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	0612      	lsls	r2, r2, #24
 8004086:	4311      	orrs	r1, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004096:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_I2S_Init+0x25c>)
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6851      	ldr	r1, [r2, #4]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6992      	ldr	r2, [r2, #24]
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6a12      	ldr	r2, [r2, #32]
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6912      	ldr	r2, [r2, #16]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80040d6:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040e6:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d007      	beq.n	8004116 <HAL_I2S_Init+0x222>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d003      	beq.n	8004116 <HAL_I2S_Init+0x222>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b0a      	cmp	r3, #10
 8004114:	d10a      	bne.n	800412c <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	58001400 	.word	0x58001400
 8004148:	cccccccd 	.word	0xcccccccd
 800414c:	fe00ffff 	.word	0xfe00ffff
 8004150:	fdff9040 	.word	0xfdff9040

08004154 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800415c:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <HAL_PWREx_ConfigSupply+0x70>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d00a      	beq.n	800417e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004168:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <HAL_PWREx_ConfigSupply+0x70>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e01f      	b.n	80041ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e01d      	b.n	80041ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800417e:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <HAL_PWREx_ConfigSupply+0x70>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	490f      	ldr	r1, [pc, #60]	@ (80041c4 <HAL_PWREx_ConfigSupply+0x70>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800418e:	f7fe fb17 	bl	80027c0 <HAL_GetTick>
 8004192:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004194:	e009      	b.n	80041aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004196:	f7fe fb13 	bl	80027c0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041a4:	d901      	bls.n	80041aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e007      	b.n	80041ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_PWREx_ConfigSupply+0x70>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b6:	d1ee      	bne.n	8004196 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	58024800 	.word	0x58024800

080041c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	@ 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e3c8      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8087 	beq.w	80042f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e8:	4b88      	ldr	r3, [pc, #544]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041f2:	4b86      	ldr	r3, [pc, #536]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d007      	beq.n	800420e <HAL_RCC_OscConfig+0x46>
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	2b18      	cmp	r3, #24
 8004202:	d110      	bne.n	8004226 <HAL_RCC_OscConfig+0x5e>
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d10b      	bne.n	8004226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420e:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x12c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d168      	bne.n	80042f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e3a2      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x76>
 8004230:	4b76      	ldr	r3, [pc, #472]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a75      	ldr	r2, [pc, #468]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e02e      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x98>
 8004246:	4b71      	ldr	r3, [pc, #452]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a70      	ldr	r2, [pc, #448]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800424c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b6e      	ldr	r3, [pc, #440]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6d      	ldr	r2, [pc, #436]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0xbc>
 800426a:	4b68      	ldr	r3, [pc, #416]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a67      	ldr	r2, [pc, #412]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b65      	ldr	r3, [pc, #404]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a64      	ldr	r2, [pc, #400]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0xd4>
 8004284:	4b61      	ldr	r3, [pc, #388]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a60      	ldr	r2, [pc, #384]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b5e      	ldr	r3, [pc, #376]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5d      	ldr	r2, [pc, #372]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800429a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fe fa8c 	bl	80027c0 <HAL_GetTick>
 80042a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fe fa88 	bl	80027c0 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e356      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042be:	4b53      	ldr	r3, [pc, #332]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xe4>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe fa78 	bl	80027c0 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fe fa74 	bl	80027c0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	@ 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e342      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042e6:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x10c>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 808c 	beq.w	800441c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004304:	4b41      	ldr	r3, [pc, #260]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800430c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800430e:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_RCC_OscConfig+0x162>
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b18      	cmp	r3, #24
 800431e:	d137      	bne.n	8004390 <HAL_RCC_OscConfig+0x1c8>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d132      	bne.n	8004390 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800432a:	4b38      	ldr	r3, [pc, #224]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x17a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e314      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004342:	4b32      	ldr	r3, [pc, #200]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 0219 	bic.w	r2, r3, #25
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	492f      	ldr	r1, [pc, #188]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004350:	4313      	orrs	r3, r2
 8004352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe fa34 	bl	80027c0 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435c:	f7fe fa30 	bl	80027c0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e2fe      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800436e:	4b27      	ldr	r3, [pc, #156]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b24      	ldr	r3, [pc, #144]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	4920      	ldr	r1, [pc, #128]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438e:	e045      	b.n	800441c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d026      	beq.n	80043e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004398:	4b1c      	ldr	r3, [pc, #112]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 0219 	bic.w	r2, r3, #25
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4919      	ldr	r1, [pc, #100]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe fa09 	bl	80027c0 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b2:	f7fe fa05 	bl	80027c0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e2d3      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043c4:	4b11      	ldr	r3, [pc, #68]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	490b      	ldr	r1, [pc, #44]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	e01a      	b.n	800441c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <HAL_RCC_OscConfig+0x244>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fe f9e5 	bl	80027c0 <HAL_GetTick>
 80043f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fe f9e1 	bl	80027c0 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d903      	bls.n	8004410 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e2af      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
 800440c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004410:	4b96      	ldr	r3, [pc, #600]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d06a      	beq.n	80044fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004428:	4b90      	ldr	r3, [pc, #576]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004430:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004432:	4b8e      	ldr	r3, [pc, #568]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d007      	beq.n	800444e <HAL_RCC_OscConfig+0x286>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b18      	cmp	r3, #24
 8004442:	d11b      	bne.n	800447c <HAL_RCC_OscConfig+0x2b4>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800444e:	4b87      	ldr	r3, [pc, #540]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x29e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b80      	cmp	r3, #128	@ 0x80
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e282      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004466:	4b81      	ldr	r3, [pc, #516]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	061b      	lsls	r3, r3, #24
 8004474:	497d      	ldr	r1, [pc, #500]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800447a:	e040      	b.n	80044fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004484:	4b79      	ldr	r3, [pc, #484]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a78      	ldr	r2, [pc, #480]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800448a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800448e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe f996 	bl	80027c0 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004498:	f7fe f992 	bl	80027c0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e260      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044aa:	4b70      	ldr	r3, [pc, #448]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044b6:	4b6d      	ldr	r3, [pc, #436]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	4969      	ldr	r1, [pc, #420]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60cb      	str	r3, [r1, #12]
 80044ca:	e018      	b.n	80044fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044cc:	4b67      	ldr	r3, [pc, #412]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a66      	ldr	r2, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f972 	bl	80027c0 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044e0:	f7fe f96e 	bl	80027c0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e23c      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044f2:	4b5e      	ldr	r3, [pc, #376]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b56      	ldr	r3, [pc, #344]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	4a55      	ldr	r2, [pc, #340]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fe f94f 	bl	80027c0 <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004526:	f7fe f94b 	bl	80027c0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e219      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004538:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800453a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x35e>
 8004544:	e018      	b.n	8004578 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b49      	ldr	r3, [pc, #292]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	4a48      	ldr	r2, [pc, #288]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fe f935 	bl	80027c0 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fe f931 	bl	80027c0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1ff      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800456c:	4b3f      	ldr	r3, [pc, #252]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b00      	cmp	r3, #0
 8004582:	d036      	beq.n	80045f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d019      	beq.n	80045c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800458c:	4b37      	ldr	r3, [pc, #220]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a36      	ldr	r2, [pc, #216]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004592:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004596:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004598:	f7fe f912 	bl	80027c0 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a0:	f7fe f90e 	bl	80027c0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1dc      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045b2:	4b2e      	ldr	r3, [pc, #184]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x3d8>
 80045be:	e018      	b.n	80045f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045c0:	4b2a      	ldr	r3, [pc, #168]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a29      	ldr	r2, [pc, #164]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80045c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045cc:	f7fe f8f8 	bl	80027c0 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d4:	f7fe f8f4 	bl	80027c0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1c2      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8086 	beq.w	800470c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_RCC_OscConfig+0x4a8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1a      	ldr	r2, [pc, #104]	@ (8004670 <HAL_RCC_OscConfig+0x4a8>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800460c:	f7fe f8d8 	bl	80027c0 <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe f8d4 	bl	80027c0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e1a2      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <HAL_RCC_OscConfig+0x4a8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d106      	bne.n	8004648 <HAL_RCC_OscConfig+0x480>
 800463a:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	4a0b      	ldr	r2, [pc, #44]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	@ 0x70
 8004646:	e032      	b.n	80046ae <HAL_RCC_OscConfig+0x4e6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <HAL_RCC_OscConfig+0x4ac>
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a05      	ldr	r2, [pc, #20]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
 800465c:	4b03      	ldr	r3, [pc, #12]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	4a02      	ldr	r2, [pc, #8]	@ (800466c <HAL_RCC_OscConfig+0x4a4>)
 8004662:	f023 0304 	bic.w	r3, r3, #4
 8004666:	6713      	str	r3, [r2, #112]	@ 0x70
 8004668:	e021      	b.n	80046ae <HAL_RCC_OscConfig+0x4e6>
 800466a:	bf00      	nop
 800466c:	58024400 	.word	0x58024400
 8004670:	58024800 	.word	0x58024800
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d10c      	bne.n	8004696 <HAL_RCC_OscConfig+0x4ce>
 800467c:	4b83      	ldr	r3, [pc, #524]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a82      	ldr	r2, [pc, #520]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
 8004688:	4b80      	ldr	r3, [pc, #512]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a7f      	ldr	r2, [pc, #508]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
 8004694:	e00b      	b.n	80046ae <HAL_RCC_OscConfig+0x4e6>
 8004696:	4b7d      	ldr	r3, [pc, #500]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	4a7c      	ldr	r2, [pc, #496]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a2:	4b7a      	ldr	r3, [pc, #488]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	4a79      	ldr	r2, [pc, #484]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe f883 	bl	80027c0 <HAL_GetTick>
 80046ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fe f87f 	bl	80027c0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e14b      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046d4:	4b6d      	ldr	r3, [pc, #436]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCC_OscConfig+0x4f6>
 80046e0:	e014      	b.n	800470c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fe f86d 	bl	80027c0 <HAL_GetTick>
 80046e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe f869 	bl	80027c0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e135      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004700:	4b62      	ldr	r3, [pc, #392]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ee      	bne.n	80046ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 812a 	beq.w	800496a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004716:	4b5d      	ldr	r3, [pc, #372]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800471e:	2b18      	cmp	r3, #24
 8004720:	f000 80ba 	beq.w	8004898 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	2b02      	cmp	r3, #2
 800472a:	f040 8095 	bne.w	8004858 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	4b57      	ldr	r3, [pc, #348]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a56      	ldr	r2, [pc, #344]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004734:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fe f841 	bl	80027c0 <HAL_GetTick>
 800473e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe f83d 	bl	80027c0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e10b      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004754:	4b4d      	ldr	r3, [pc, #308]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004760:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004764:	4b4a      	ldr	r3, [pc, #296]	@ (8004890 <HAL_RCC_OscConfig+0x6c8>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	430a      	orrs	r2, r1
 8004774:	4945      	ldr	r1, [pc, #276]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	628b      	str	r3, [r1, #40]	@ 0x28
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	3b01      	subs	r3, #1
 8004780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004788:	3b01      	subs	r3, #1
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	b29b      	uxth	r3, r3
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	3b01      	subs	r3, #1
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	3b01      	subs	r3, #1
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047aa:	4938      	ldr	r1, [pc, #224]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047b0:	4b36      	ldr	r3, [pc, #216]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	4a35      	ldr	r2, [pc, #212]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047bc:	4b33      	ldr	r3, [pc, #204]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c0:	4b34      	ldr	r3, [pc, #208]	@ (8004894 <HAL_RCC_OscConfig+0x6cc>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047c8:	00d2      	lsls	r2, r2, #3
 80047ca:	4930      	ldr	r1, [pc, #192]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047d0:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	f023 020c 	bic.w	r2, r3, #12
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	492b      	ldr	r1, [pc, #172]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047e2:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	f023 0202 	bic.w	r2, r3, #2
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	4927      	ldr	r1, [pc, #156]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	4a24      	ldr	r2, [pc, #144]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004800:	4b22      	ldr	r3, [pc, #136]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a21      	ldr	r2, [pc, #132]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800480c:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004812:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004818:	4b1c      	ldr	r3, [pc, #112]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800482a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800482e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd ffc6 	bl	80027c0 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fd ffc2 	bl	80027c0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e090      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800484a:	4b10      	ldr	r3, [pc, #64]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x670>
 8004856:	e088      	b.n	800496a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004858:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0b      	ldr	r2, [pc, #44]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 800485e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd ffac 	bl	80027c0 <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fd ffa8 	bl	80027c0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e076      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487e:	4b03      	ldr	r3, [pc, #12]	@ (800488c <HAL_RCC_OscConfig+0x6c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x6a4>
 800488a:	e06e      	b.n	800496a <HAL_RCC_OscConfig+0x7a2>
 800488c:	58024400 	.word	0x58024400
 8004890:	fffffc0c 	.word	0xfffffc0c
 8004894:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004898:	4b36      	ldr	r3, [pc, #216]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800489e:	4b35      	ldr	r3, [pc, #212]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d031      	beq.n	8004910 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 0203 	and.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d12a      	bne.n	8004910 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d122      	bne.n	8004910 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d11a      	bne.n	8004910 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	0a5b      	lsrs	r3, r3, #9
 80048de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d111      	bne.n	8004910 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d108      	bne.n	8004910 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e02b      	b.n	800496c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800491e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	d01f      	beq.n	800496a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	4a11      	ldr	r2, [pc, #68]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004936:	f7fd ff43 	bl	80027c0 <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800493c:	bf00      	nop
 800493e:	f7fd ff3f 	bl	80027c0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	4293      	cmp	r3, r2
 8004948:	d0f9      	beq.n	800493e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800494a:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 800494c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800494e:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <HAL_RCC_OscConfig+0x7b0>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004956:	00d2      	lsls	r2, r2, #3
 8004958:	4906      	ldr	r1, [pc, #24]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 800495a:	4313      	orrs	r3, r2
 800495c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	4a04      	ldr	r2, [pc, #16]	@ (8004974 <HAL_RCC_OscConfig+0x7ac>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3730      	adds	r7, #48	@ 0x30
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	ffff0007 	.word	0xffff0007

0800497c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e19c      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b8a      	ldr	r3, [pc, #552]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b87      	ldr	r3, [pc, #540]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	4985      	ldr	r1, [pc, #532]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b83      	ldr	r3, [pc, #524]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e184      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049d8:	429a      	cmp	r2, r3
 80049da:	d908      	bls.n	80049ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049dc:	4b78      	ldr	r3, [pc, #480]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	4975      	ldr	r1, [pc, #468]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d010      	beq.n	8004a1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	4b70      	ldr	r3, [pc, #448]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d908      	bls.n	8004a1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	496a      	ldr	r1, [pc, #424]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d010      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	4b64      	ldr	r3, [pc, #400]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d908      	bls.n	8004a4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a38:	4b61      	ldr	r3, [pc, #388]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	495e      	ldr	r1, [pc, #376]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	4b59      	ldr	r3, [pc, #356]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d908      	bls.n	8004a78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a66:	4b56      	ldr	r3, [pc, #344]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4953      	ldr	r1, [pc, #332]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d908      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f023 020f 	bic.w	r2, r3, #15
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4947      	ldr	r1, [pc, #284]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d055      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ab2:	4b43      	ldr	r3, [pc, #268]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4940      	ldr	r1, [pc, #256]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004acc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d121      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0f6      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ae4:	4b36      	ldr	r3, [pc, #216]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d115      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0ea      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004afc:	4b30      	ldr	r3, [pc, #192]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0de      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0d6      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b1c:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f023 0207 	bic.w	r2, r3, #7
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4925      	ldr	r1, [pc, #148]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2e:	f7fd fe47 	bl	80027c0 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b36:	f7fd fe43 	bl	80027c0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0be      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d1eb      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d208      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f023 020f 	bic.w	r2, r3, #15
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	490e      	ldr	r1, [pc, #56]	@ (8004bc0 <HAL_RCC_ClockConfig+0x244>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d214      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 020f 	bic.w	r2, r3, #15
 8004ba2:	4906      	ldr	r1, [pc, #24]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <HAL_RCC_ClockConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e086      	b.n	8004cca <HAL_RCC_ClockConfig+0x34e>
 8004bbc:	52002000 	.word	0x52002000
 8004bc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d208      	bcs.n	8004bf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004be0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	4939      	ldr	r1, [pc, #228]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d010      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	4b34      	ldr	r3, [pc, #208]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d208      	bcs.n	8004c20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c0e:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	492e      	ldr	r1, [pc, #184]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d010      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d208      	bcs.n	8004c4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c3c:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4922      	ldr	r1, [pc, #136]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d010      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d208      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4917      	ldr	r1, [pc, #92]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c7c:	f000 f834 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	4912      	ldr	r1, [pc, #72]	@ (8004cd8 <HAL_RCC_ClockConfig+0x35c>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd4 <HAL_RCC_ClockConfig+0x358>)
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd8 <HAL_RCC_ClockConfig+0x35c>)
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_RCC_ClockConfig+0x360>)
 8004cb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <HAL_RCC_ClockConfig+0x364>)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <HAL_RCC_ClockConfig+0x368>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd fb3e 	bl	8002340 <HAL_InitTick>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	0800f260 	.word	0x0800f260
 8004cdc:	24000004 	.word	0x24000004
 8004ce0:	24000000 	.word	0x24000000
 8004ce4:	24000008 	.word	0x24000008

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cee:	4bb3      	ldr	r3, [pc, #716]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	f200 8155 	bhi.w	8004fa6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004fa7 	.word	0x08004fa7
 8004d0c:	08004fa7 	.word	0x08004fa7
 8004d10:	08004fa7 	.word	0x08004fa7
 8004d14:	08004fa7 	.word	0x08004fa7
 8004d18:	08004fa7 	.word	0x08004fa7
 8004d1c:	08004fa7 	.word	0x08004fa7
 8004d20:	08004fa7 	.word	0x08004fa7
 8004d24:	08004d8f 	.word	0x08004d8f
 8004d28:	08004fa7 	.word	0x08004fa7
 8004d2c:	08004fa7 	.word	0x08004fa7
 8004d30:	08004fa7 	.word	0x08004fa7
 8004d34:	08004fa7 	.word	0x08004fa7
 8004d38:	08004fa7 	.word	0x08004fa7
 8004d3c:	08004fa7 	.word	0x08004fa7
 8004d40:	08004fa7 	.word	0x08004fa7
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004fa7 	.word	0x08004fa7
 8004d4c:	08004fa7 	.word	0x08004fa7
 8004d50:	08004fa7 	.word	0x08004fa7
 8004d54:	08004fa7 	.word	0x08004fa7
 8004d58:	08004fa7 	.word	0x08004fa7
 8004d5c:	08004fa7 	.word	0x08004fa7
 8004d60:	08004fa7 	.word	0x08004fa7
 8004d64:	08004d9b 	.word	0x08004d9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d68:	4b94      	ldr	r3, [pc, #592]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d74:	4b91      	ldr	r3, [pc, #580]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	4a90      	ldr	r2, [pc, #576]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d86:	e111      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d88:	4b8d      	ldr	r3, [pc, #564]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d8a:	61bb      	str	r3, [r7, #24]
      break;
 8004d8c:	e10e      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d90:	61bb      	str	r3, [r7, #24]
      break;
 8004d92:	e10b      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d94:	4b8c      	ldr	r3, [pc, #560]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d96:	61bb      	str	r3, [r7, #24]
      break;
 8004d98:	e108      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d9a:	4b88      	ldr	r3, [pc, #544]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004da4:	4b85      	ldr	r3, [pc, #532]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004db0:	4b82      	ldr	r3, [pc, #520]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004dba:	4b80      	ldr	r3, [pc, #512]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80e1 	beq.w	8004fa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f000 8083 	beq.w	8004eec <HAL_RCC_GetSysClockFreq+0x204>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	f200 80a1 	bhi.w	8004f30 <HAL_RCC_GetSysClockFreq+0x248>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x114>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d056      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dfa:	e099      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02d      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e08:	4b6c      	ldr	r3, [pc, #432]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b62      	ldr	r3, [pc, #392]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e62:	e087      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004fd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b51      	ldr	r3, [pc, #324]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ea6:	e065      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eba:	4b40      	ldr	r3, [pc, #256]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ece:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eea:	e043      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b2f      	ldr	r3, [pc, #188]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f2e:	e021      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b1e      	ldr	r3, [pc, #120]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f74:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	0a5b      	lsrs	r3, r3, #9
 8004f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7e:	3301      	adds	r3, #1
 8004f80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f98:	ee17 3a90 	vmov	r3, s15
 8004f9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f9e:	e005      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61bb      	str	r3, [r7, #24]
      break;
 8004fa4:	e002      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fa8:	61bb      	str	r3, [r7, #24]
      break;
 8004faa:	bf00      	nop
  }

  return sysclockfreq;
 8004fac:	69bb      	ldr	r3, [r7, #24]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3724      	adds	r7, #36	@ 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	003d0900 	.word	0x003d0900
 8004fc8:	007a1200 	.word	0x007a1200
 8004fcc:	46000000 	.word	0x46000000
 8004fd0:	4c742400 	.word	0x4c742400
 8004fd4:	4a742400 	.word	0x4a742400
 8004fd8:	4af42400 	.word	0x4af42400

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fe2:	f7ff fe81 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	490f      	ldr	r1, [pc, #60]	@ (8005030 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ff4:	5ccb      	ldrb	r3, [r1, r3]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005000:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_RCC_GetHCLKFreq+0x50>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	4a09      	ldr	r2, [pc, #36]	@ (8005030 <HAL_RCC_GetHCLKFreq+0x54>)
 800500a:	5cd3      	ldrb	r3, [r2, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	4a07      	ldr	r2, [pc, #28]	@ (8005034 <HAL_RCC_GetHCLKFreq+0x58>)
 8005018:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800501a:	4a07      	ldr	r2, [pc, #28]	@ (8005038 <HAL_RCC_GetHCLKFreq+0x5c>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <HAL_RCC_GetHCLKFreq+0x58>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	58024400 	.word	0x58024400
 8005030:	0800f260 	.word	0x0800f260
 8005034:	24000004 	.word	0x24000004
 8005038:	24000000 	.word	0x24000000

0800503c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005040:	f7ff ffcc 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4904      	ldr	r1, [pc, #16]	@ (8005064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	58024400 	.word	0x58024400
 8005064:	0800f260 	.word	0x0800f260

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800506c:	f7ff ffb6 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4904      	ldr	r1, [pc, #16]	@ (8005090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	58024400 	.word	0x58024400
 8005090:	0800f260 	.word	0x0800f260

08005094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	223f      	movs	r2, #63	@ 0x3f
 80050a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0207 	and.w	r2, r3, #7
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80050b0:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80050bc:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050c8:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80050d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80050ec:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <HAL_RCC_GetClockConfig+0x7c>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_RCC_GetClockConfig+0x80>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	58024400 	.word	0x58024400
 8005114:	52002000 	.word	0x52002000

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800511c:	b0c6      	sub	sp, #280	@ 0x118
 800511e:	af00      	add	r7, sp, #0
 8005120:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800513c:	2500      	movs	r5, #0
 800513e:	ea54 0305 	orrs.w	r3, r4, r5
 8005142:	d049      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800514a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800514e:	d02f      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005154:	d828      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800515a:	d01a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800515c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005160:	d822      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d007      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800516c:	e01c      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516e:	4bab      	ldr	r3, [pc, #684]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	4aaa      	ldr	r2, [pc, #680]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800517a:	e01a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	3308      	adds	r3, #8
 8005182:	2102      	movs	r1, #2
 8005184:	4618      	mov	r0, r3
 8005186:	f002 fa49 	bl	800761c <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005190:	e00f      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005196:	3328      	adds	r3, #40	@ 0x28
 8005198:	2102      	movs	r1, #2
 800519a:	4618      	mov	r0, r3
 800519c:	f002 faf0 	bl	8007780 <RCCEx_PLL3_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051ba:	4b98      	ldr	r3, [pc, #608]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c8:	4a94      	ldr	r2, [pc, #592]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	ea58 0309 	orrs.w	r3, r8, r9
 80051ec:	d047      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80051ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d82a      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80051f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005215 	.word	0x08005215
 8005204:	08005223 	.word	0x08005223
 8005208:	08005239 	.word	0x08005239
 800520c:	08005257 	.word	0x08005257
 8005210:	08005257 	.word	0x08005257
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005214:	4b81      	ldr	r3, [pc, #516]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4a80      	ldr	r2, [pc, #512]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005220:	e01a      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005226:	3308      	adds	r3, #8
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f002 f9f6 	bl	800761c <RCCEx_PLL2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005236:	e00f      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523c:	3328      	adds	r3, #40	@ 0x28
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f002 fa9d 	bl	8007780 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800524c:	e004      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005260:	4b6e      	ldr	r3, [pc, #440]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005264:	f023 0107 	bic.w	r1, r3, #7
 8005268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	4a6b      	ldr	r2, [pc, #428]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6513      	str	r3, [r2, #80]	@ 0x50
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800527a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800527e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005292:	d05b      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800529c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80052a0:	d03b      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80052a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80052a6:	d834      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052ac:	d037      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80052ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052b2:	d82e      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052b8:	d033      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052be:	d828      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c4:	d01a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80052c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ca:	d822      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80052d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052d4:	d007      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80052d6:	e01c      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	4a4f      	ldr	r2, [pc, #316]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052e4:	e01e      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	3308      	adds	r3, #8
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f002 f994 	bl	800761c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052fa:	e013      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	3328      	adds	r3, #40	@ 0x28
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f002 fa3b 	bl	8007780 <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005310:	e008      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005318:	e004      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800533c:	4a37      	ldr	r2, [pc, #220]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800533e:	430b      	orrs	r3, r1
 8005340:	6593      	str	r3, [r2, #88]	@ 0x58
 8005342:	e003      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005362:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005366:	460b      	mov	r3, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	d05d      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005374:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005378:	d03b      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800537a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800537e:	d834      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005384:	d037      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800538a:	d82e      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800538c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005390:	d033      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005392:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005396:	d828      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800539c:	d01a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800539e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053a2:	d822      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80053a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053ac:	d007      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80053ae:	e01c      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b0:	4b1a      	ldr	r3, [pc, #104]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	4a19      	ldr	r2, [pc, #100]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053bc:	e01e      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	3308      	adds	r3, #8
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 f928 	bl	800761c <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053d2:	e013      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	3328      	adds	r3, #40	@ 0x28
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f002 f9cf 	bl	8007780 <RCCEx_PLL3_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053e8:	e008      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053f0:	e004      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80053f2:	bf00      	nop
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005408:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005410:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005414:	4a01      	ldr	r2, [pc, #4]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005416:	430b      	orrs	r3, r1
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
 800541a:	e005      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800541c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005424:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005434:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800543e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d03a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	2b30      	cmp	r3, #48	@ 0x30
 8005450:	d01f      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005452:	2b30      	cmp	r3, #48	@ 0x30
 8005454:	d819      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005456:	2b20      	cmp	r3, #32
 8005458:	d00c      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800545a:	2b20      	cmp	r3, #32
 800545c:	d815      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d019      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005462:	2b10      	cmp	r3, #16
 8005464:	d111      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005466:	4baa      	ldr	r3, [pc, #680]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	4aa9      	ldr	r2, [pc, #676]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800546c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005472:	e011      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005478:	3308      	adds	r3, #8
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f002 f8cd 	bl	800761c <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005490:	e002      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054a0:	4b9b      	ldr	r3, [pc, #620]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ae:	4a98      	ldr	r2, [pc, #608]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054b0:	430b      	orrs	r3, r1
 80054b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80054d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d051      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e8:	d035      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80054ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ee:	d82e      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80054f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f4:	d031      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80054f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054fa:	d828      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80054fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005500:	d01a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	d822      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005510:	d007      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005512:	e01c      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005514:	4b7e      	ldr	r3, [pc, #504]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	4a7d      	ldr	r2, [pc, #500]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005520:	e01c      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	3308      	adds	r3, #8
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f002 f876 	bl	800761c <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	3328      	adds	r3, #40	@ 0x28
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f002 f91d 	bl	8007780 <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800555a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005564:	4b6a      	ldr	r3, [pc, #424]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005568:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005572:	4a67      	ldr	r2, [pc, #412]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6513      	str	r3, [r2, #80]	@ 0x50
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800558e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005598:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d053      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ac:	d033      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80055ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b2:	d82c      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80055b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055b8:	d02f      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80055ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055be:	d826      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80055c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c4:	d02b      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80055c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055ca:	d820      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d012      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d6:	d81a      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d022      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d115      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e6:	3308      	adds	r3, #8
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 f816 	bl	800761c <RCCEx_PLL2_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055f6:	e015      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fc:	3328      	adds	r3, #40	@ 0x28
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f002 f8bd 	bl	8007780 <RCCEx_PLL3_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800560c:	e00a      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005616:	bf00      	nop
 8005618:	e004      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800562c:	4b38      	ldr	r3, [pc, #224]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800562e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005630:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563a:	4a35      	ldr	r2, [pc, #212]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800563c:	430b      	orrs	r3, r1
 800563e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800565a:	2300      	movs	r3, #0
 800565c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005660:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005664:	460b      	mov	r3, r1
 8005666:	4313      	orrs	r3, r2
 8005668:	d058      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005676:	d033      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800567c:	d82c      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d02f      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005688:	d826      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800568a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800568e:	d02b      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005690:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005694:	d820      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800569a:	d012      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800569c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a0:	d81a      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d022      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80056a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056aa:	d115      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b0:	3308      	adds	r3, #8
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 ffb1 	bl	800761c <RCCEx_PLL2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056c0:	e015      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	3328      	adds	r3, #40	@ 0x28
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f002 f858 	bl	8007780 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056d6:	e00a      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056de:	e006      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80056e0:	bf00      	nop
 80056e2:	e004      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80056ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10e      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056f6:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005706:	4a02      	ldr	r2, [pc, #8]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6593      	str	r3, [r2, #88]	@ 0x58
 800570c:	e006      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800570e:	bf00      	nop
 8005710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005732:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	d037      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d00e      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d816      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005756:	d111      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4bc4      	ldr	r3, [pc, #784]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4ac3      	ldr	r2, [pc, #780]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005764:	e00f      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	3308      	adds	r3, #8
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f001 ff54 	bl	800761c <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800577a:	e004      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800578e:	4bb7      	ldr	r3, [pc, #732]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579c:	4ab3      	ldr	r2, [pc, #716]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80057a2:	e003      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80057b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d039      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d81c      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	08005819 	.word	0x08005819
 80057e0:	080057ed 	.word	0x080057ed
 80057e4:	080057fb 	.word	0x080057fb
 80057e8:	08005819 	.word	0x08005819
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ec:	4b9f      	ldr	r3, [pc, #636]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	4a9e      	ldr	r2, [pc, #632]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057f8:	e00f      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fe:	3308      	adds	r3, #8
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 ff0a 	bl	800761c <RCCEx_PLL2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800580e:	e004      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005822:	4b92      	ldr	r3, [pc, #584]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005826:	f023 0103 	bic.w	r1, r3, #3
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005830:	4a8e      	ldr	r2, [pc, #568]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005832:	430b      	orrs	r3, r1
 8005834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800583c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800584c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005856:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	f000 8099 	beq.w	8005994 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005862:	4b83      	ldr	r3, [pc, #524]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a82      	ldr	r2, [pc, #520]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586e:	f7fc ffa7 	bl	80027c0 <HAL_GetTick>
 8005872:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005876:	e00b      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005878:	f7fc ffa2 	bl	80027c0 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b64      	cmp	r3, #100	@ 0x64
 8005886:	d903      	bls.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800588e:	e005      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005890:	4b77      	ldr	r3, [pc, #476]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ed      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800589c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d173      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058a4:	4b71      	ldr	r3, [pc, #452]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058b0:	4053      	eors	r3, r2
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d015      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ba:	4b6c      	ldr	r3, [pc, #432]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c6:	4b69      	ldr	r3, [pc, #420]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	4a68      	ldr	r2, [pc, #416]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058d2:	4b66      	ldr	r3, [pc, #408]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	4a65      	ldr	r2, [pc, #404]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058de:	4a63      	ldr	r2, [pc, #396]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f2:	d118      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc ff64 	bl	80027c0 <HAL_GetTick>
 80058f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fc:	e00d      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fc ff5f 	bl	80027c0 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800590e:	429a      	cmp	r2, r3
 8005910:	d903      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005918:	e005      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800591a:	4b54      	ldr	r3, [pc, #336]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0eb      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800592a:	2b00      	cmp	r3, #0
 800592c:	d129      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800593e:	d10e      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005940:	4b4a      	ldr	r3, [pc, #296]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005950:	091a      	lsrs	r2, r3, #4
 8005952:	4b48      	ldr	r3, [pc, #288]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005954:	4013      	ands	r3, r2
 8005956:	4a45      	ldr	r2, [pc, #276]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005958:	430b      	orrs	r3, r1
 800595a:	6113      	str	r3, [r2, #16]
 800595c:	e005      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800595e:	4b43      	ldr	r3, [pc, #268]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	4a42      	ldr	r2, [pc, #264]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	4b40      	ldr	r3, [pc, #256]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800596c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800597c:	430b      	orrs	r3, r1
 800597e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005980:	e008      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800598a:	e003      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f002 0301 	and.w	r3, r2, #1
 80059a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f000 808f 	beq.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059bc:	2b28      	cmp	r3, #40	@ 0x28
 80059be:	d871      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80059c0:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	08005aad 	.word	0x08005aad
 80059cc:	08005aa5 	.word	0x08005aa5
 80059d0:	08005aa5 	.word	0x08005aa5
 80059d4:	08005aa5 	.word	0x08005aa5
 80059d8:	08005aa5 	.word	0x08005aa5
 80059dc:	08005aa5 	.word	0x08005aa5
 80059e0:	08005aa5 	.word	0x08005aa5
 80059e4:	08005aa5 	.word	0x08005aa5
 80059e8:	08005a79 	.word	0x08005a79
 80059ec:	08005aa5 	.word	0x08005aa5
 80059f0:	08005aa5 	.word	0x08005aa5
 80059f4:	08005aa5 	.word	0x08005aa5
 80059f8:	08005aa5 	.word	0x08005aa5
 80059fc:	08005aa5 	.word	0x08005aa5
 8005a00:	08005aa5 	.word	0x08005aa5
 8005a04:	08005aa5 	.word	0x08005aa5
 8005a08:	08005a8f 	.word	0x08005a8f
 8005a0c:	08005aa5 	.word	0x08005aa5
 8005a10:	08005aa5 	.word	0x08005aa5
 8005a14:	08005aa5 	.word	0x08005aa5
 8005a18:	08005aa5 	.word	0x08005aa5
 8005a1c:	08005aa5 	.word	0x08005aa5
 8005a20:	08005aa5 	.word	0x08005aa5
 8005a24:	08005aa5 	.word	0x08005aa5
 8005a28:	08005aad 	.word	0x08005aad
 8005a2c:	08005aa5 	.word	0x08005aa5
 8005a30:	08005aa5 	.word	0x08005aa5
 8005a34:	08005aa5 	.word	0x08005aa5
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005aa5 	.word	0x08005aa5
 8005a44:	08005aa5 	.word	0x08005aa5
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005aa5 	.word	0x08005aa5
 8005a5c:	08005aa5 	.word	0x08005aa5
 8005a60:	08005aa5 	.word	0x08005aa5
 8005a64:	08005aa5 	.word	0x08005aa5
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	58024800 	.word	0x58024800
 8005a74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fdcb 	bl	800761c <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e00f      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a92:	3328      	adds	r3, #40	@ 0x28
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fe72 	bl	8007780 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e004      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005aaa:	e000      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ab6:	4bbf      	ldr	r3, [pc, #764]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ac4:	4abb      	ldr	r2, [pc, #748]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aca:	e003      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ad0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f002 0302 	and.w	r3, r2, #2
 8005ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	d041      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d824      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b1d 	.word	0x08005b1d
 8005b0c:	08005b33 	.word	0x08005b33
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b51 	.word	0x08005b51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	3308      	adds	r3, #8
 8005b22:	2101      	movs	r1, #1
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 fd79 	bl	800761c <RCCEx_PLL2_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b30:	e00f      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b36:	3328      	adds	r3, #40	@ 0x28
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fe20 	bl	8007780 <RCCEx_PLL3_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b46:	e004      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b4e:	e000      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b5a:	4b96      	ldr	r3, [pc, #600]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5e:	f023 0107 	bic.w	r1, r3, #7
 8005b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b68:	4a92      	ldr	r2, [pc, #584]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b6e:	e003      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f002 0304 	and.w	r3, r2, #4
 8005b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d044      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d825      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bdb 	.word	0x08005bdb
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	3308      	adds	r3, #8
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fd25 	bl	800761c <RCCEx_PLL2_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00f      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	3328      	adds	r3, #40	@ 0x28
 8005be0:	2101      	movs	r1, #1
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fdcc 	bl	8007780 <RCCEx_PLL3_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bee:	e004      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bf6:	e000      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c02:	4b6c      	ldr	r3, [pc, #432]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c06:	f023 0107 	bic.w	r1, r3, #7
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c12:	4a68      	ldr	r2, [pc, #416]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c14:	430b      	orrs	r3, r1
 8005c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c18:	e003      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f002 0320 	and.w	r3, r2, #32
 8005c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c32:	2300      	movs	r3, #0
 8005c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	d055      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c4e:	d033      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c54:	d82c      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d02f      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c60:	d826      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c66:	d02b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005c68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c6c:	d820      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c72:	d012      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c78:	d81a      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d022      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c82:	d115      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c88:	3308      	adds	r3, #8
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fcc5 	bl	800761c <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c98:	e015      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	3328      	adds	r3, #40	@ 0x28
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fd6c 	bl	8007780 <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cb6:	e006      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005cb8:	bf00      	nop
 8005cba:	e004      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e002      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cce:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cde:	4a35      	ldr	r2, [pc, #212]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ce4:	e003      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005cfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d04:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	d058      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d1a:	d033      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005d1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d20:	d82c      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d26:	d02f      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2c:	d826      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005d2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d32:	d02b      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d38:	d820      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3e:	d012      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d44:	d81a      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d022      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4e:	d115      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	3308      	adds	r3, #8
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fc5f 	bl	800761c <RCCEx_PLL2_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d64:	e015      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	3328      	adds	r3, #40	@ 0x28
 8005d6c:	2102      	movs	r1, #2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 fd06 	bl	8007780 <RCCEx_PLL3_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d82:	e006      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005d84:	bf00      	nop
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10e      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005daa:	4a02      	ldr	r2, [pc, #8]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8005db0:	e006      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005db2:	bf00      	nop
 8005db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005dcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d055      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005de8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005dec:	d033      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005dee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005df2:	d82c      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df8:	d02f      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfe:	d826      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005e00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e04:	d02b      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005e06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e0a:	d820      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e10:	d012      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e16:	d81a      	bhi.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d022      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e20:	d115      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	3308      	adds	r3, #8
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fbf6 	bl	800761c <RCCEx_PLL2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e36:	e015      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	3328      	adds	r3, #40	@ 0x28
 8005e3e:	2102      	movs	r1, #2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 fc9d 	bl	8007780 <RCCEx_PLL3_Config>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e54:	e006      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005e56:	bf00      	nop
 8005e58:	e004      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e002      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e6c:	4ba0      	ldr	r3, [pc, #640]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e7c:	4a9c      	ldr	r2, [pc, #624]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e82:	e003      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 0308 	and.w	r3, r2, #8
 8005e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ea2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d01e      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	3328      	adds	r3, #40	@ 0x28
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 fc5c 	bl	8007780 <RCCEx_PLL3_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005ed4:	4b86      	ldr	r3, [pc, #536]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee4:	4a82      	ldr	r2, [pc, #520]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f002 0310 	and.w	r3, r2, #16
 8005ef6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005efa:	2300      	movs	r3, #0
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f04:	460b      	mov	r3, r1
 8005f06:	4313      	orrs	r3, r2
 8005f08:	d01e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f16:	d10c      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	3328      	adds	r3, #40	@ 0x28
 8005f1e:	2102      	movs	r1, #2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fc2d 	bl	8007780 <RCCEx_PLL3_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f32:	4b6f      	ldr	r3, [pc, #444]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f42:	4a6b      	ldr	r2, [pc, #428]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f56:	2300      	movs	r3, #0
 8005f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d03e      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f70:	d022      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f76:	d81b      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f80:	d00b      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005f82:	e015      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fb45 	bl	800761c <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f98:	e00f      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fbec 	bl	8007780 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fae:	e004      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fd2:	4a47      	ldr	r2, [pc, #284]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005fee:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ff4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800600a:	d01f      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800600c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006010:	d818      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800601c:	d007      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800601e:	e011      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006020:	4b33      	ldr	r3, [pc, #204]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	4a32      	ldr	r2, [pc, #200]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800602a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	3328      	adds	r3, #40	@ 0x28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fba2 	bl	8007780 <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006056:	4b26      	ldr	r3, [pc, #152]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006066:	4a22      	ldr	r2, [pc, #136]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6553      	str	r3, [r2, #84]	@ 0x54
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006072:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006084:	2300      	movs	r3, #0
 8006086:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006088:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d034      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d007      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80060a2:	e011      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a4:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	4a11      	ldr	r2, [pc, #68]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060b0:	e00e      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b6:	3308      	adds	r3, #8
 80060b8:	2102      	movs	r1, #2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 faae 	bl	800761c <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	4a02      	ldr	r2, [pc, #8]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006108:	663b      	str	r3, [r7, #96]	@ 0x60
 800610a:	2300      	movs	r3, #0
 800610c:	667b      	str	r3, [r7, #100]	@ 0x64
 800610e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d00c      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	3328      	adds	r3, #40	@ 0x28
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fb2d 	bl	8007780 <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800613e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006140:	2300      	movs	r3, #0
 8006142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006144:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006148:	460b      	mov	r3, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	d036      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006158:	d018      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800615a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800615e:	d811      	bhi.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006164:	d014      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800616a:	d80b      	bhi.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d011      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006174:	d106      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006176:	4bb7      	ldr	r3, [pc, #732]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	4ab6      	ldr	r2, [pc, #728]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800617c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006182:	e008      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800618a:	e004      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800618c:	bf00      	nop
 800618e:	e002      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800619e:	4bad      	ldr	r3, [pc, #692]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ac:	4aa9      	ldr	r2, [pc, #676]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061ae:	430b      	orrs	r3, r1
 80061b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80061b2:	e003      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80061c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ca:	2300      	movs	r3, #0
 80061cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061d8:	4b9e      	ldr	r3, [pc, #632]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	4a9b      	ldr	r2, [pc, #620]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061e8:	430b      	orrs	r3, r1
 80061ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80061f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fa:	2300      	movs	r3, #0
 80061fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006202:	460b      	mov	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006208:	4b92      	ldr	r3, [pc, #584]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800620a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006216:	4a8f      	ldr	r2, [pc, #572]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006228:	643b      	str	r3, [r7, #64]	@ 0x40
 800622a:	2300      	movs	r3, #0
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006238:	4b86      	ldr	r3, [pc, #536]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	4a85      	ldr	r2, [pc, #532]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800623e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006242:	6113      	str	r3, [r2, #16]
 8006244:	4b83      	ldr	r3, [pc, #524]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006246:	6919      	ldr	r1, [r3, #16]
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006250:	4a80      	ldr	r2, [pc, #512]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006268:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800626c:	460b      	mov	r3, r1
 800626e:	4313      	orrs	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006272:	4b78      	ldr	r3, [pc, #480]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006276:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006280:	4a74      	ldr	r2, [pc, #464]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006282:	430b      	orrs	r3, r1
 8006284:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006292:	633b      	str	r3, [r7, #48]	@ 0x30
 8006294:	2300      	movs	r3, #0
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34
 8006298:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	4a68      	ldr	r2, [pc, #416]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	2100      	movs	r1, #0
 80062c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d011      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	3308      	adds	r3, #8
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f99d 	bl	800761c <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80062e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	2100      	movs	r1, #0
 8006302:	6239      	str	r1, [r7, #32]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
 800630a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800630e:	460b      	mov	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	d011      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	3308      	adds	r3, #8
 800631a:	2101      	movs	r1, #1
 800631c:	4618      	mov	r0, r3
 800631e:	f001 f97d 	bl	800761c <RCCEx_PLL2_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	2100      	movs	r1, #0
 8006342:	61b9      	str	r1, [r7, #24]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800634e:	460b      	mov	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	d011      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006358:	3308      	adds	r3, #8
 800635a:	2102      	movs	r1, #2
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f95d 	bl	800761c <RCCEx_PLL2_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	2100      	movs	r1, #0
 8006382:	6139      	str	r1, [r7, #16]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d011      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	3328      	adds	r3, #40	@ 0x28
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f9ef 	bl	8007780 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80063a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	2100      	movs	r1, #0
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	d011      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	3328      	adds	r3, #40	@ 0x28
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f9cf 	bl	8007780 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80063e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	2100      	movs	r1, #0
 8006402:	6039      	str	r1, [r7, #0]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800640e:	460b      	mov	r3, r1
 8006410:	4313      	orrs	r3, r2
 8006412:	d011      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006418:	3328      	adds	r3, #40	@ 0x28
 800641a:	2102      	movs	r1, #2
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f9af 	bl	8007780 <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006438:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
}
 8006446:	4618      	mov	r0, r3
 8006448:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800644c:	46bd      	mov	sp, r7
 800644e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400

08006458 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b090      	sub	sp, #64	@ 0x40
 800645c:	af00      	add	r7, sp, #0
 800645e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006466:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800646a:	430b      	orrs	r3, r1
 800646c:	f040 8094 	bne.w	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006470:	4b9b      	ldr	r3, [pc, #620]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	2b04      	cmp	r3, #4
 800647e:	f200 8087 	bhi.w	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064ed 	.word	0x080064ed
 8006494:	08006589 	.word	0x08006589
 8006498:	08006515 	.word	0x08006515
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800649c:	4b90      	ldr	r3, [pc, #576]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064a8:	d108      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 ff62 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b8:	f000 bc93 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c0:	f000 bc8f 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064c4:	4b86      	ldr	r3, [pc, #536]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d0:	d108      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d2:	f107 0318 	add.w	r3, r7, #24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fca6 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e0:	f000 bc7f 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e8:	f000 bc7b 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064ec:	4b7c      	ldr	r3, [pc, #496]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064f8:	d108      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fde6 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006508:	f000 bc6b 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	f000 bc67 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006514:	4b72      	ldr	r3, [pc, #456]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800651e:	4b70      	ldr	r3, [pc, #448]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d10c      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006530:	4b6b      	ldr	r3, [pc, #428]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	08db      	lsrs	r3, r3, #3
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	4a6a      	ldr	r2, [pc, #424]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006542:	e01f      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006544:	4b66      	ldr	r3, [pc, #408]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006550:	d106      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006558:	d102      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800655a:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800655e:	e011      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006560:	4b5f      	ldr	r3, [pc, #380]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800656c:	d106      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006574:	d102      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006576:	4b5d      	ldr	r3, [pc, #372]	@ (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006580:	f000 bc2f 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006584:	f000 bc2d 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006588:	4b59      	ldr	r3, [pc, #356]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658c:	f000 bc29 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006594:	f000 bc25 	b.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80065a0:	430b      	orrs	r3, r1
 80065a2:	f040 80a7 	bne.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80065a6:	4b4e      	ldr	r3, [pc, #312]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80065ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065b6:	d054      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065be:	f200 808b 	bhi.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065c8:	f000 8083 	beq.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065d2:	f200 8081 	bhi.w	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065dc:	d02f      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065e4:	d878      	bhi.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065f2:	d012      	beq.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80065f4:	e070      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f6:	4b3a      	ldr	r3, [pc, #232]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006602:	d107      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006608:	4618      	mov	r0, r3
 800660a:	f000 feb5 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006612:	e3e6      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	e3e3      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661a:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006626:	d107      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006628:	f107 0318 	add.w	r3, r7, #24
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fbfb 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006636:	e3d4      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663c:	e3d1      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800663e:	4b28      	ldr	r3, [pc, #160]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800664c:	f107 030c 	add.w	r3, r7, #12
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fd3d 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665a:	e3c2      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006660:	e3bf      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006662:	4b1f      	ldr	r3, [pc, #124]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006666:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800666c:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b04      	cmp	r3, #4
 8006676:	d10c      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800667e:	4b18      	ldr	r3, [pc, #96]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006690:	e01e      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006692:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669e:	d106      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80066a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d102      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066a8:	4b0f      	ldr	r3, [pc, #60]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ac:	e010      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066ae:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ba:	d106      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066c2:	d102      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066c4:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c8:	e002      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066ce:	e388      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066d0:	e387      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d6:	e384      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066dc:	e381      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066de:	bf00      	nop
 80066e0:	58024400 	.word	0x58024400
 80066e4:	03d09000 	.word	0x03d09000
 80066e8:	003d0900 	.word	0x003d0900
 80066ec:	007a1200 	.word	0x007a1200
 80066f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80066f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80066fc:	430b      	orrs	r3, r1
 80066fe:	f040 809c 	bne.w	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006702:	4b9e      	ldr	r3, [pc, #632]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006706:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800670a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006712:	d054      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800671a:	f200 808b 	bhi.w	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006724:	f000 8083 	beq.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800672e:	f200 8081 	bhi.w	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006738:	d02f      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006740:	d878      	bhi.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800674e:	d012      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006750:	e070      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006752:	4b8a      	ldr	r3, [pc, #552]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe07 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800676e:	e338      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006774:	e335      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006776:	4b81      	ldr	r3, [pc, #516]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800677e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006782:	d107      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006784:	f107 0318 	add.w	r3, r7, #24
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fb4d 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006792:	e326      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006798:	e323      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800679a:	4b78      	ldr	r3, [pc, #480]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a6:	d107      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a8:	f107 030c 	add.w	r3, r7, #12
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fc8f 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b6:	e314      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067bc:	e311      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067be:	4b6f      	ldr	r3, [pc, #444]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067c8:	4b6c      	ldr	r3, [pc, #432]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d10c      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80067d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067da:	4b68      	ldr	r3, [pc, #416]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	4a66      	ldr	r2, [pc, #408]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ec:	e01e      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067ee:	4b63      	ldr	r3, [pc, #396]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067fa:	d106      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80067fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006802:	d102      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006804:	4b5f      	ldr	r3, [pc, #380]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006808:	e010      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800680a:	4b5c      	ldr	r3, [pc, #368]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006816:	d106      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681e:	d102      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006820:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006824:	e002      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800682a:	e2da      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800682c:	e2d9      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800682e:	4b57      	ldr	r3, [pc, #348]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006832:	e2d6      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006838:	e2d3      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800683a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006842:	430b      	orrs	r3, r1
 8006844:	f040 80a7 	bne.w	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006848:	4b4c      	ldr	r3, [pc, #304]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006850:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006858:	d055      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006860:	f200 8096 	bhi.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006866:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800686a:	f000 8084 	beq.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006874:	f200 808c 	bhi.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800687e:	d030      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006886:	f200 8083 	bhi.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006896:	d012      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006898:	e07a      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800689a:	4b38      	ldr	r3, [pc, #224]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068a6:	d107      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fd63 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b6:	e294      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068bc:	e291      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068be:	4b2f      	ldr	r3, [pc, #188]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ca:	d107      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068cc:	f107 0318 	add.w	r3, r7, #24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 faa9 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068da:	e282      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e0:	e27f      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068e2:	4b26      	ldr	r3, [pc, #152]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ee:	d107      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f0:	f107 030c 	add.w	r3, r7, #12
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fbeb 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068fe:	e270      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006904:	e26d      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006906:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006910:	4b1a      	ldr	r3, [pc, #104]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b04      	cmp	r3, #4
 800691a:	d10c      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	08db      	lsrs	r3, r3, #3
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006934:	e01e      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006936:	4b11      	ldr	r3, [pc, #68]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006942:	d106      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694a:	d102      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800694c:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006950:	e010      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800695e:	d106      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006966:	d102      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006968:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006972:	e236      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006974:	e235      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006976:	4b05      	ldr	r3, [pc, #20]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800697a:	e232      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800697c:	58024400 	.word	0x58024400
 8006980:	03d09000 	.word	0x03d09000
 8006984:	003d0900 	.word	0x003d0900
 8006988:	007a1200 	.word	0x007a1200
 800698c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006994:	e225      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800699e:	430b      	orrs	r3, r1
 80069a0:	f040 8085 	bne.w	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80069a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069b4:	d06b      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80069b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069bc:	d874      	bhi.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80069be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069c4:	d056      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069cc:	d86c      	bhi.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069d4:	d03b      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069dc:	d864      	bhi.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069e4:	d021      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ec:	d85c      	bhi.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d004      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fa:	d004      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80069fc:	e054      	b.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80069fe:	f7fe fb1d 	bl	800503c <HAL_RCC_GetPCLK1Freq>
 8006a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a04:	e1ed      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a06:	4b84      	ldr	r3, [pc, #528]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a12:	d107      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a14:	f107 0318 	add.w	r3, r7, #24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa05 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a22:	e1de      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a28:	e1db      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a36:	d107      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb47 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a46:	e1cc      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e1c9      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a4e:	4b72      	ldr	r3, [pc, #456]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d109      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	08db      	lsrs	r3, r3, #3
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	4a6d      	ldr	r2, [pc, #436]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a6c:	e1b9      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a72:	e1b6      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a74:	4b68      	ldr	r3, [pc, #416]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a80:	d102      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006a82:	4b67      	ldr	r3, [pc, #412]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a86:	e1ac      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8c:	e1a9      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a8e:	4b62      	ldr	r3, [pc, #392]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a9a:	d102      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006a9c:	4b61      	ldr	r3, [pc, #388]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa0:	e19f      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa6:	e19c      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aac:	e199      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	d173      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006aba:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aca:	d02f      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad2:	d863      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	d012      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006ae2:	e05b      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af0:	d107      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af2:	f107 0318 	add.w	r3, r7, #24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f996 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b00:	e16f      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b06:	e16c      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b08:	4b43      	ldr	r3, [pc, #268]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fad8 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b24:	e15d      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b2a:	e15a      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b36:	4b38      	ldr	r3, [pc, #224]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b48:	4b33      	ldr	r3, [pc, #204]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a32      	ldr	r2, [pc, #200]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5a:	e01e      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b68:	d106      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b70:	d102      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b72:	4b2b      	ldr	r3, [pc, #172]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b76:	e010      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b78:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b84:	d106      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b8e:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b92:	e002      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b98:	e123      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b9a:	e122      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	e11f      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006baa:	430b      	orrs	r3, r1
 8006bac:	d13c      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006bae:	4b1a      	ldr	r3, [pc, #104]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d012      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006bc6:	e023      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fbcc 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be4:	e0fd      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bea:	e0fa      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfa:	f107 0318 	add.w	r3, r7, #24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f912 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c08:	e0eb      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c0e:	e0e8      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c14:	e0e5      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	03d09000 	.word	0x03d09000
 8006c20:	003d0900 	.word	0x003d0900
 8006c24:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006c30:	430b      	orrs	r3, r1
 8006c32:	f040 8085 	bne.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006c36:	4b6d      	ldr	r3, [pc, #436]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006c3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c46:	d06b      	beq.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c4e:	d874      	bhi.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c56:	d056      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c5e:	d86c      	bhi.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c66:	d03b      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c6e:	d864      	bhi.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c76:	d021      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c7e:	d85c      	bhi.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c8c:	d004      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006c8e:	e054      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006c90:	f000 f8b4 	bl	8006dfc <HAL_RCCEx_GetD3PCLK1Freq>
 8006c94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c96:	e0a4      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c98:	4b54      	ldr	r3, [pc, #336]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ca6:	f107 0318 	add.w	r3, r7, #24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f8bc 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb4:	e095      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cba:	e092      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cca:	f107 030c 	add.w	r3, r7, #12
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f9fe 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd8:	e083      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cde:	e080      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ce0:	4b42      	ldr	r3, [pc, #264]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d109      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cec:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	08db      	lsrs	r3, r3, #3
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cfe:	e070      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d04:	e06d      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d06:	4b39      	ldr	r3, [pc, #228]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d12:	d102      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006d14:	4b37      	ldr	r3, [pc, #220]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d18:	e063      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1e:	e060      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d20:	4b32      	ldr	r3, [pc, #200]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006d2e:	4b32      	ldr	r3, [pc, #200]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d32:	e056      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d38:	e053      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3e:	e050      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d44:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	d148      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d4c:	4b27      	ldr	r3, [pc, #156]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d5c:	d02a      	beq.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d64:	d838      	bhi.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d72:	d00d      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006d74:	e030      	b.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d76:	4b1d      	ldr	r3, [pc, #116]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d82:	d102      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006d84:	4b1c      	ldr	r3, [pc, #112]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d88:	e02b      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d8e:	e028      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d90:	4b16      	ldr	r3, [pc, #88]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d9c:	d107      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fae8 	bl	8007378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dac:	e019      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006db2:	e016      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006db4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc2:	f107 0318 	add.w	r3, r7, #24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f82e 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd0:	e007      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd6:	e004      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ddc:	e001      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3740      	adds	r7, #64	@ 0x40
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	58024400 	.word	0x58024400
 8006df0:	03d09000 	.word	0x03d09000
 8006df4:	003d0900 	.word	0x003d0900
 8006df8:	007a1200 	.word	0x007a1200

08006dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e00:	f7fe f8ec 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	@ (8006e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	0800f260 	.word	0x0800f260

08006e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e30:	4ba1      	ldr	r3, [pc, #644]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	0b1b      	lsrs	r3, r3, #12
 8006e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e46:	4b9c      	ldr	r3, [pc, #624]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e52:	4b99      	ldr	r3, [pc, #612]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8111 	beq.w	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f000 8083 	beq.w	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d056      	beq.n	8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e92:	e099      	b.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b88      	ldr	r3, [pc, #544]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02d      	beq.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea0:	4b85      	ldr	r3, [pc, #532]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a84      	ldr	r2, [pc, #528]	@ (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b7b      	ldr	r3, [pc, #492]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006efa:	e087      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3e:	e065      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b59      	ldr	r3, [pc, #356]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f82:	e043      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b48      	ldr	r3, [pc, #288]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	e021      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b37      	ldr	r3, [pc, #220]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800700c:	4b2a      	ldr	r3, [pc, #168]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007054:	edd7 6a07 	vldr	s13, [r7, #28]
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007060:	ee17 2a90 	vmov	r2, s15
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007068:	4b13      	ldr	r3, [pc, #76]	@ (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007082:	edd7 6a07 	vldr	s13, [r7, #28]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007096:	e008      	b.n	80070aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	3724      	adds	r7, #36	@ 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4a742400 	.word	0x4a742400
 80070cc:	4af42400 	.word	0x4af42400

080070d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	@ 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070e2:	4b9f      	ldr	r3, [pc, #636]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	0d1b      	lsrs	r3, r3, #20
 80070e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070fa:	4b99      	ldr	r3, [pc, #612]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8111 	beq.w	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b02      	cmp	r3, #2
 8007122:	f000 8083 	beq.w	800722c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f200 80a1 	bhi.w	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d056      	beq.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800713a:	e099      	b.n	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800713c:	4b88      	ldr	r3, [pc, #544]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d02d      	beq.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007148:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	4a84      	ldr	r2, [pc, #528]	@ (8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	4b7b      	ldr	r3, [pc, #492]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a03 	vldr	s12, [r7, #12]
 8007186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800718a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071a2:	e087      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800736c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e6:	e065      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a03 	vldr	s12, [r7, #12]
 800720e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722a:	e043      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b48      	ldr	r3, [pc, #288]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726e:	e021      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	0a5b      	lsrs	r3, r3, #9
 80072ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007310:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800733e:	e008      	b.n	8007352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
}
 8007352:	bf00      	nop
 8007354:	3724      	adds	r7, #36	@ 0x24
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	46000000 	.word	0x46000000
 800736c:	4c742400 	.word	0x4c742400
 8007370:	4a742400 	.word	0x4a742400
 8007374:	4af42400 	.word	0x4af42400

08007378 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	@ 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007380:	4ba0      	ldr	r3, [pc, #640]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800738a:	4b9e      	ldr	r3, [pc, #632]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007394:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007396:	4b9b      	ldr	r3, [pc, #620]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073a0:	4b98      	ldr	r3, [pc, #608]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a4:	08db      	lsrs	r3, r3, #3
 80073a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8111 	beq.w	80075e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	f000 8083 	beq.w	80074d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	f200 80a1 	bhi.w	8007516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d056      	beq.n	800748e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80073e0:	e099      	b.n	8007516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e2:	4b88      	ldr	r3, [pc, #544]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d02d      	beq.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073ee:	4b85      	ldr	r3, [pc, #532]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	08db      	lsrs	r3, r3, #3
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	4a83      	ldr	r2, [pc, #524]	@ (8007608 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80073fa:	fa22 f303 	lsr.w	r3, r2, r3
 80073fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007418:	4b7a      	ldr	r3, [pc, #488]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007428:	ed97 6a03 	vldr	s12, [r7, #12]
 800742c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800760c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800743c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007444:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007448:	e087      	b.n	800755a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007454:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745c:	4b69      	ldr	r3, [pc, #420]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800745e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007470:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800760c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800748c:	e065      	b.n	800755a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	ee07 3a90 	vmov	s15, r3
 8007494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007498:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007614 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800749c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a0:	4b58      	ldr	r3, [pc, #352]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800760c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074d0:	e043      	b.n	800755a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	ee07 3a90 	vmov	s15, r3
 80074d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80074e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e4:	4b47      	ldr	r3, [pc, #284]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800760c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007514:	e021      	b.n	800755a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007520:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007528:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007530:	ee07 3a90 	vmov	s15, r3
 8007534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007538:	ed97 6a03 	vldr	s12, [r7, #12]
 800753c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800760c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800754c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007558:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800755a:	4b2a      	ldr	r3, [pc, #168]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	0a5b      	lsrs	r3, r3, #9
 8007560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007574:	edd7 6a07 	vldr	s13, [r7, #28]
 8007578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007580:	ee17 2a90 	vmov	r2, s15
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007588:	4b1e      	ldr	r3, [pc, #120]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800759e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ae:	ee17 2a90 	vmov	r2, s15
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80075b6:	4b13      	ldr	r3, [pc, #76]	@ (8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	0e1b      	lsrs	r3, r3, #24
 80075bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075dc:	ee17 2a90 	vmov	r2, s15
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80075e4:	e008      	b.n	80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
}
 80075f8:	bf00      	nop
 80075fa:	3724      	adds	r7, #36	@ 0x24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	58024400 	.word	0x58024400
 8007608:	03d09000 	.word	0x03d09000
 800760c:	46000000 	.word	0x46000000
 8007610:	4c742400 	.word	0x4c742400
 8007614:	4a742400 	.word	0x4a742400
 8007618:	4af42400 	.word	0x4af42400

0800761c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800762a:	4b53      	ldr	r3, [pc, #332]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d101      	bne.n	800763a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e099      	b.n	800776e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800763a:	4b4f      	ldr	r3, [pc, #316]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a4e      	ldr	r2, [pc, #312]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007640:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007646:	f7fb f8bb 	bl	80027c0 <HAL_GetTick>
 800764a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800764c:	e008      	b.n	8007660 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800764e:	f7fb f8b7 	bl	80027c0 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e086      	b.n	800776e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007660:	4b45      	ldr	r3, [pc, #276]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f0      	bne.n	800764e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800766c:	4b42      	ldr	r3, [pc, #264]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800766e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007670:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	031b      	lsls	r3, r3, #12
 800767a:	493f      	ldr	r1, [pc, #252]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	3b01      	subs	r3, #1
 8007686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	3b01      	subs	r3, #1
 8007690:	025b      	lsls	r3, r3, #9
 8007692:	b29b      	uxth	r3, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	3b01      	subs	r3, #1
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076b0:	4931      	ldr	r1, [pc, #196]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076b6:	4b30      	ldr	r3, [pc, #192]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	492d      	ldr	r1, [pc, #180]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f023 0220 	bic.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	4928      	ldr	r1, [pc, #160]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076da:	4b27      	ldr	r3, [pc, #156]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	4a26      	ldr	r2, [pc, #152]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	f023 0310 	bic.w	r3, r3, #16
 80076e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076e6:	4b24      	ldr	r3, [pc, #144]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ea:	4b24      	ldr	r3, [pc, #144]	@ (800777c <RCCEx_PLL2_Config+0x160>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	69d2      	ldr	r2, [r2, #28]
 80076f2:	00d2      	lsls	r2, r2, #3
 80076f4:	4920      	ldr	r1, [pc, #128]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007700:	f043 0310 	orr.w	r3, r3, #16
 8007704:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800770c:	4b1a      	ldr	r3, [pc, #104]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007712:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007716:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007718:	e00f      	b.n	800773a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d106      	bne.n	800772e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007720:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	4a14      	ldr	r2, [pc, #80]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800772c:	e005      	b.n	800773a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800772e:	4b12      	ldr	r3, [pc, #72]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	4a11      	ldr	r2, [pc, #68]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007738:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800773a:	4b0f      	ldr	r3, [pc, #60]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a0e      	ldr	r2, [pc, #56]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007746:	f7fb f83b 	bl	80027c0 <HAL_GetTick>
 800774a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800774c:	e008      	b.n	8007760 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800774e:	f7fb f837 	bl	80027c0 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007760:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <RCCEx_PLL2_Config+0x15c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0f0      	beq.n	800774e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	ffff0007 	.word	0xffff0007

08007780 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778e:	4b53      	ldr	r3, [pc, #332]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d101      	bne.n	800779e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e099      	b.n	80078d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800779e:	4b4f      	ldr	r3, [pc, #316]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a4e      	ldr	r2, [pc, #312]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80077a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7fb f809 	bl	80027c0 <HAL_GetTick>
 80077ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077b0:	e008      	b.n	80077c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077b2:	f7fb f805 	bl	80027c0 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e086      	b.n	80078d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077c4:	4b45      	ldr	r3, [pc, #276]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1f0      	bne.n	80077b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077d0:	4b42      	ldr	r3, [pc, #264]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	051b      	lsls	r3, r3, #20
 80077de:	493f      	ldr	r1, [pc, #252]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	025b      	lsls	r3, r3, #9
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	3b01      	subs	r3, #1
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	3b01      	subs	r3, #1
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007814:	4931      	ldr	r1, [pc, #196]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800781a:	4b30      	ldr	r3, [pc, #192]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	492d      	ldr	r1, [pc, #180]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800782c:	4b2b      	ldr	r3, [pc, #172]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	4928      	ldr	r1, [pc, #160]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800783e:	4b27      	ldr	r3, [pc, #156]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	4a26      	ldr	r2, [pc, #152]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007848:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800784a:	4b24      	ldr	r3, [pc, #144]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800784c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800784e:	4b24      	ldr	r3, [pc, #144]	@ (80078e0 <RCCEx_PLL3_Config+0x160>)
 8007850:	4013      	ands	r3, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	69d2      	ldr	r2, [r2, #28]
 8007856:	00d2      	lsls	r2, r2, #3
 8007858:	4920      	ldr	r1, [pc, #128]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800785e:	4b1f      	ldr	r3, [pc, #124]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	4a1e      	ldr	r2, [pc, #120]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007868:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007870:	4b1a      	ldr	r3, [pc, #104]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	4a19      	ldr	r2, [pc, #100]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007876:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800787a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800787c:	e00f      	b.n	800789e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d106      	bne.n	8007892 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007884:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	4a14      	ldr	r2, [pc, #80]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 800788a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800788e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007890:	e005      	b.n	800789e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007892:	4b12      	ldr	r3, [pc, #72]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	4a11      	ldr	r2, [pc, #68]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 8007898:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800789c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800789e:	4b0f      	ldr	r3, [pc, #60]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0e      	ldr	r2, [pc, #56]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80078a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078aa:	f7fa ff89 	bl	80027c0 <HAL_GetTick>
 80078ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078b0:	e008      	b.n	80078c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078b2:	f7fa ff85 	bl	80027c0 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e006      	b.n	80078d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <RCCEx_PLL3_Config+0x15c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0f0      	beq.n	80078b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	58024400 	.word	0x58024400
 80078e0:	ffff0007 	.word	0xffff0007

080078e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e10f      	b.n	8007b16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a87      	ldr	r2, [pc, #540]	@ (8007b20 <HAL_SPI_Init+0x23c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00f      	beq.n	8007926 <HAL_SPI_Init+0x42>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a86      	ldr	r2, [pc, #536]	@ (8007b24 <HAL_SPI_Init+0x240>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00a      	beq.n	8007926 <HAL_SPI_Init+0x42>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a84      	ldr	r2, [pc, #528]	@ (8007b28 <HAL_SPI_Init+0x244>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d005      	beq.n	8007926 <HAL_SPI_Init+0x42>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d901      	bls.n	8007926 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0f7      	b.n	8007b16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fd08 	bl	800833c <SPI_GetPacketSize>
 800792c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a7b      	ldr	r2, [pc, #492]	@ (8007b20 <HAL_SPI_Init+0x23c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00c      	beq.n	8007952 <HAL_SPI_Init+0x6e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a79      	ldr	r2, [pc, #484]	@ (8007b24 <HAL_SPI_Init+0x240>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <HAL_SPI_Init+0x6e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a78      	ldr	r2, [pc, #480]	@ (8007b28 <HAL_SPI_Init+0x244>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d002      	beq.n	8007952 <HAL_SPI_Init+0x6e>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b08      	cmp	r3, #8
 8007950:	d811      	bhi.n	8007976 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007956:	4a72      	ldr	r2, [pc, #456]	@ (8007b20 <HAL_SPI_Init+0x23c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a70      	ldr	r2, [pc, #448]	@ (8007b24 <HAL_SPI_Init+0x240>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_SPI_Init+0x8c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6f      	ldr	r2, [pc, #444]	@ (8007b28 <HAL_SPI_Init+0x244>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d104      	bne.n	800797a <HAL_SPI_Init+0x96>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b10      	cmp	r3, #16
 8007974:	d901      	bls.n	800797a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e0cd      	b.n	8007b16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fa fbde 	bl	8002150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80079b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079c0:	d119      	bne.n	80079f6 <HAL_SPI_Init+0x112>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079ca:	d103      	bne.n	80079d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10c      	bne.n	80079f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e4:	d107      	bne.n	80079f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00f      	beq.n	8007a22 <HAL_SPI_Init+0x13e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d90b      	bls.n	8007a22 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e007      	b.n	8007a32 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a44:	ea42 0103 	orr.w	r1, r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a92:	ea42 0103 	orr.w	r1, r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d113      	bne.n	8007ad2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007abc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ad0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40013000 	.word	0x40013000
 8007b24:	40003800 	.word	0x40003800
 8007b28:	40003c00 	.word	0x40003c00

08007b2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08e      	sub	sp, #56	@ 0x38
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3320      	adds	r3, #32
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3330      	adds	r3, #48	@ 0x30
 8007b48:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3301      	adds	r3, #1
 8007b54:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b56:	f7fa fe33 	bl	80027c0 <HAL_GetTick>
 8007b5a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007b5c:	887b      	ldrh	r3, [r7, #2]
 8007b5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007b60:	887b      	ldrh	r3, [r7, #2]
 8007b62:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d001      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e310      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_SPI_TransmitReceive+0x5a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_SPI_TransmitReceive+0x5a>
 8007b80:	887b      	ldrh	r3, [r7, #2]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e305      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x6c>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e2fe      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	887a      	ldrh	r2, [r7, #2]
 8007bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	887a      	ldrh	r2, [r7, #2]
 8007bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a70      	ldr	r2, [pc, #448]	@ (8007dc0 <HAL_SPI_TransmitReceive+0x294>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0xea>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a6f      	ldr	r2, [pc, #444]	@ (8007dc4 <HAL_SPI_TransmitReceive+0x298>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0xea>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a6d      	ldr	r2, [pc, #436]	@ (8007dc8 <HAL_SPI_TransmitReceive+0x29c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d102      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007c16:	2310      	movs	r3, #16
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c1a:	e001      	b.n	8007c20 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b69      	ldr	r3, [pc, #420]	@ (8007dcc <HAL_SPI_TransmitReceive+0x2a0>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	8879      	ldrh	r1, [r7, #2]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c4c:	d107      	bne.n	8007c5e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	f240 80a2 	bls.w	8007dac <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c6e:	e094      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d120      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x194>
 8007c7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01d      	beq.n	8007cc0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007c84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d217      	bcs.n	8007cc0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007cc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d065      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d118      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ce6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cec:	1d1a      	adds	r2, r3, #4
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d0c:	e045      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007d10:	8bfb      	ldrh	r3, [r7, #30]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d21d      	bcs.n	8007d52 <HAL_SPI_TransmitReceive+0x226>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d018      	beq.n	8007d52 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d2a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d50:	e023      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d52:	f7fa fd35 	bl	80027c0 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d803      	bhi.n	8007d6a <HAL_SPI_TransmitReceive+0x23e>
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_TransmitReceive+0x244>
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d114      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fa15 	bl	80081a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e1fd      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f47f af67 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x144>
 8007da2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f af63 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x144>
 8007daa:	e1ce      	b.n	800814a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b07      	cmp	r3, #7
 8007db2:	f240 81c2 	bls.w	800813a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007dbc:	e0c9      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x426>
 8007dbe:	bf00      	nop
 8007dc0:	40013000 	.word	0x40013000
 8007dc4:	40003800 	.word	0x40003800
 8007dc8:	40003c00 	.word	0x40003c00
 8007dcc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d11f      	bne.n	8007e1e <HAL_SPI_TransmitReceive+0x2f2>
 8007dde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01c      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007de4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007de6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d216      	bcs.n	8007e1e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df4:	881a      	ldrh	r2, [r3, #0]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dfe:	1c9a      	adds	r2, r3, #2
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007e26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8092 	beq.w	8007f52 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d118      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e40:	6a3a      	ldr	r2, [r7, #32]
 8007e42:	8812      	ldrh	r2, [r2, #0]
 8007e44:	b292      	uxth	r2, r2
 8007e46:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4c:	1c9a      	adds	r2, r3, #2
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e6c:	e071      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007e70:	8bfb      	ldrh	r3, [r7, #30]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d228      	bcs.n	8007ec8 <HAL_SPI_TransmitReceive+0x39c>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d023      	beq.n	8007ec8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	8812      	ldrh	r2, [r2, #0]
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e90:	1c9a      	adds	r2, r3, #2
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	8812      	ldrh	r2, [r2, #0]
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b02      	subs	r3, #2
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ec4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ec6:	e044      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007ec8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d11d      	bne.n	8007f0a <HAL_SPI_TransmitReceive+0x3de>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d018      	beq.n	8007f0a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	8812      	ldrh	r2, [r2, #0]
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee8:	1c9a      	adds	r2, r3, #2
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007f08:	e023      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f0a:	f7fa fc59 	bl	80027c0 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d803      	bhi.n	8007f22 <HAL_SPI_TransmitReceive+0x3f6>
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f20:	d102      	bne.n	8007f28 <HAL_SPI_TransmitReceive+0x3fc>
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d114      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f939 	bl	80081a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e121      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f47f af3b 	bne.w	8007dd0 <HAL_SPI_TransmitReceive+0x2a4>
 8007f5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f af37 	bne.w	8007dd0 <HAL_SPI_TransmitReceive+0x2a4>
 8007f62:	e0f2      	b.n	800814a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d121      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x48a>
 8007f72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01e      	beq.n	8007fb6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007f78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007f7a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d218      	bcs.n	8007fb6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3320      	adds	r3, #32
 8007f8e:	7812      	ldrb	r2, [r2, #0]
 8007f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fb4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007fbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80ba 	beq.w	800813a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11b      	bne.n	800800c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008008:	853b      	strh	r3, [r7, #40]	@ 0x28
 800800a:	e096      	b.n	800813a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800800c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800800e:	8bfb      	ldrh	r3, [r7, #30]
 8008010:	429a      	cmp	r2, r3
 8008012:	d24a      	bcs.n	80080aa <HAL_SPI_TransmitReceive+0x57e>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d045      	beq.n	80080aa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008062:	7812      	ldrb	r2, [r2, #0]
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b04      	subs	r3, #4
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80080a8:	e047      	b.n	800813a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80080aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d820      	bhi.n	80080f2 <HAL_SPI_TransmitReceive+0x5c6>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01b      	beq.n	80080f2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80080f0:	e023      	b.n	800813a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f2:	f7fa fb65 	bl	80027c0 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080fe:	429a      	cmp	r2, r3
 8008100:	d803      	bhi.n	800810a <HAL_SPI_TransmitReceive+0x5de>
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008108:	d102      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x5e4>
 800810a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	d114      	bne.n	800813a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f845 	bl	80081a0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800811c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e02d      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800813a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f af11 	bne.w	8007f64 <HAL_SPI_TransmitReceive+0x438>
 8008142:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	f47f af0d 	bne.w	8007f64 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	2200      	movs	r2, #0
 8008152:	2108      	movs	r1, #8
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f8c3 	bl	80082e0 <SPI_WaitOnFlagUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f815 	bl	80081a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008194:	2300      	movs	r3, #0
  }
}
 8008196:	4618      	mov	r0, r3
 8008198:	3730      	adds	r7, #48	@ 0x30
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0210 	orr.w	r2, r2, #16
 80081ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6919      	ldr	r1, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b3c      	ldr	r3, [pc, #240]	@ (80082dc <SPI_CloseTransfer+0x13c>)
 80081ec:	400b      	ands	r3, r1
 80081ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80081fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b04      	cmp	r3, #4
 800820a:	d014      	beq.n	8008236 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00f      	beq.n	8008236 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0220 	orr.w	r2, r2, #32
 8008234:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d014      	beq.n	800826c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00f      	beq.n	800826c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008252:	f043 0204 	orr.w	r2, r3, #4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800826a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00f      	beq.n	8008296 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827c:	f043 0201 	orr.w	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008294:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082a6:	f043 0208 	orr.w	r2, r3, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	fffffc90 	.word	0xfffffc90

080082e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80082f0:	e010      	b.n	8008314 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f2:	f7fa fa65 	bl	80027c0 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d803      	bhi.n	800830a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008308:	d102      	bne.n	8008310 <SPI_WaitOnFlagUntilTimeout+0x30>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e00f      	b.n	8008334 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695a      	ldr	r2, [r3, #20]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4013      	ands	r3, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	429a      	cmp	r2, r3
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	429a      	cmp	r2, r3
 8008330:	d0df      	beq.n	80082f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	3307      	adds	r3, #7
 800835a:	08db      	lsrs	r3, r3, #3
 800835c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	fb02 f303 	mul.w	r3, r2, r3
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e049      	b.n	8008418 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f841 	bl	8008420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f000 f9f5 	bl	80087a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e05e      	b.n	800850a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2b      	ldr	r2, [pc, #172]	@ (8008518 <HAL_TIM_Base_Start_IT+0xe4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d02c      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008476:	d027      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a27      	ldr	r2, [pc, #156]	@ (800851c <HAL_TIM_Base_Start_IT+0xe8>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d022      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a26      	ldr	r2, [pc, #152]	@ (8008520 <HAL_TIM_Base_Start_IT+0xec>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d01d      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a24      	ldr	r2, [pc, #144]	@ (8008524 <HAL_TIM_Base_Start_IT+0xf0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d018      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a23      	ldr	r2, [pc, #140]	@ (8008528 <HAL_TIM_Base_Start_IT+0xf4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a21      	ldr	r2, [pc, #132]	@ (800852c <HAL_TIM_Base_Start_IT+0xf8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00e      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a20      	ldr	r2, [pc, #128]	@ (8008530 <HAL_TIM_Base_Start_IT+0xfc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d009      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008534 <HAL_TIM_Base_Start_IT+0x100>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d004      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0x94>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <HAL_TIM_Base_Start_IT+0x104>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d115      	bne.n	80084f4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	4b1b      	ldr	r3, [pc, #108]	@ (800853c <HAL_TIM_Base_Start_IT+0x108>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b06      	cmp	r3, #6
 80084d8:	d015      	beq.n	8008506 <HAL_TIM_Base_Start_IT+0xd2>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e0:	d011      	beq.n	8008506 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0201 	orr.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f2:	e008      	b.n	8008506 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e000      	b.n	8008508 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40010000 	.word	0x40010000
 800851c:	40000400 	.word	0x40000400
 8008520:	40000800 	.word	0x40000800
 8008524:	40000c00 	.word	0x40000c00
 8008528:	40010400 	.word	0x40010400
 800852c:	40001800 	.word	0x40001800
 8008530:	40014000 	.word	0x40014000
 8008534:	4000e000 	.word	0x4000e000
 8008538:	4000e400 	.word	0x4000e400
 800853c:	00010007 	.word	0x00010007

08008540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d020      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01b      	beq.n	80085a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0202 	mvn.w	r2, #2
 8008574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8e9 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8db 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8ec 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d020      	beq.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f06f 0204 	mvn.w	r2, #4
 80085c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f8c3 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 80085dc:	e005      	b.n	80085ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8b5 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f8c6 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d020      	beq.n	800863c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01b      	beq.n	800863c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0208 	mvn.w	r2, #8
 800860c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f89d 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008628:	e005      	b.n	8008636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f88f 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f8a0 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d020      	beq.n	8008688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0210 	mvn.w	r2, #16
 8008658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2208      	movs	r2, #8
 800865e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f877 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008674:	e005      	b.n	8008682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f869 	bl	800874e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f87a 	bl	8008776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00c      	beq.n	80086ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0201 	mvn.w	r2, #1
 80086a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7f9 fb58 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d104      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00c      	beq.n	80086da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f91f 	bl	8008918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f917 	bl	800892c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800871a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f834 	bl	800878a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00c      	beq.n	8008746 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0220 	mvn.w	r2, #32
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8df 	bl	8008904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a4a      	ldr	r2, [pc, #296]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087be:	d00f      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a47      	ldr	r2, [pc, #284]	@ (80088e0 <TIM_Base_SetConfig+0x140>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a46      	ldr	r2, [pc, #280]	@ (80088e4 <TIM_Base_SetConfig+0x144>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a45      	ldr	r2, [pc, #276]	@ (80088e8 <TIM_Base_SetConfig+0x148>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a44      	ldr	r2, [pc, #272]	@ (80088ec <TIM_Base_SetConfig+0x14c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d108      	bne.n	80087f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a39      	ldr	r2, [pc, #228]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d027      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008800:	d023      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a36      	ldr	r2, [pc, #216]	@ (80088e0 <TIM_Base_SetConfig+0x140>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d01f      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a35      	ldr	r2, [pc, #212]	@ (80088e4 <TIM_Base_SetConfig+0x144>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01b      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a34      	ldr	r2, [pc, #208]	@ (80088e8 <TIM_Base_SetConfig+0x148>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d017      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a33      	ldr	r2, [pc, #204]	@ (80088ec <TIM_Base_SetConfig+0x14c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a32      	ldr	r2, [pc, #200]	@ (80088f0 <TIM_Base_SetConfig+0x150>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00f      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a31      	ldr	r2, [pc, #196]	@ (80088f4 <TIM_Base_SetConfig+0x154>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00b      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a30      	ldr	r2, [pc, #192]	@ (80088f8 <TIM_Base_SetConfig+0x158>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d007      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2f      	ldr	r2, [pc, #188]	@ (80088fc <TIM_Base_SetConfig+0x15c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_Base_SetConfig+0xaa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a2e      	ldr	r2, [pc, #184]	@ (8008900 <TIM_Base_SetConfig+0x160>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d108      	bne.n	800885c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <TIM_Base_SetConfig+0x13c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00f      	beq.n	80088a8 <TIM_Base_SetConfig+0x108>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a18      	ldr	r2, [pc, #96]	@ (80088ec <TIM_Base_SetConfig+0x14c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00b      	beq.n	80088a8 <TIM_Base_SetConfig+0x108>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a17      	ldr	r2, [pc, #92]	@ (80088f0 <TIM_Base_SetConfig+0x150>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d007      	beq.n	80088a8 <TIM_Base_SetConfig+0x108>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a16      	ldr	r2, [pc, #88]	@ (80088f4 <TIM_Base_SetConfig+0x154>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_Base_SetConfig+0x108>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a15      	ldr	r2, [pc, #84]	@ (80088f8 <TIM_Base_SetConfig+0x158>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d103      	bne.n	80088b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d105      	bne.n	80088ce <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f023 0201 	bic.w	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	611a      	str	r2, [r3, #16]
  }
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40010000 	.word	0x40010000
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	40010400 	.word	0x40010400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800
 80088fc:	4000e000 	.word	0x4000e000
 8008900:	4000e400 	.word	0x4000e400

08008904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e042      	b.n	80089d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008958:	2b00      	cmp	r3, #0
 800895a:	d106      	bne.n	800896a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7f9 fc81 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2224      	movs	r2, #36	@ 0x24
 800896e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fe94 	bl	80096b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f825 	bl	80089e0 <UART_SetConfig>
 8008996:	4603      	mov	r3, r0
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e01b      	b.n	80089d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 ff13 	bl	80097fc <UART_CheckIdleState>
 80089d6:	4603      	mov	r3, r0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089e4:	b092      	sub	sp, #72	@ 0x48
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	431a      	orrs	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4bbe      	ldr	r3, [pc, #760]	@ (8008d08 <UART_SetConfig+0x328>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	6812      	ldr	r2, [r2, #0]
 8008a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4ab3      	ldr	r2, [pc, #716]	@ (8008d0c <UART_SetConfig+0x32c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d004      	beq.n	8008a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	4baf      	ldr	r3, [pc, #700]	@ (8008d10 <UART_SetConfig+0x330>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	f023 010f 	bic.w	r1, r3, #15
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4aa6      	ldr	r2, [pc, #664]	@ (8008d14 <UART_SetConfig+0x334>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d177      	bne.n	8008b70 <UART_SetConfig+0x190>
 8008a80:	4ba5      	ldr	r3, [pc, #660]	@ (8008d18 <UART_SetConfig+0x338>)
 8008a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a88:	2b28      	cmp	r3, #40	@ 0x28
 8008a8a:	d86d      	bhi.n	8008b68 <UART_SetConfig+0x188>
 8008a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a94 <UART_SetConfig+0xb4>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008b39 	.word	0x08008b39
 8008a98:	08008b69 	.word	0x08008b69
 8008a9c:	08008b69 	.word	0x08008b69
 8008aa0:	08008b69 	.word	0x08008b69
 8008aa4:	08008b69 	.word	0x08008b69
 8008aa8:	08008b69 	.word	0x08008b69
 8008aac:	08008b69 	.word	0x08008b69
 8008ab0:	08008b69 	.word	0x08008b69
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b69 	.word	0x08008b69
 8008abc:	08008b69 	.word	0x08008b69
 8008ac0:	08008b69 	.word	0x08008b69
 8008ac4:	08008b69 	.word	0x08008b69
 8008ac8:	08008b69 	.word	0x08008b69
 8008acc:	08008b69 	.word	0x08008b69
 8008ad0:	08008b69 	.word	0x08008b69
 8008ad4:	08008b49 	.word	0x08008b49
 8008ad8:	08008b69 	.word	0x08008b69
 8008adc:	08008b69 	.word	0x08008b69
 8008ae0:	08008b69 	.word	0x08008b69
 8008ae4:	08008b69 	.word	0x08008b69
 8008ae8:	08008b69 	.word	0x08008b69
 8008aec:	08008b69 	.word	0x08008b69
 8008af0:	08008b69 	.word	0x08008b69
 8008af4:	08008b51 	.word	0x08008b51
 8008af8:	08008b69 	.word	0x08008b69
 8008afc:	08008b69 	.word	0x08008b69
 8008b00:	08008b69 	.word	0x08008b69
 8008b04:	08008b69 	.word	0x08008b69
 8008b08:	08008b69 	.word	0x08008b69
 8008b0c:	08008b69 	.word	0x08008b69
 8008b10:	08008b69 	.word	0x08008b69
 8008b14:	08008b59 	.word	0x08008b59
 8008b18:	08008b69 	.word	0x08008b69
 8008b1c:	08008b69 	.word	0x08008b69
 8008b20:	08008b69 	.word	0x08008b69
 8008b24:	08008b69 	.word	0x08008b69
 8008b28:	08008b69 	.word	0x08008b69
 8008b2c:	08008b69 	.word	0x08008b69
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e326      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e322      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e31e      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e31a      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e316      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b60:	2340      	movs	r3, #64	@ 0x40
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e312      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b68:	2380      	movs	r3, #128	@ 0x80
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e30e      	b.n	800918e <UART_SetConfig+0x7ae>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a69      	ldr	r2, [pc, #420]	@ (8008d1c <UART_SetConfig+0x33c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d130      	bne.n	8008bdc <UART_SetConfig+0x1fc>
 8008b7a:	4b67      	ldr	r3, [pc, #412]	@ (8008d18 <UART_SetConfig+0x338>)
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d826      	bhi.n	8008bd4 <UART_SetConfig+0x1f4>
 8008b86:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <UART_SetConfig+0x1ac>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bcd 	.word	0x08008bcd
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e2f0      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e2ec      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e2e8      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e2e4      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e2e0      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bcc:	2340      	movs	r3, #64	@ 0x40
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e2dc      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bd4:	2380      	movs	r3, #128	@ 0x80
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e2d8      	b.n	800918e <UART_SetConfig+0x7ae>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a4f      	ldr	r2, [pc, #316]	@ (8008d20 <UART_SetConfig+0x340>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d130      	bne.n	8008c48 <UART_SetConfig+0x268>
 8008be6:	4b4c      	ldr	r3, [pc, #304]	@ (8008d18 <UART_SetConfig+0x338>)
 8008be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d826      	bhi.n	8008c40 <UART_SetConfig+0x260>
 8008bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf8 <UART_SetConfig+0x218>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c11 	.word	0x08008c11
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c21 	.word	0x08008c21
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e2ba      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e2b6      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e2b2      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e2ae      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c30:	2320      	movs	r3, #32
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e2aa      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c38:	2340      	movs	r3, #64	@ 0x40
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e2a6      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e2a2      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a35      	ldr	r2, [pc, #212]	@ (8008d24 <UART_SetConfig+0x344>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d130      	bne.n	8008cb4 <UART_SetConfig+0x2d4>
 8008c52:	4b31      	ldr	r3, [pc, #196]	@ (8008d18 <UART_SetConfig+0x338>)
 8008c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d826      	bhi.n	8008cac <UART_SetConfig+0x2cc>
 8008c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0x284>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c7d 	.word	0x08008c7d
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c8d 	.word	0x08008c8d
 8008c70:	08008c95 	.word	0x08008c95
 8008c74:	08008c9d 	.word	0x08008c9d
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e284      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e280      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e27c      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e278      	b.n	800918e <UART_SetConfig+0x7ae>
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e274      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ca4:	2340      	movs	r3, #64	@ 0x40
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e270      	b.n	800918e <UART_SetConfig+0x7ae>
 8008cac:	2380      	movs	r3, #128	@ 0x80
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e26c      	b.n	800918e <UART_SetConfig+0x7ae>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d28 <UART_SetConfig+0x348>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d142      	bne.n	8008d44 <UART_SetConfig+0x364>
 8008cbe:	4b16      	ldr	r3, [pc, #88]	@ (8008d18 <UART_SetConfig+0x338>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b05      	cmp	r3, #5
 8008cc8:	d838      	bhi.n	8008d3c <UART_SetConfig+0x35c>
 8008cca:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <UART_SetConfig+0x2f0>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008ce9 	.word	0x08008ce9
 8008cd4:	08008cf1 	.word	0x08008cf1
 8008cd8:	08008cf9 	.word	0x08008cf9
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d35 	.word	0x08008d35
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e24e      	b.n	800918e <UART_SetConfig+0x7ae>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e24a      	b.n	800918e <UART_SetConfig+0x7ae>
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e246      	b.n	800918e <UART_SetConfig+0x7ae>
 8008d00:	2310      	movs	r3, #16
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e242      	b.n	800918e <UART_SetConfig+0x7ae>
 8008d08:	cfff69f3 	.word	0xcfff69f3
 8008d0c:	58000c00 	.word	0x58000c00
 8008d10:	11fff4ff 	.word	0x11fff4ff
 8008d14:	40011000 	.word	0x40011000
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	40004400 	.word	0x40004400
 8008d20:	40004800 	.word	0x40004800
 8008d24:	40004c00 	.word	0x40004c00
 8008d28:	40005000 	.word	0x40005000
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e22c      	b.n	800918e <UART_SetConfig+0x7ae>
 8008d34:	2340      	movs	r3, #64	@ 0x40
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e228      	b.n	800918e <UART_SetConfig+0x7ae>
 8008d3c:	2380      	movs	r3, #128	@ 0x80
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e224      	b.n	800918e <UART_SetConfig+0x7ae>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4ab1      	ldr	r2, [pc, #708]	@ (8009010 <UART_SetConfig+0x630>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d176      	bne.n	8008e3c <UART_SetConfig+0x45c>
 8008d4e:	4bb1      	ldr	r3, [pc, #708]	@ (8009014 <UART_SetConfig+0x634>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d56:	2b28      	cmp	r3, #40	@ 0x28
 8008d58:	d86c      	bhi.n	8008e34 <UART_SetConfig+0x454>
 8008d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d60 <UART_SetConfig+0x380>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008e05 	.word	0x08008e05
 8008d64:	08008e35 	.word	0x08008e35
 8008d68:	08008e35 	.word	0x08008e35
 8008d6c:	08008e35 	.word	0x08008e35
 8008d70:	08008e35 	.word	0x08008e35
 8008d74:	08008e35 	.word	0x08008e35
 8008d78:	08008e35 	.word	0x08008e35
 8008d7c:	08008e35 	.word	0x08008e35
 8008d80:	08008e0d 	.word	0x08008e0d
 8008d84:	08008e35 	.word	0x08008e35
 8008d88:	08008e35 	.word	0x08008e35
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e35 	.word	0x08008e35
 8008d94:	08008e35 	.word	0x08008e35
 8008d98:	08008e35 	.word	0x08008e35
 8008d9c:	08008e35 	.word	0x08008e35
 8008da0:	08008e15 	.word	0x08008e15
 8008da4:	08008e35 	.word	0x08008e35
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e35 	.word	0x08008e35
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008e35 	.word	0x08008e35
 8008db8:	08008e35 	.word	0x08008e35
 8008dbc:	08008e35 	.word	0x08008e35
 8008dc0:	08008e1d 	.word	0x08008e1d
 8008dc4:	08008e35 	.word	0x08008e35
 8008dc8:	08008e35 	.word	0x08008e35
 8008dcc:	08008e35 	.word	0x08008e35
 8008dd0:	08008e35 	.word	0x08008e35
 8008dd4:	08008e35 	.word	0x08008e35
 8008dd8:	08008e35 	.word	0x08008e35
 8008ddc:	08008e35 	.word	0x08008e35
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e35 	.word	0x08008e35
 8008de8:	08008e35 	.word	0x08008e35
 8008dec:	08008e35 	.word	0x08008e35
 8008df0:	08008e35 	.word	0x08008e35
 8008df4:	08008e35 	.word	0x08008e35
 8008df8:	08008e35 	.word	0x08008e35
 8008dfc:	08008e35 	.word	0x08008e35
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e1c0      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e1bc      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e1b8      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e1b4      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e24:	2320      	movs	r3, #32
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e1b0      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e2c:	2340      	movs	r3, #64	@ 0x40
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e1ac      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e34:	2380      	movs	r3, #128	@ 0x80
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e1a8      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a75      	ldr	r2, [pc, #468]	@ (8009018 <UART_SetConfig+0x638>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d130      	bne.n	8008ea8 <UART_SetConfig+0x4c8>
 8008e46:	4b73      	ldr	r3, [pc, #460]	@ (8009014 <UART_SetConfig+0x634>)
 8008e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d826      	bhi.n	8008ea0 <UART_SetConfig+0x4c0>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <UART_SetConfig+0x478>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e79 	.word	0x08008e79
 8008e60:	08008e81 	.word	0x08008e81
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e18a      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e186      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e80:	2308      	movs	r3, #8
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e182      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e17e      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e90:	2320      	movs	r3, #32
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e17a      	b.n	800918e <UART_SetConfig+0x7ae>
 8008e98:	2340      	movs	r3, #64	@ 0x40
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e176      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e172      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a5b      	ldr	r2, [pc, #364]	@ (800901c <UART_SetConfig+0x63c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d130      	bne.n	8008f14 <UART_SetConfig+0x534>
 8008eb2:	4b58      	ldr	r3, [pc, #352]	@ (8009014 <UART_SetConfig+0x634>)
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d826      	bhi.n	8008f0c <UART_SetConfig+0x52c>
 8008ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <UART_SetConfig+0x4e4>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008eed 	.word	0x08008eed
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08008efd 	.word	0x08008efd
 8008ed8:	08008f05 	.word	0x08008f05
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e154      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e150      	b.n	800918e <UART_SetConfig+0x7ae>
 8008eec:	2308      	movs	r3, #8
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e14c      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e148      	b.n	800918e <UART_SetConfig+0x7ae>
 8008efc:	2320      	movs	r3, #32
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e144      	b.n	800918e <UART_SetConfig+0x7ae>
 8008f04:	2340      	movs	r3, #64	@ 0x40
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e140      	b.n	800918e <UART_SetConfig+0x7ae>
 8008f0c:	2380      	movs	r3, #128	@ 0x80
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e13c      	b.n	800918e <UART_SetConfig+0x7ae>
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a41      	ldr	r2, [pc, #260]	@ (8009020 <UART_SetConfig+0x640>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	f040 8082 	bne.w	8009024 <UART_SetConfig+0x644>
 8008f20:	4b3c      	ldr	r3, [pc, #240]	@ (8009014 <UART_SetConfig+0x634>)
 8008f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f28:	2b28      	cmp	r3, #40	@ 0x28
 8008f2a:	d86d      	bhi.n	8009008 <UART_SetConfig+0x628>
 8008f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <UART_SetConfig+0x554>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008fd9 	.word	0x08008fd9
 8008f38:	08009009 	.word	0x08009009
 8008f3c:	08009009 	.word	0x08009009
 8008f40:	08009009 	.word	0x08009009
 8008f44:	08009009 	.word	0x08009009
 8008f48:	08009009 	.word	0x08009009
 8008f4c:	08009009 	.word	0x08009009
 8008f50:	08009009 	.word	0x08009009
 8008f54:	08008fe1 	.word	0x08008fe1
 8008f58:	08009009 	.word	0x08009009
 8008f5c:	08009009 	.word	0x08009009
 8008f60:	08009009 	.word	0x08009009
 8008f64:	08009009 	.word	0x08009009
 8008f68:	08009009 	.word	0x08009009
 8008f6c:	08009009 	.word	0x08009009
 8008f70:	08009009 	.word	0x08009009
 8008f74:	08008fe9 	.word	0x08008fe9
 8008f78:	08009009 	.word	0x08009009
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009009 	.word	0x08009009
 8008f84:	08009009 	.word	0x08009009
 8008f88:	08009009 	.word	0x08009009
 8008f8c:	08009009 	.word	0x08009009
 8008f90:	08009009 	.word	0x08009009
 8008f94:	08008ff1 	.word	0x08008ff1
 8008f98:	08009009 	.word	0x08009009
 8008f9c:	08009009 	.word	0x08009009
 8008fa0:	08009009 	.word	0x08009009
 8008fa4:	08009009 	.word	0x08009009
 8008fa8:	08009009 	.word	0x08009009
 8008fac:	08009009 	.word	0x08009009
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	08008ff9 	.word	0x08008ff9
 8008fb8:	08009009 	.word	0x08009009
 8008fbc:	08009009 	.word	0x08009009
 8008fc0:	08009009 	.word	0x08009009
 8008fc4:	08009009 	.word	0x08009009
 8008fc8:	08009009 	.word	0x08009009
 8008fcc:	08009009 	.word	0x08009009
 8008fd0:	08009009 	.word	0x08009009
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e0d6      	b.n	800918e <UART_SetConfig+0x7ae>
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e0d2      	b.n	800918e <UART_SetConfig+0x7ae>
 8008fe8:	2308      	movs	r3, #8
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e0ce      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ff0:	2310      	movs	r3, #16
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e0ca      	b.n	800918e <UART_SetConfig+0x7ae>
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e0c6      	b.n	800918e <UART_SetConfig+0x7ae>
 8009000:	2340      	movs	r3, #64	@ 0x40
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e0c2      	b.n	800918e <UART_SetConfig+0x7ae>
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e0be      	b.n	800918e <UART_SetConfig+0x7ae>
 8009010:	40011400 	.word	0x40011400
 8009014:	58024400 	.word	0x58024400
 8009018:	40007800 	.word	0x40007800
 800901c:	40007c00 	.word	0x40007c00
 8009020:	40011800 	.word	0x40011800
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4aad      	ldr	r2, [pc, #692]	@ (80092e0 <UART_SetConfig+0x900>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d176      	bne.n	800911c <UART_SetConfig+0x73c>
 800902e:	4bad      	ldr	r3, [pc, #692]	@ (80092e4 <UART_SetConfig+0x904>)
 8009030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009036:	2b28      	cmp	r3, #40	@ 0x28
 8009038:	d86c      	bhi.n	8009114 <UART_SetConfig+0x734>
 800903a:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <UART_SetConfig+0x660>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	080090e5 	.word	0x080090e5
 8009044:	08009115 	.word	0x08009115
 8009048:	08009115 	.word	0x08009115
 800904c:	08009115 	.word	0x08009115
 8009050:	08009115 	.word	0x08009115
 8009054:	08009115 	.word	0x08009115
 8009058:	08009115 	.word	0x08009115
 800905c:	08009115 	.word	0x08009115
 8009060:	080090ed 	.word	0x080090ed
 8009064:	08009115 	.word	0x08009115
 8009068:	08009115 	.word	0x08009115
 800906c:	08009115 	.word	0x08009115
 8009070:	08009115 	.word	0x08009115
 8009074:	08009115 	.word	0x08009115
 8009078:	08009115 	.word	0x08009115
 800907c:	08009115 	.word	0x08009115
 8009080:	080090f5 	.word	0x080090f5
 8009084:	08009115 	.word	0x08009115
 8009088:	08009115 	.word	0x08009115
 800908c:	08009115 	.word	0x08009115
 8009090:	08009115 	.word	0x08009115
 8009094:	08009115 	.word	0x08009115
 8009098:	08009115 	.word	0x08009115
 800909c:	08009115 	.word	0x08009115
 80090a0:	080090fd 	.word	0x080090fd
 80090a4:	08009115 	.word	0x08009115
 80090a8:	08009115 	.word	0x08009115
 80090ac:	08009115 	.word	0x08009115
 80090b0:	08009115 	.word	0x08009115
 80090b4:	08009115 	.word	0x08009115
 80090b8:	08009115 	.word	0x08009115
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009105 	.word	0x08009105
 80090c4:	08009115 	.word	0x08009115
 80090c8:	08009115 	.word	0x08009115
 80090cc:	08009115 	.word	0x08009115
 80090d0:	08009115 	.word	0x08009115
 80090d4:	08009115 	.word	0x08009115
 80090d8:	08009115 	.word	0x08009115
 80090dc:	08009115 	.word	0x08009115
 80090e0:	0800910d 	.word	0x0800910d
 80090e4:	2301      	movs	r3, #1
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ea:	e050      	b.n	800918e <UART_SetConfig+0x7ae>
 80090ec:	2304      	movs	r3, #4
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f2:	e04c      	b.n	800918e <UART_SetConfig+0x7ae>
 80090f4:	2308      	movs	r3, #8
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fa:	e048      	b.n	800918e <UART_SetConfig+0x7ae>
 80090fc:	2310      	movs	r3, #16
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009102:	e044      	b.n	800918e <UART_SetConfig+0x7ae>
 8009104:	2320      	movs	r3, #32
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910a:	e040      	b.n	800918e <UART_SetConfig+0x7ae>
 800910c:	2340      	movs	r3, #64	@ 0x40
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e03c      	b.n	800918e <UART_SetConfig+0x7ae>
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e038      	b.n	800918e <UART_SetConfig+0x7ae>
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a71      	ldr	r2, [pc, #452]	@ (80092e8 <UART_SetConfig+0x908>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d130      	bne.n	8009188 <UART_SetConfig+0x7a8>
 8009126:	4b6f      	ldr	r3, [pc, #444]	@ (80092e4 <UART_SetConfig+0x904>)
 8009128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912a:	f003 0307 	and.w	r3, r3, #7
 800912e:	2b05      	cmp	r3, #5
 8009130:	d826      	bhi.n	8009180 <UART_SetConfig+0x7a0>
 8009132:	a201      	add	r2, pc, #4	@ (adr r2, 8009138 <UART_SetConfig+0x758>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	08009151 	.word	0x08009151
 800913c:	08009159 	.word	0x08009159
 8009140:	08009161 	.word	0x08009161
 8009144:	08009169 	.word	0x08009169
 8009148:	08009171 	.word	0x08009171
 800914c:	08009179 	.word	0x08009179
 8009150:	2302      	movs	r3, #2
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009156:	e01a      	b.n	800918e <UART_SetConfig+0x7ae>
 8009158:	2304      	movs	r3, #4
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e016      	b.n	800918e <UART_SetConfig+0x7ae>
 8009160:	2308      	movs	r3, #8
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009166:	e012      	b.n	800918e <UART_SetConfig+0x7ae>
 8009168:	2310      	movs	r3, #16
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916e:	e00e      	b.n	800918e <UART_SetConfig+0x7ae>
 8009170:	2320      	movs	r3, #32
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009176:	e00a      	b.n	800918e <UART_SetConfig+0x7ae>
 8009178:	2340      	movs	r3, #64	@ 0x40
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917e:	e006      	b.n	800918e <UART_SetConfig+0x7ae>
 8009180:	2380      	movs	r3, #128	@ 0x80
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009186:	e002      	b.n	800918e <UART_SetConfig+0x7ae>
 8009188:	2380      	movs	r3, #128	@ 0x80
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a55      	ldr	r2, [pc, #340]	@ (80092e8 <UART_SetConfig+0x908>)
 8009194:	4293      	cmp	r3, r2
 8009196:	f040 80f8 	bne.w	800938a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800919a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800919e:	2b20      	cmp	r3, #32
 80091a0:	dc46      	bgt.n	8009230 <UART_SetConfig+0x850>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	db75      	blt.n	8009292 <UART_SetConfig+0x8b2>
 80091a6:	3b02      	subs	r3, #2
 80091a8:	2b1e      	cmp	r3, #30
 80091aa:	d872      	bhi.n	8009292 <UART_SetConfig+0x8b2>
 80091ac:	a201      	add	r2, pc, #4	@ (adr r2, 80091b4 <UART_SetConfig+0x7d4>)
 80091ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b2:	bf00      	nop
 80091b4:	08009237 	.word	0x08009237
 80091b8:	08009293 	.word	0x08009293
 80091bc:	0800923f 	.word	0x0800923f
 80091c0:	08009293 	.word	0x08009293
 80091c4:	08009293 	.word	0x08009293
 80091c8:	08009293 	.word	0x08009293
 80091cc:	0800924f 	.word	0x0800924f
 80091d0:	08009293 	.word	0x08009293
 80091d4:	08009293 	.word	0x08009293
 80091d8:	08009293 	.word	0x08009293
 80091dc:	08009293 	.word	0x08009293
 80091e0:	08009293 	.word	0x08009293
 80091e4:	08009293 	.word	0x08009293
 80091e8:	08009293 	.word	0x08009293
 80091ec:	0800925f 	.word	0x0800925f
 80091f0:	08009293 	.word	0x08009293
 80091f4:	08009293 	.word	0x08009293
 80091f8:	08009293 	.word	0x08009293
 80091fc:	08009293 	.word	0x08009293
 8009200:	08009293 	.word	0x08009293
 8009204:	08009293 	.word	0x08009293
 8009208:	08009293 	.word	0x08009293
 800920c:	08009293 	.word	0x08009293
 8009210:	08009293 	.word	0x08009293
 8009214:	08009293 	.word	0x08009293
 8009218:	08009293 	.word	0x08009293
 800921c:	08009293 	.word	0x08009293
 8009220:	08009293 	.word	0x08009293
 8009224:	08009293 	.word	0x08009293
 8009228:	08009293 	.word	0x08009293
 800922c:	08009285 	.word	0x08009285
 8009230:	2b40      	cmp	r3, #64	@ 0x40
 8009232:	d02a      	beq.n	800928a <UART_SetConfig+0x8aa>
 8009234:	e02d      	b.n	8009292 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009236:	f7fd fde1 	bl	8006dfc <HAL_RCCEx_GetD3PCLK1Freq>
 800923a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800923c:	e02f      	b.n	800929e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800923e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd fdf0 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924c:	e027      	b.n	800929e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800924e:	f107 0318 	add.w	r3, r7, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fd ff3c 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925c:	e01f      	b.n	800929e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800925e:	4b21      	ldr	r3, [pc, #132]	@ (80092e4 <UART_SetConfig+0x904>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800926a:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <UART_SetConfig+0x904>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	08db      	lsrs	r3, r3, #3
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	4a1d      	ldr	r2, [pc, #116]	@ (80092ec <UART_SetConfig+0x90c>)
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800927c:	e00f      	b.n	800929e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800927e:	4b1b      	ldr	r3, [pc, #108]	@ (80092ec <UART_SetConfig+0x90c>)
 8009280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009282:	e00c      	b.n	800929e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009284:	4b1a      	ldr	r3, [pc, #104]	@ (80092f0 <UART_SetConfig+0x910>)
 8009286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009288:	e009      	b.n	800929e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009290:	e005      	b.n	800929e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800929c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800929e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 81ee 	beq.w	8009682 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092aa:	4a12      	ldr	r2, [pc, #72]	@ (80092f4 <UART_SetConfig+0x914>)
 80092ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	4413      	add	r3, r2
 80092c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d305      	bcc.n	80092d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d910      	bls.n	80092f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092dc:	e1d1      	b.n	8009682 <UART_SetConfig+0xca2>
 80092de:	bf00      	nop
 80092e0:	40011c00 	.word	0x40011c00
 80092e4:	58024400 	.word	0x58024400
 80092e8:	58000c00 	.word	0x58000c00
 80092ec:	03d09000 	.word	0x03d09000
 80092f0:	003d0900 	.word	0x003d0900
 80092f4:	0800f270 	.word	0x0800f270
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	2200      	movs	r2, #0
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	60fa      	str	r2, [r7, #12]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	4ac0      	ldr	r2, [pc, #768]	@ (8009608 <UART_SetConfig+0xc28>)
 8009306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800930a:	b29b      	uxth	r3, r3
 800930c:	2200      	movs	r2, #0
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800931a:	f7f7 f851 	bl	80003c0 <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	020b      	lsls	r3, r1, #8
 8009330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009334:	0202      	lsls	r2, r0, #8
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	6849      	ldr	r1, [r1, #4]
 800933a:	0849      	lsrs	r1, r1, #1
 800933c:	2000      	movs	r0, #0
 800933e:	460c      	mov	r4, r1
 8009340:	4605      	mov	r5, r0
 8009342:	eb12 0804 	adds.w	r8, r2, r4
 8009346:	eb43 0905 	adc.w	r9, r3, r5
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	469a      	mov	sl, r3
 8009352:	4693      	mov	fp, r2
 8009354:	4652      	mov	r2, sl
 8009356:	465b      	mov	r3, fp
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	f7f7 f830 	bl	80003c0 <__aeabi_uldivmod>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4613      	mov	r3, r2
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800936e:	d308      	bcc.n	8009382 <UART_SetConfig+0x9a2>
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009376:	d204      	bcs.n	8009382 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800937e:	60da      	str	r2, [r3, #12]
 8009380:	e17f      	b.n	8009682 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009388:	e17b      	b.n	8009682 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009392:	f040 80bd 	bne.w	8009510 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009396:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800939a:	2b20      	cmp	r3, #32
 800939c:	dc48      	bgt.n	8009430 <UART_SetConfig+0xa50>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db7b      	blt.n	800949a <UART_SetConfig+0xaba>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d879      	bhi.n	800949a <UART_SetConfig+0xaba>
 80093a6:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <UART_SetConfig+0x9cc>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	08009437 	.word	0x08009437
 80093b0:	0800943f 	.word	0x0800943f
 80093b4:	0800949b 	.word	0x0800949b
 80093b8:	0800949b 	.word	0x0800949b
 80093bc:	08009447 	.word	0x08009447
 80093c0:	0800949b 	.word	0x0800949b
 80093c4:	0800949b 	.word	0x0800949b
 80093c8:	0800949b 	.word	0x0800949b
 80093cc:	08009457 	.word	0x08009457
 80093d0:	0800949b 	.word	0x0800949b
 80093d4:	0800949b 	.word	0x0800949b
 80093d8:	0800949b 	.word	0x0800949b
 80093dc:	0800949b 	.word	0x0800949b
 80093e0:	0800949b 	.word	0x0800949b
 80093e4:	0800949b 	.word	0x0800949b
 80093e8:	0800949b 	.word	0x0800949b
 80093ec:	08009467 	.word	0x08009467
 80093f0:	0800949b 	.word	0x0800949b
 80093f4:	0800949b 	.word	0x0800949b
 80093f8:	0800949b 	.word	0x0800949b
 80093fc:	0800949b 	.word	0x0800949b
 8009400:	0800949b 	.word	0x0800949b
 8009404:	0800949b 	.word	0x0800949b
 8009408:	0800949b 	.word	0x0800949b
 800940c:	0800949b 	.word	0x0800949b
 8009410:	0800949b 	.word	0x0800949b
 8009414:	0800949b 	.word	0x0800949b
 8009418:	0800949b 	.word	0x0800949b
 800941c:	0800949b 	.word	0x0800949b
 8009420:	0800949b 	.word	0x0800949b
 8009424:	0800949b 	.word	0x0800949b
 8009428:	0800949b 	.word	0x0800949b
 800942c:	0800948d 	.word	0x0800948d
 8009430:	2b40      	cmp	r3, #64	@ 0x40
 8009432:	d02e      	beq.n	8009492 <UART_SetConfig+0xab2>
 8009434:	e031      	b.n	800949a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009436:	f7fb fe01 	bl	800503c <HAL_RCC_GetPCLK1Freq>
 800943a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800943c:	e033      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800943e:	f7fb fe13 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8009442:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009444:	e02f      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800944a:	4618      	mov	r0, r3
 800944c:	f7fd fcec 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009454:	e027      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009456:	f107 0318 	add.w	r3, r7, #24
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd fe38 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009464:	e01f      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009466:	4b69      	ldr	r3, [pc, #420]	@ (800960c <UART_SetConfig+0xc2c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009472:	4b66      	ldr	r3, [pc, #408]	@ (800960c <UART_SetConfig+0xc2c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	08db      	lsrs	r3, r3, #3
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	4a64      	ldr	r2, [pc, #400]	@ (8009610 <UART_SetConfig+0xc30>)
 800947e:	fa22 f303 	lsr.w	r3, r2, r3
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009484:	e00f      	b.n	80094a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009486:	4b62      	ldr	r3, [pc, #392]	@ (8009610 <UART_SetConfig+0xc30>)
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948a:	e00c      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800948c:	4b61      	ldr	r3, [pc, #388]	@ (8009614 <UART_SetConfig+0xc34>)
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009490:	e009      	b.n	80094a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009498:	e005      	b.n	80094a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80ea 	beq.w	8009682 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b2:	4a55      	ldr	r2, [pc, #340]	@ (8009608 <UART_SetConfig+0xc28>)
 80094b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094b8:	461a      	mov	r2, r3
 80094ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80094c0:	005a      	lsls	r2, r3, #1
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	085b      	lsrs	r3, r3, #1
 80094c8:	441a      	add	r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d916      	bls.n	8009508 <UART_SetConfig+0xb28>
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e0:	d212      	bcs.n	8009508 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f023 030f 	bic.w	r3, r3, #15
 80094ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094fa:	4313      	orrs	r3, r2
 80094fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	e0bc      	b.n	8009682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800950e:	e0b8      	b.n	8009682 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009510:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009514:	2b20      	cmp	r3, #32
 8009516:	dc4b      	bgt.n	80095b0 <UART_SetConfig+0xbd0>
 8009518:	2b00      	cmp	r3, #0
 800951a:	f2c0 8087 	blt.w	800962c <UART_SetConfig+0xc4c>
 800951e:	2b20      	cmp	r3, #32
 8009520:	f200 8084 	bhi.w	800962c <UART_SetConfig+0xc4c>
 8009524:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <UART_SetConfig+0xb4c>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	080095b7 	.word	0x080095b7
 8009530:	080095bf 	.word	0x080095bf
 8009534:	0800962d 	.word	0x0800962d
 8009538:	0800962d 	.word	0x0800962d
 800953c:	080095c7 	.word	0x080095c7
 8009540:	0800962d 	.word	0x0800962d
 8009544:	0800962d 	.word	0x0800962d
 8009548:	0800962d 	.word	0x0800962d
 800954c:	080095d7 	.word	0x080095d7
 8009550:	0800962d 	.word	0x0800962d
 8009554:	0800962d 	.word	0x0800962d
 8009558:	0800962d 	.word	0x0800962d
 800955c:	0800962d 	.word	0x0800962d
 8009560:	0800962d 	.word	0x0800962d
 8009564:	0800962d 	.word	0x0800962d
 8009568:	0800962d 	.word	0x0800962d
 800956c:	080095e7 	.word	0x080095e7
 8009570:	0800962d 	.word	0x0800962d
 8009574:	0800962d 	.word	0x0800962d
 8009578:	0800962d 	.word	0x0800962d
 800957c:	0800962d 	.word	0x0800962d
 8009580:	0800962d 	.word	0x0800962d
 8009584:	0800962d 	.word	0x0800962d
 8009588:	0800962d 	.word	0x0800962d
 800958c:	0800962d 	.word	0x0800962d
 8009590:	0800962d 	.word	0x0800962d
 8009594:	0800962d 	.word	0x0800962d
 8009598:	0800962d 	.word	0x0800962d
 800959c:	0800962d 	.word	0x0800962d
 80095a0:	0800962d 	.word	0x0800962d
 80095a4:	0800962d 	.word	0x0800962d
 80095a8:	0800962d 	.word	0x0800962d
 80095ac:	0800961f 	.word	0x0800961f
 80095b0:	2b40      	cmp	r3, #64	@ 0x40
 80095b2:	d037      	beq.n	8009624 <UART_SetConfig+0xc44>
 80095b4:	e03a      	b.n	800962c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b6:	f7fb fd41 	bl	800503c <HAL_RCC_GetPCLK1Freq>
 80095ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095bc:	e03c      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095be:	f7fb fd53 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 80095c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095c4:	e038      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd fc2c 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d4:	e030      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d6:	f107 0318 	add.w	r3, r7, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd fd78 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e4:	e028      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e6:	4b09      	ldr	r3, [pc, #36]	@ (800960c <UART_SetConfig+0xc2c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d012      	beq.n	8009618 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f2:	4b06      	ldr	r3, [pc, #24]	@ (800960c <UART_SetConfig+0xc2c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	08db      	lsrs	r3, r3, #3
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	4a04      	ldr	r2, [pc, #16]	@ (8009610 <UART_SetConfig+0xc30>)
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009604:	e018      	b.n	8009638 <UART_SetConfig+0xc58>
 8009606:	bf00      	nop
 8009608:	0800f270 	.word	0x0800f270
 800960c:	58024400 	.word	0x58024400
 8009610:	03d09000 	.word	0x03d09000
 8009614:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009618:	4b24      	ldr	r3, [pc, #144]	@ (80096ac <UART_SetConfig+0xccc>)
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e00c      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800961e:	4b24      	ldr	r3, [pc, #144]	@ (80096b0 <UART_SetConfig+0xcd0>)
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009622:	e009      	b.n	8009638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962a:	e005      	b.n	8009638 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009636:	bf00      	nop
    }

    if (pclk != 0U)
 8009638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d021      	beq.n	8009682 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	4a1c      	ldr	r2, [pc, #112]	@ (80096b4 <UART_SetConfig+0xcd4>)
 8009644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009648:	461a      	mov	r2, r3
 800964a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	441a      	add	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	2b0f      	cmp	r3, #15
 8009666:	d909      	bls.n	800967c <UART_SetConfig+0xc9c>
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800966e:	d205      	bcs.n	800967c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	b29a      	uxth	r2, r3
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	e002      	b.n	8009682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2201      	movs	r2, #1
 8009686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2201      	movs	r2, #1
 800968e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2200      	movs	r2, #0
 800969c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800969e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3748      	adds	r7, #72	@ 0x48
 80096a6:	46bd      	mov	sp, r7
 80096a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096ac:	03d09000 	.word	0x03d09000
 80096b0:	003d0900 	.word	0x003d0900
 80096b4:	0800f270 	.word	0x0800f270

080096b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	f003 0304 	and.w	r3, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01a      	beq.n	80097ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b6:	d10a      	bne.n	80097ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b098      	sub	sp, #96	@ 0x60
 8009800:	af02      	add	r7, sp, #8
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800980c:	f7f8 ffd8 	bl	80027c0 <HAL_GetTick>
 8009810:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b08      	cmp	r3, #8
 800981e:	d12f      	bne.n	8009880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009828:	2200      	movs	r2, #0
 800982a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f88e 	bl	8009950 <UART_WaitOnFlagUntilTimeout>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d022      	beq.n	8009880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800984e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009858:	647b      	str	r3, [r7, #68]	@ 0x44
 800985a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800985e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e6      	bne.n	800983a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e063      	b.n	8009948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d149      	bne.n	8009922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800988e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009896:	2200      	movs	r2, #0
 8009898:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f857 	bl	8009950 <UART_WaitOnFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d03c      	beq.n	8009922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	623b      	str	r3, [r7, #32]
   return(result);
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80098c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e6      	bne.n	80098a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098fa:	61fa      	str	r2, [r7, #28]
 80098fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	69b9      	ldr	r1, [r7, #24]
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	617b      	str	r3, [r7, #20]
   return(result);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e5      	bne.n	80098da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e012      	b.n	8009948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3758      	adds	r7, #88	@ 0x58
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	4613      	mov	r3, r2
 800995e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009960:	e04f      	b.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009968:	d04b      	beq.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800996a:	f7f8 ff29 	bl	80027c0 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	429a      	cmp	r2, r3
 8009978:	d302      	bcc.n	8009980 <UART_WaitOnFlagUntilTimeout+0x30>
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e04e      	b.n	8009a22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d037      	beq.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b80      	cmp	r3, #128	@ 0x80
 8009996:	d034      	beq.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b40      	cmp	r3, #64	@ 0x40
 800999c:	d031      	beq.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d110      	bne.n	80099ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2208      	movs	r2, #8
 80099b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f839 	bl	8009a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2208      	movs	r2, #8
 80099be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e029      	b.n	8009a22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099dc:	d111      	bne.n	8009a02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 f81f 	bl	8009a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e00f      	b.n	8009a22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69da      	ldr	r2, [r3, #28]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	bf0c      	ite	eq
 8009a12:	2301      	moveq	r3, #1
 8009a14:	2300      	movne	r3, #0
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d0a0      	beq.n	8009962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b095      	sub	sp, #84	@ 0x54
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e6      	bne.n	8009a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	4b1e      	ldr	r3, [pc, #120]	@ (8009af4 <UART_EndRxTransfer+0xc8>)
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d118      	bne.n	8009ad4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f023 0310 	bic.w	r3, r3, #16
 8009ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	6979      	ldr	r1, [r7, #20]
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e6      	bne.n	8009aa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ae8:	bf00      	nop
 8009aea:	3754      	adds	r7, #84	@ 0x54
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	effffffe 	.word	0xeffffffe

08009af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UARTEx_DisableFifoMode+0x16>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e027      	b.n	8009b5e <HAL_UARTEx_DisableFifoMode+0x66>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2224      	movs	r2, #36	@ 0x24
 8009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0201 	bic.w	r2, r2, #1
 8009b34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e02d      	b.n	8009bde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2224      	movs	r2, #36	@ 0x24
 8009b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f850 	bl	8009c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e02d      	b.n	8009c5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2224      	movs	r2, #36	@ 0x24
 8009c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0201 	bic.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f812 	bl	8009c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d108      	bne.n	8009c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c84:	e031      	b.n	8009cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c86:	2310      	movs	r3, #16
 8009c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c8a:	2310      	movs	r3, #16
 8009c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	0e5b      	lsrs	r3, r3, #25
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	0f5b      	lsrs	r3, r3, #29
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	7b3a      	ldrb	r2, [r7, #12]
 8009cb2:	4911      	ldr	r1, [pc, #68]	@ (8009cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8009cb4:	5c8a      	ldrb	r2, [r1, r2]
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cba:	7b3a      	ldrb	r2, [r7, #12]
 8009cbc:	490f      	ldr	r1, [pc, #60]	@ (8009cfc <UARTEx_SetNbDataToProcess+0x98>)
 8009cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	7b7a      	ldrb	r2, [r7, #13]
 8009cd0:	4909      	ldr	r1, [pc, #36]	@ (8009cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8009cd2:	5c8a      	ldrb	r2, [r1, r2]
 8009cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cd8:	7b7a      	ldrb	r2, [r7, #13]
 8009cda:	4908      	ldr	r1, [pc, #32]	@ (8009cfc <UARTEx_SetNbDataToProcess+0x98>)
 8009cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	0800f288 	.word	0x0800f288
 8009cfc:	0800f290 	.word	0x0800f290

08009d00 <__NVIC_SetPriority>:
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	6039      	str	r1, [r7, #0]
 8009d0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db0a      	blt.n	8009d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	490c      	ldr	r1, [pc, #48]	@ (8009d4c <__NVIC_SetPriority+0x4c>)
 8009d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d1e:	0112      	lsls	r2, r2, #4
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	440b      	add	r3, r1
 8009d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d28:	e00a      	b.n	8009d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	4908      	ldr	r1, [pc, #32]	@ (8009d50 <__NVIC_SetPriority+0x50>)
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	3b04      	subs	r3, #4
 8009d38:	0112      	lsls	r2, r2, #4
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	761a      	strb	r2, [r3, #24]
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	e000e100 	.word	0xe000e100
 8009d50:	e000ed00 	.word	0xe000ed00

08009d54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d58:	4b05      	ldr	r3, [pc, #20]	@ (8009d70 <SysTick_Handler+0x1c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d5c:	f001 fd46 	bl	800b7ec <xTaskGetSchedulerState>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d001      	beq.n	8009d6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d66:	f002 fb3f 	bl	800c3e8 <xPortSysTickHandler>
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	e000e010 	.word	0xe000e010

08009d74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d78:	2100      	movs	r1, #0
 8009d7a:	f06f 0004 	mvn.w	r0, #4
 8009d7e:	f7ff ffbf 	bl	8009d00 <__NVIC_SetPriority>
#endif
}
 8009d82:	bf00      	nop
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d8e:	f3ef 8305 	mrs	r3, IPSR
 8009d92:	603b      	str	r3, [r7, #0]
  return(result);
 8009d94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d9a:	f06f 0305 	mvn.w	r3, #5
 8009d9e:	607b      	str	r3, [r7, #4]
 8009da0:	e00c      	b.n	8009dbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009da2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <osKernelInitialize+0x44>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009daa:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <osKernelInitialize+0x44>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	e002      	b.n	8009dbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dbc:	687b      	ldr	r3, [r7, #4]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	240015c4 	.word	0x240015c4

08009dd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd6:	f3ef 8305 	mrs	r3, IPSR
 8009dda:	603b      	str	r3, [r7, #0]
  return(result);
 8009ddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <osKernelStart+0x1a>
    stat = osErrorISR;
 8009de2:	f06f 0305 	mvn.w	r3, #5
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	e010      	b.n	8009e0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009dea:	4b0b      	ldr	r3, [pc, #44]	@ (8009e18 <osKernelStart+0x48>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d109      	bne.n	8009e06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009df2:	f7ff ffbf 	bl	8009d74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009df6:	4b08      	ldr	r3, [pc, #32]	@ (8009e18 <osKernelStart+0x48>)
 8009df8:	2202      	movs	r2, #2
 8009dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009dfc:	f001 f892 	bl	800af24 <vTaskStartScheduler>
      stat = osOK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	607b      	str	r3, [r7, #4]
 8009e04:	e002      	b.n	8009e0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e0c:	687b      	ldr	r3, [r7, #4]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	240015c4 	.word	0x240015c4

08009e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08e      	sub	sp, #56	@ 0x38
 8009e20:	af04      	add	r7, sp, #16
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e2c:	f3ef 8305 	mrs	r3, IPSR
 8009e30:	617b      	str	r3, [r7, #20]
  return(result);
 8009e32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d17e      	bne.n	8009f36 <osThreadNew+0x11a>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d07b      	beq.n	8009f36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e3e:	2380      	movs	r3, #128	@ 0x80
 8009e40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e42:	2318      	movs	r3, #24
 8009e44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d045      	beq.n	8009ee2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <osThreadNew+0x48>
        name = attr->name;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d008      	beq.n	8009e8a <osThreadNew+0x6e>
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	2b38      	cmp	r3, #56	@ 0x38
 8009e7c:	d805      	bhi.n	8009e8a <osThreadNew+0x6e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <osThreadNew+0x72>
        return (NULL);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e054      	b.n	8009f38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	089b      	lsrs	r3, r3, #2
 8009e9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00e      	beq.n	8009ec4 <osThreadNew+0xa8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	2ba7      	cmp	r3, #167	@ 0xa7
 8009eac:	d90a      	bls.n	8009ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <osThreadNew+0xa8>
        mem = 1;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	e010      	b.n	8009ee6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10c      	bne.n	8009ee6 <osThreadNew+0xca>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d108      	bne.n	8009ee6 <osThreadNew+0xca>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <osThreadNew+0xca>
          mem = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	61bb      	str	r3, [r7, #24]
 8009ee0:	e001      	b.n	8009ee6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d110      	bne.n	8009f0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ef4:	9202      	str	r2, [sp, #8]
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	6a3a      	ldr	r2, [r7, #32]
 8009f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fe1a 	bl	800ab3c <xTaskCreateStatic>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	e013      	b.n	8009f36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d110      	bne.n	8009f36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fe68 	bl	800abfc <xTaskCreate>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d001      	beq.n	8009f36 <osThreadNew+0x11a>
            hTask = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f36:	693b      	ldr	r3, [r7, #16]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3728      	adds	r7, #40	@ 0x28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f48:	f3ef 8305 	mrs	r3, IPSR
 8009f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <osDelay+0x1c>
    stat = osErrorISR;
 8009f54:	f06f 0305 	mvn.w	r3, #5
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e007      	b.n	8009f6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 ffa6 	bl	800aeb8 <vTaskDelay>
    }
  }

  return (stat);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a07      	ldr	r2, [pc, #28]	@ (8009fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	4a06      	ldr	r2, [pc, #24]	@ (8009fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8009f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2280      	movs	r2, #128	@ 0x80
 8009f94:	601a      	str	r2, [r3, #0]
}
 8009f96:	bf00      	nop
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	240015c8 	.word	0x240015c8
 8009fa8:	24001670 	.word	0x24001670

08009fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4a07      	ldr	r2, [pc, #28]	@ (8009fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	4a06      	ldr	r2, [pc, #24]	@ (8009fdc <vApplicationGetTimerTaskMemory+0x30>)
 8009fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fca:	601a      	str	r2, [r3, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	24001870 	.word	0x24001870
 8009fdc:	24001918 	.word	0x24001918

08009fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f103 0208 	add.w	r2, r3, #8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f103 0208 	add.w	r2, r3, #8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f103 0208 	add.w	r2, r3, #8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a082:	b480      	push	{r7}
 800a084:	b085      	sub	sp, #20
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a098:	d103      	bne.n	800a0a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	e00c      	b.n	800a0bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e002      	b.n	800a0b0 <vListInsert+0x2e>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d2f6      	bcs.n	800a0aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6892      	ldr	r2, [r2, #8]
 800a10a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	6852      	ldr	r2, [r2, #4]
 800a114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d103      	bne.n	800a128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689a      	ldr	r2, [r3, #8]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	1e5a      	subs	r2, r3, #1
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a16e:	bf00      	nop
 800a170:	bf00      	nop
 800a172:	e7fd      	b.n	800a170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a174:	f002 f8a8 	bl	800c2c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a180:	68f9      	ldr	r1, [r7, #12]
 800a182:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a184:	fb01 f303 	mul.w	r3, r1, r3
 800a188:	441a      	add	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	68f9      	ldr	r1, [r7, #12]
 800a1a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a1aa:	fb01 f303 	mul.w	r3, r1, r3
 800a1ae:	441a      	add	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	22ff      	movs	r2, #255	@ 0xff
 800a1b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	22ff      	movs	r2, #255	@ 0xff
 800a1c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d114      	bne.n	800a1f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01a      	beq.n	800a208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3310      	adds	r3, #16
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 f942 	bl	800b460 <xTaskRemoveFromEventList>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d012      	beq.n	800a208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a218 <xQueueGenericReset+0xd0>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	e009      	b.n	800a208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3310      	adds	r3, #16
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fef1 	bl	8009fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3324      	adds	r3, #36	@ 0x24
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff feec 	bl	8009fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a208:	f002 f890 	bl	800c32c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a20c:	2301      	movs	r3, #1
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	@ 0x38
 800a220:	af02      	add	r7, sp, #8
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10b      	bne.n	800a248 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	e7fd      	b.n	800a244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10b      	bne.n	800a266 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a260:	bf00      	nop
 800a262:	bf00      	nop
 800a264:	e7fd      	b.n	800a262 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <xQueueGenericCreateStatic+0x56>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <xQueueGenericCreateStatic+0x5a>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <xQueueGenericCreateStatic+0x5c>
 800a276:	2300      	movs	r3, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10b      	bne.n	800a294 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	623b      	str	r3, [r7, #32]
}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	e7fd      	b.n	800a290 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d102      	bne.n	800a2a0 <xQueueGenericCreateStatic+0x84>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <xQueueGenericCreateStatic+0x88>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <xQueueGenericCreateStatic+0x8a>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10b      	bne.n	800a2c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	61fb      	str	r3, [r7, #28]
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	e7fd      	b.n	800a2be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2c2:	2350      	movs	r3, #80	@ 0x50
 800a2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b50      	cmp	r3, #80	@ 0x50
 800a2ca:	d00b      	beq.n	800a2e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	61bb      	str	r3, [r7, #24]
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00d      	beq.n	800a30c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4613      	mov	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f805 	bl	800a316 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a30e:	4618      	mov	r0, r3
 800a310:	3730      	adds	r7, #48	@ 0x30
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e002      	b.n	800a338 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a344:	2101      	movs	r1, #1
 800a346:	69b8      	ldr	r0, [r7, #24]
 800a348:	f7ff fefe 	bl	800a148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	@ 0x38
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a36a:	2300      	movs	r3, #0
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10b      	bne.n	800a390 <xQueueGenericSend+0x34>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	e7fd      	b.n	800a38c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d103      	bne.n	800a39e <xQueueGenericSend+0x42>
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <xQueueGenericSend+0x46>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e000      	b.n	800a3a4 <xQueueGenericSend+0x48>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <xQueueGenericSend+0x64>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	e7fd      	b.n	800a3bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d103      	bne.n	800a3ce <xQueueGenericSend+0x72>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <xQueueGenericSend+0x76>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <xQueueGenericSend+0x78>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10b      	bne.n	800a3f0 <xQueueGenericSend+0x94>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	623b      	str	r3, [r7, #32]
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	e7fd      	b.n	800a3ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3f0:	f001 f9fc 	bl	800b7ec <xTaskGetSchedulerState>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d102      	bne.n	800a400 <xQueueGenericSend+0xa4>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <xQueueGenericSend+0xa8>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <xQueueGenericSend+0xaa>
 800a404:	2300      	movs	r3, #0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10b      	bne.n	800a422 <xQueueGenericSend+0xc6>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	61fb      	str	r3, [r7, #28]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a422:	f001 ff51 	bl	800c2c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42e:	429a      	cmp	r2, r3
 800a430:	d302      	bcc.n	800a438 <xQueueGenericSend+0xdc>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d129      	bne.n	800a48c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	68b9      	ldr	r1, [r7, #8]
 800a43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a43e:	f000 fa0f 	bl	800a860 <prvCopyDataToQueue>
 800a442:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	3324      	adds	r3, #36	@ 0x24
 800a450:	4618      	mov	r0, r3
 800a452:	f001 f805 	bl	800b460 <xTaskRemoveFromEventList>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d013      	beq.n	800a484 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a45c:	4b3f      	ldr	r3, [pc, #252]	@ (800a55c <xQueueGenericSend+0x200>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	e00a      	b.n	800a484 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a474:	4b39      	ldr	r3, [pc, #228]	@ (800a55c <xQueueGenericSend+0x200>)
 800a476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a484:	f001 ff52 	bl	800c32c <vPortExitCritical>
				return pdPASS;
 800a488:	2301      	movs	r3, #1
 800a48a:	e063      	b.n	800a554 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d103      	bne.n	800a49a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a492:	f001 ff4b 	bl	800c32c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a496:	2300      	movs	r3, #0
 800a498:	e05c      	b.n	800a554 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 f83f 	bl	800b528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4ae:	f001 ff3d 	bl	800c32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4b2:	f000 fda7 	bl	800b004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4b6:	f001 ff07 	bl	800c2c8 <vPortEnterCritical>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4c0:	b25b      	sxtb	r3, r3
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4c6:	d103      	bne.n	800a4d0 <xQueueGenericSend+0x174>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSend+0x18a>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4e6:	f001 ff21 	bl	800c32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ea:	1d3a      	adds	r2, r7, #4
 800a4ec:	f107 0314 	add.w	r3, r7, #20
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 f82e 	bl	800b554 <xTaskCheckForTimeOut>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d124      	bne.n	800a548 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a500:	f000 faa6 	bl	800aa50 <prvIsQueueFull>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d018      	beq.n	800a53c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	3310      	adds	r3, #16
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f000 ff52 	bl	800b3bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a51a:	f000 fa31 	bl	800a980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a51e:	f000 fd7f 	bl	800b020 <xTaskResumeAll>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f af7c 	bne.w	800a422 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a52a:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <xQueueGenericSend+0x200>)
 800a52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	e772      	b.n	800a422 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a53c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53e:	f000 fa1f 	bl	800a980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a542:	f000 fd6d 	bl	800b020 <xTaskResumeAll>
 800a546:	e76c      	b.n	800a422 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a54a:	f000 fa19 	bl	800a980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a54e:	f000 fd67 	bl	800b020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a554:	4618      	mov	r0, r3
 800a556:	3738      	adds	r7, #56	@ 0x38
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	e000ed04 	.word	0xe000ed04

0800a560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b090      	sub	sp, #64	@ 0x40
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <xQueueGenericSendFromISR+0x3e>
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueGenericSendFromISR+0x42>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueGenericSendFromISR+0x44>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d103      	bne.n	800a5ce <xQueueGenericSendFromISR+0x6e>
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x72>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <xQueueGenericSendFromISR+0x74>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5f0:	f001 ff4a 	bl	800c488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5f4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61fa      	str	r2, [r7, #28]
 800a60a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a60c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	429a      	cmp	r2, r3
 800a61a:	d302      	bcc.n	800a622 <xQueueGenericSendFromISR+0xc2>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d12f      	bne.n	800a682 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a638:	f000 f912 	bl	800a860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a63c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a644:	d112      	bne.n	800a66c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d016      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a650:	3324      	adds	r3, #36	@ 0x24
 800a652:	4618      	mov	r0, r3
 800a654:	f000 ff04 	bl	800b460 <xTaskRemoveFromEventList>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00e      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e007      	b.n	800a67c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a66c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a670:	3301      	adds	r3, #1
 800a672:	b2db      	uxtb	r3, r3
 800a674:	b25a      	sxtb	r2, r3
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a67c:	2301      	movs	r3, #1
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a680:	e001      	b.n	800a686 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a688:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a694:	4618      	mov	r0, r3
 800a696:	3740      	adds	r7, #64	@ 0x40
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	@ 0x30
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <xQueueReceive+0x32>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	623b      	str	r3, [r7, #32]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <xQueueReceive+0x40>
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <xQueueReceive+0x44>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <xQueueReceive+0x46>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <xQueueReceive+0x62>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	61fb      	str	r3, [r7, #28]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6fe:	f001 f875 	bl	800b7ec <xTaskGetSchedulerState>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <xQueueReceive+0x72>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <xQueueReceive+0x76>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <xQueueReceive+0x78>
 800a712:	2300      	movs	r3, #0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10b      	bne.n	800a730 <xQueueReceive+0x94>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	61bb      	str	r3, [r7, #24]
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	e7fd      	b.n	800a72c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a730:	f001 fdca 	bl	800c2c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01f      	beq.n	800a780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a740:	68b9      	ldr	r1, [r7, #8]
 800a742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a744:	f000 f8f6 	bl	800a934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	1e5a      	subs	r2, r3, #1
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75a:	3310      	adds	r3, #16
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fe7f 	bl	800b460 <xTaskRemoveFromEventList>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d007      	beq.n	800a778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a768:	4b3c      	ldr	r3, [pc, #240]	@ (800a85c <xQueueReceive+0x1c0>)
 800a76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a778:	f001 fdd8 	bl	800c32c <vPortExitCritical>
				return pdPASS;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e069      	b.n	800a854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a786:	f001 fdd1 	bl	800c32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e062      	b.n	800a854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d106      	bne.n	800a7a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 fec5 	bl	800b528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7a2:	f001 fdc3 	bl	800c32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a6:	f000 fc2d 	bl	800b004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7aa:	f001 fd8d 	bl	800c2c8 <vPortEnterCritical>
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7b4:	b25b      	sxtb	r3, r3
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ba:	d103      	bne.n	800a7c4 <xQueueReceive+0x128>
 800a7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ca:	b25b      	sxtb	r3, r3
 800a7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7d0:	d103      	bne.n	800a7da <xQueueReceive+0x13e>
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7da:	f001 fda7 	bl	800c32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7de:	1d3a      	adds	r2, r7, #4
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 feb4 	bl	800b554 <xTaskCheckForTimeOut>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d123      	bne.n	800a83a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f4:	f000 f916 	bl	800aa24 <prvIsQueueEmpty>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d017      	beq.n	800a82e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	3324      	adds	r3, #36	@ 0x24
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fdd8 	bl	800b3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a80c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a80e:	f000 f8b7 	bl	800a980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a812:	f000 fc05 	bl	800b020 <xTaskResumeAll>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d189      	bne.n	800a730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a81c:	4b0f      	ldr	r3, [pc, #60]	@ (800a85c <xQueueReceive+0x1c0>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	e780      	b.n	800a730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a830:	f000 f8a6 	bl	800a980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a834:	f000 fbf4 	bl	800b020 <xTaskResumeAll>
 800a838:	e77a      	b.n	800a730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a83a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a83c:	f000 f8a0 	bl	800a980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a840:	f000 fbee 	bl	800b020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a846:	f000 f8ed 	bl	800aa24 <prvIsQueueEmpty>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f43f af6f 	beq.w	800a730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a854:	4618      	mov	r0, r3
 800a856:	3730      	adds	r7, #48	@ 0x30
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10d      	bne.n	800a89a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d14d      	bne.n	800a922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 ffcc 	bl	800b828 <xTaskPriorityDisinherit>
 800a890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	e043      	b.n	800a922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d119      	bne.n	800a8d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6858      	ldr	r0, [r3, #4]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	f002 fedb 	bl	800d666 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b8:	441a      	add	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d32b      	bcc.n	800a922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	e026      	b.n	800a922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68d8      	ldr	r0, [r3, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8dc:	461a      	mov	r2, r3
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	f002 fec1 	bl	800d666 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	441a      	add	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d207      	bcs.n	800a910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a908:	425b      	negs	r3, r3
 800a90a:	441a      	add	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d105      	bne.n	800a922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3b01      	subs	r3, #1
 800a920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a92a:	697b      	ldr	r3, [r7, #20]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d018      	beq.n	800a978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94e:	441a      	add	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d303      	bcc.n	800a968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68d9      	ldr	r1, [r3, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a970:	461a      	mov	r2, r3
 800a972:	6838      	ldr	r0, [r7, #0]
 800a974:	f002 fe77 	bl	800d666 <memcpy>
	}
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a988:	f001 fc9e 	bl	800c2c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a994:	e011      	b.n	800a9ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d012      	beq.n	800a9c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3324      	adds	r3, #36	@ 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fd5c 	bl	800b460 <xTaskRemoveFromEventList>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9ae:	f000 fe35 	bl	800b61c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dce9      	bgt.n	800a996 <prvUnlockQueue+0x16>
 800a9c2:	e000      	b.n	800a9c6 <prvUnlockQueue+0x46>
					break;
 800a9c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	22ff      	movs	r2, #255	@ 0xff
 800a9ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9ce:	f001 fcad 	bl	800c32c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9d2:	f001 fc79 	bl	800c2c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9de:	e011      	b.n	800aa04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d012      	beq.n	800aa0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3310      	adds	r3, #16
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fd37 	bl	800b460 <xTaskRemoveFromEventList>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9f8:	f000 fe10 	bl	800b61c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dce9      	bgt.n	800a9e0 <prvUnlockQueue+0x60>
 800aa0c:	e000      	b.n	800aa10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	22ff      	movs	r2, #255	@ 0xff
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa18:	f001 fc88 	bl	800c32c <vPortExitCritical>
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa2c:	f001 fc4c 	bl	800c2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e001      	b.n	800aa42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa42:	f001 fc73 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa58:	f001 fc36 	bl	800c2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d102      	bne.n	800aa6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	e001      	b.n	800aa72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa72:	f001 fc5b 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800aa76:	68fb      	ldr	r3, [r7, #12]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e014      	b.n	800aaba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa90:	4a0f      	ldr	r2, [pc, #60]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10b      	bne.n	800aab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa9c:	490c      	ldr	r1, [pc, #48]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaa6:	4a0a      	ldr	r2, [pc, #40]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4413      	add	r3, r2
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aab2:	e006      	b.n	800aac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b07      	cmp	r3, #7
 800aabe:	d9e7      	bls.n	800aa90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	24001d18 	.word	0x24001d18

0800aad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aae4:	f001 fbf0 	bl	800c2c8 <vPortEnterCritical>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaee:	b25b      	sxtb	r3, r3
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaf4:	d103      	bne.n	800aafe <vQueueWaitForMessageRestricted+0x2a>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab04:	b25b      	sxtb	r3, r3
 800ab06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab0a:	d103      	bne.n	800ab14 <vQueueWaitForMessageRestricted+0x40>
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab14:	f001 fc0a 	bl	800c32c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	3324      	adds	r3, #36	@ 0x24
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fc6d 	bl	800b408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab2e:	6978      	ldr	r0, [r7, #20]
 800ab30:	f7ff ff26 	bl	800a980 <prvUnlockQueue>
	}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08e      	sub	sp, #56	@ 0x38
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	623b      	str	r3, [r7, #32]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	61fb      	str	r3, [r7, #28]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab86:	23a8      	movs	r3, #168	@ 0xa8
 800ab88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ab8e:	d00b      	beq.n	800aba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	61bb      	str	r3, [r7, #24]
}
 800aba2:	bf00      	nop
 800aba4:	bf00      	nop
 800aba6:	e7fd      	b.n	800aba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01e      	beq.n	800abee <xTaskCreateStatic+0xb2>
 800abb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01b      	beq.n	800abee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abc8:	2300      	movs	r3, #0
 800abca:	9303      	str	r3, [sp, #12]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f851 	bl	800ac88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abe8:	f000 f8f6 	bl	800add8 <prvAddNewTaskToReadyList>
 800abec:	e001      	b.n	800abf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abf2:	697b      	ldr	r3, [r7, #20]
	}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3728      	adds	r7, #40	@ 0x28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08c      	sub	sp, #48	@ 0x30
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac0c:	88fb      	ldrh	r3, [r7, #6]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fc7b 	bl	800c50c <pvPortMalloc>
 800ac16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac1e:	20a8      	movs	r0, #168	@ 0xa8
 800ac20:	f001 fc74 	bl	800c50c <pvPortMalloc>
 800ac24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac32:	e005      	b.n	800ac40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac34:	6978      	ldr	r0, [r7, #20]
 800ac36:	f001 fd37 	bl	800c6a8 <vPortFree>
 800ac3a:	e001      	b.n	800ac40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d017      	beq.n	800ac76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac4e:	88fa      	ldrh	r2, [r7, #6]
 800ac50:	2300      	movs	r3, #0
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68b9      	ldr	r1, [r7, #8]
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 f80f 	bl	800ac88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac6a:	69f8      	ldr	r0, [r7, #28]
 800ac6c:	f000 f8b4 	bl	800add8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac70:	2301      	movs	r3, #1
 800ac72:	61bb      	str	r3, [r7, #24]
 800ac74:	e002      	b.n	800ac7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	461a      	mov	r2, r3
 800aca0:	21a5      	movs	r1, #165	@ 0xa5
 800aca2:	f002 fbfd 	bl	800d4a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800acb0:	440b      	add	r3, r1
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	617b      	str	r3, [r7, #20]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01f      	beq.n	800ad28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ace8:	2300      	movs	r3, #0
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e012      	b.n	800ad14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	4413      	add	r3, r2
 800acf4:	7819      	ldrb	r1, [r3, #0]
 800acf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	4413      	add	r3, r2
 800acfc:	3334      	adds	r3, #52	@ 0x34
 800acfe:	460a      	mov	r2, r1
 800ad00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d006      	beq.n	800ad1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	3301      	adds	r3, #1
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b0f      	cmp	r3, #15
 800ad18:	d9e9      	bls.n	800acee <prvInitialiseNewTask+0x66>
 800ad1a:	e000      	b.n	800ad1e <prvInitialiseNewTask+0x96>
			{
				break;
 800ad1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad26:	e003      	b.n	800ad30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad32:	2b37      	cmp	r3, #55	@ 0x37
 800ad34:	d901      	bls.n	800ad3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad36:	2337      	movs	r3, #55	@ 0x37
 800ad38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	2200      	movs	r2, #0
 800ad4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff f965 	bl	800a020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	3318      	adds	r3, #24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff f960 	bl	800a020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	3354      	adds	r3, #84	@ 0x54
 800ad8a:	224c      	movs	r2, #76	@ 0x4c
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f002 fb86 	bl	800d4a0 <memset>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	4a0d      	ldr	r2, [pc, #52]	@ (800adcc <prvInitialiseNewTask+0x144>)
 800ad98:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	4a0c      	ldr	r2, [pc, #48]	@ (800add0 <prvInitialiseNewTask+0x148>)
 800ad9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ada0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada2:	4a0c      	ldr	r2, [pc, #48]	@ (800add4 <prvInitialiseNewTask+0x14c>)
 800ada4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	69b8      	ldr	r0, [r7, #24]
 800adac:	f001 f95a 	bl	800c064 <pxPortInitialiseStack>
 800adb0:	4602      	mov	r2, r0
 800adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc2:	bf00      	nop
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	240423b8 	.word	0x240423b8
 800add0:	24042420 	.word	0x24042420
 800add4:	24042488 	.word	0x24042488

0800add8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ade0:	f001 fa72 	bl	800c2c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ade4:	4b2d      	ldr	r3, [pc, #180]	@ (800ae9c <prvAddNewTaskToReadyList+0xc4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3301      	adds	r3, #1
 800adea:	4a2c      	ldr	r2, [pc, #176]	@ (800ae9c <prvAddNewTaskToReadyList+0xc4>)
 800adec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adee:	4b2c      	ldr	r3, [pc, #176]	@ (800aea0 <prvAddNewTaskToReadyList+0xc8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aea0 <prvAddNewTaskToReadyList+0xc8>)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adfc:	4b27      	ldr	r3, [pc, #156]	@ (800ae9c <prvAddNewTaskToReadyList+0xc4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d110      	bne.n	800ae26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae04:	f000 fc2e 	bl	800b664 <prvInitialiseTaskLists>
 800ae08:	e00d      	b.n	800ae26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae0a:	4b26      	ldr	r3, [pc, #152]	@ (800aea4 <prvAddNewTaskToReadyList+0xcc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d109      	bne.n	800ae26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae12:	4b23      	ldr	r3, [pc, #140]	@ (800aea0 <prvAddNewTaskToReadyList+0xc8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d802      	bhi.n	800ae26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae20:	4a1f      	ldr	r2, [pc, #124]	@ (800aea0 <prvAddNewTaskToReadyList+0xc8>)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae26:	4b20      	ldr	r3, [pc, #128]	@ (800aea8 <prvAddNewTaskToReadyList+0xd0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	4a1e      	ldr	r2, [pc, #120]	@ (800aea8 <prvAddNewTaskToReadyList+0xd0>)
 800ae2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae30:	4b1d      	ldr	r3, [pc, #116]	@ (800aea8 <prvAddNewTaskToReadyList+0xd0>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3c:	4b1b      	ldr	r3, [pc, #108]	@ (800aeac <prvAddNewTaskToReadyList+0xd4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d903      	bls.n	800ae4c <prvAddNewTaskToReadyList+0x74>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae48:	4a18      	ldr	r2, [pc, #96]	@ (800aeac <prvAddNewTaskToReadyList+0xd4>)
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae50:	4613      	mov	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <prvAddNewTaskToReadyList+0xd8>)
 800ae5a:	441a      	add	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f7ff f8e9 	bl	800a03a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae68:	f001 fa60 	bl	800c32c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae6c:	4b0d      	ldr	r3, [pc, #52]	@ (800aea4 <prvAddNewTaskToReadyList+0xcc>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00e      	beq.n	800ae92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae74:	4b0a      	ldr	r3, [pc, #40]	@ (800aea0 <prvAddNewTaskToReadyList+0xc8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d207      	bcs.n	800ae92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae82:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb4 <prvAddNewTaskToReadyList+0xdc>)
 800ae84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	2400222c 	.word	0x2400222c
 800aea0:	24001d58 	.word	0x24001d58
 800aea4:	24002238 	.word	0x24002238
 800aea8:	24002248 	.word	0x24002248
 800aeac:	24002234 	.word	0x24002234
 800aeb0:	24001d5c 	.word	0x24001d5c
 800aeb4:	e000ed04 	.word	0xe000ed04

0800aeb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d018      	beq.n	800aefc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeca:	4b14      	ldr	r3, [pc, #80]	@ (800af1c <vTaskDelay+0x64>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <vTaskDelay+0x32>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60bb      	str	r3, [r7, #8]
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aeea:	f000 f88b 	bl	800b004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aeee:	2100      	movs	r1, #0
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fd09 	bl	800b908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aef6:	f000 f893 	bl	800b020 <xTaskResumeAll>
 800aefa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d107      	bne.n	800af12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af02:	4b07      	ldr	r3, [pc, #28]	@ (800af20 <vTaskDelay+0x68>)
 800af04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af12:	bf00      	nop
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	24002254 	.word	0x24002254
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	@ 0x28
 800af28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af32:	463a      	mov	r2, r7
 800af34:	1d39      	adds	r1, r7, #4
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff f81c 	bl	8009f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	9202      	str	r2, [sp, #8]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	2300      	movs	r3, #0
 800af50:	460a      	mov	r2, r1
 800af52:	4924      	ldr	r1, [pc, #144]	@ (800afe4 <vTaskStartScheduler+0xc0>)
 800af54:	4824      	ldr	r0, [pc, #144]	@ (800afe8 <vTaskStartScheduler+0xc4>)
 800af56:	f7ff fdf1 	bl	800ab3c <xTaskCreateStatic>
 800af5a:	4603      	mov	r3, r0
 800af5c:	4a23      	ldr	r2, [pc, #140]	@ (800afec <vTaskStartScheduler+0xc8>)
 800af5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af60:	4b22      	ldr	r3, [pc, #136]	@ (800afec <vTaskStartScheduler+0xc8>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af68:	2301      	movs	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e001      	b.n	800af72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d102      	bne.n	800af7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af78:	f000 fd1a 	bl	800b9b0 <xTimerCreateTimerTask>
 800af7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d11b      	bne.n	800afbc <vTaskStartScheduler+0x98>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	613b      	str	r3, [r7, #16]
}
 800af96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af98:	4b15      	ldr	r3, [pc, #84]	@ (800aff0 <vTaskStartScheduler+0xcc>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3354      	adds	r3, #84	@ 0x54
 800af9e:	4a15      	ldr	r2, [pc, #84]	@ (800aff4 <vTaskStartScheduler+0xd0>)
 800afa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afa2:	4b15      	ldr	r3, [pc, #84]	@ (800aff8 <vTaskStartScheduler+0xd4>)
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afaa:	4b14      	ldr	r3, [pc, #80]	@ (800affc <vTaskStartScheduler+0xd8>)
 800afac:	2201      	movs	r2, #1
 800afae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afb0:	4b13      	ldr	r3, [pc, #76]	@ (800b000 <vTaskStartScheduler+0xdc>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afb6:	f001 f8e3 	bl	800c180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afba:	e00f      	b.n	800afdc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afc2:	d10b      	bne.n	800afdc <vTaskStartScheduler+0xb8>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <vTaskStartScheduler+0xb4>
}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	0800f1e4 	.word	0x0800f1e4
 800afe8:	0800b635 	.word	0x0800b635
 800afec:	24002250 	.word	0x24002250
 800aff0:	24001d58 	.word	0x24001d58
 800aff4:	24000020 	.word	0x24000020
 800aff8:	2400224c 	.word	0x2400224c
 800affc:	24002238 	.word	0x24002238
 800b000:	24002230 	.word	0x24002230

0800b004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b008:	4b04      	ldr	r3, [pc, #16]	@ (800b01c <vTaskSuspendAll+0x18>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a03      	ldr	r2, [pc, #12]	@ (800b01c <vTaskSuspendAll+0x18>)
 800b010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	24002254 	.word	0x24002254

0800b020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b02e:	4b42      	ldr	r3, [pc, #264]	@ (800b138 <xTaskResumeAll+0x118>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10b      	bne.n	800b04e <xTaskResumeAll+0x2e>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	603b      	str	r3, [r7, #0]
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	e7fd      	b.n	800b04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b04e:	f001 f93b 	bl	800c2c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b052:	4b39      	ldr	r3, [pc, #228]	@ (800b138 <xTaskResumeAll+0x118>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3b01      	subs	r3, #1
 800b058:	4a37      	ldr	r2, [pc, #220]	@ (800b138 <xTaskResumeAll+0x118>)
 800b05a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b05c:	4b36      	ldr	r3, [pc, #216]	@ (800b138 <xTaskResumeAll+0x118>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d162      	bne.n	800b12a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b064:	4b35      	ldr	r3, [pc, #212]	@ (800b13c <xTaskResumeAll+0x11c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d05e      	beq.n	800b12a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b06c:	e02f      	b.n	800b0ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b06e:	4b34      	ldr	r3, [pc, #208]	@ (800b140 <xTaskResumeAll+0x120>)
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3318      	adds	r3, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff f83a 	bl	800a0f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3304      	adds	r3, #4
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff f835 	bl	800a0f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08e:	4b2d      	ldr	r3, [pc, #180]	@ (800b144 <xTaskResumeAll+0x124>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d903      	bls.n	800b09e <xTaskResumeAll+0x7e>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09a:	4a2a      	ldr	r2, [pc, #168]	@ (800b144 <xTaskResumeAll+0x124>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4a27      	ldr	r2, [pc, #156]	@ (800b148 <xTaskResumeAll+0x128>)
 800b0ac:	441a      	add	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7fe ffc0 	bl	800a03a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0be:	4b23      	ldr	r3, [pc, #140]	@ (800b14c <xTaskResumeAll+0x12c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d302      	bcc.n	800b0ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0c8:	4b21      	ldr	r3, [pc, #132]	@ (800b150 <xTaskResumeAll+0x130>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b140 <xTaskResumeAll+0x120>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1cb      	bne.n	800b06e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0dc:	f000 fb66 	bl	800b7ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b154 <xTaskResumeAll+0x134>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d010      	beq.n	800b10e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ec:	f000 f846 	bl	800b17c <xTaskIncrementTick>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b0f6:	4b16      	ldr	r3, [pc, #88]	@ (800b150 <xTaskResumeAll+0x130>)
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1f1      	bne.n	800b0ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b108:	4b12      	ldr	r3, [pc, #72]	@ (800b154 <xTaskResumeAll+0x134>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b10e:	4b10      	ldr	r3, [pc, #64]	@ (800b150 <xTaskResumeAll+0x130>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d009      	beq.n	800b12a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b11a:	4b0f      	ldr	r3, [pc, #60]	@ (800b158 <xTaskResumeAll+0x138>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b12a:	f001 f8ff 	bl	800c32c <vPortExitCritical>

	return xAlreadyYielded;
 800b12e:	68bb      	ldr	r3, [r7, #8]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	24002254 	.word	0x24002254
 800b13c:	2400222c 	.word	0x2400222c
 800b140:	240021ec 	.word	0x240021ec
 800b144:	24002234 	.word	0x24002234
 800b148:	24001d5c 	.word	0x24001d5c
 800b14c:	24001d58 	.word	0x24001d58
 800b150:	24002240 	.word	0x24002240
 800b154:	2400223c 	.word	0x2400223c
 800b158:	e000ed04 	.word	0xe000ed04

0800b15c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b162:	4b05      	ldr	r3, [pc, #20]	@ (800b178 <xTaskGetTickCount+0x1c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b168:	687b      	ldr	r3, [r7, #4]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	24002230 	.word	0x24002230

0800b17c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b186:	4b4f      	ldr	r3, [pc, #316]	@ (800b2c4 <xTaskIncrementTick+0x148>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f040 8090 	bne.w	800b2b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b190:	4b4d      	ldr	r3, [pc, #308]	@ (800b2c8 <xTaskIncrementTick+0x14c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b198:	4a4b      	ldr	r2, [pc, #300]	@ (800b2c8 <xTaskIncrementTick+0x14c>)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d121      	bne.n	800b1e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1a4:	4b49      	ldr	r3, [pc, #292]	@ (800b2cc <xTaskIncrementTick+0x150>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	603b      	str	r3, [r7, #0]
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	e7fd      	b.n	800b1c2 <xTaskIncrementTick+0x46>
 800b1c6:	4b41      	ldr	r3, [pc, #260]	@ (800b2cc <xTaskIncrementTick+0x150>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	4b40      	ldr	r3, [pc, #256]	@ (800b2d0 <xTaskIncrementTick+0x154>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a3e      	ldr	r2, [pc, #248]	@ (800b2cc <xTaskIncrementTick+0x150>)
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	4a3e      	ldr	r2, [pc, #248]	@ (800b2d0 <xTaskIncrementTick+0x154>)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	4b3e      	ldr	r3, [pc, #248]	@ (800b2d4 <xTaskIncrementTick+0x158>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	4a3c      	ldr	r2, [pc, #240]	@ (800b2d4 <xTaskIncrementTick+0x158>)
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	f000 fae2 	bl	800b7ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800b2d8 <xTaskIncrementTick+0x15c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d349      	bcc.n	800b286 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f2:	4b36      	ldr	r3, [pc, #216]	@ (800b2cc <xTaskIncrementTick+0x150>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fc:	4b36      	ldr	r3, [pc, #216]	@ (800b2d8 <xTaskIncrementTick+0x15c>)
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b202:	601a      	str	r2, [r3, #0]
					break;
 800b204:	e03f      	b.n	800b286 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b206:	4b31      	ldr	r3, [pc, #196]	@ (800b2cc <xTaskIncrementTick+0x150>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d203      	bcs.n	800b226 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b21e:	4a2e      	ldr	r2, [pc, #184]	@ (800b2d8 <xTaskIncrementTick+0x15c>)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b224:	e02f      	b.n	800b286 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3304      	adds	r3, #4
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ff62 	bl	800a0f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3318      	adds	r3, #24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fe ff59 	bl	800a0f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b246:	4b25      	ldr	r3, [pc, #148]	@ (800b2dc <xTaskIncrementTick+0x160>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d903      	bls.n	800b256 <xTaskIncrementTick+0xda>
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b252:	4a22      	ldr	r2, [pc, #136]	@ (800b2dc <xTaskIncrementTick+0x160>)
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4a1f      	ldr	r2, [pc, #124]	@ (800b2e0 <xTaskIncrementTick+0x164>)
 800b264:	441a      	add	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	3304      	adds	r3, #4
 800b26a:	4619      	mov	r1, r3
 800b26c:	4610      	mov	r0, r2
 800b26e:	f7fe fee4 	bl	800a03a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b276:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e4 <xTaskIncrementTick+0x168>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d3b8      	bcc.n	800b1f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b280:	2301      	movs	r3, #1
 800b282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b284:	e7b5      	b.n	800b1f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b286:	4b17      	ldr	r3, [pc, #92]	@ (800b2e4 <xTaskIncrementTick+0x168>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28c:	4914      	ldr	r1, [pc, #80]	@ (800b2e0 <xTaskIncrementTick+0x164>)
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	440b      	add	r3, r1
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d901      	bls.n	800b2a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2a2:	4b11      	ldr	r3, [pc, #68]	@ (800b2e8 <xTaskIncrementTick+0x16c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	617b      	str	r3, [r7, #20]
 800b2ae:	e004      	b.n	800b2ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ec <xTaskIncrementTick+0x170>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	4a0d      	ldr	r2, [pc, #52]	@ (800b2ec <xTaskIncrementTick+0x170>)
 800b2b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2ba:	697b      	ldr	r3, [r7, #20]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	24002254 	.word	0x24002254
 800b2c8:	24002230 	.word	0x24002230
 800b2cc:	240021e4 	.word	0x240021e4
 800b2d0:	240021e8 	.word	0x240021e8
 800b2d4:	24002244 	.word	0x24002244
 800b2d8:	2400224c 	.word	0x2400224c
 800b2dc:	24002234 	.word	0x24002234
 800b2e0:	24001d5c 	.word	0x24001d5c
 800b2e4:	24001d58 	.word	0x24001d58
 800b2e8:	24002240 	.word	0x24002240
 800b2ec:	2400223c 	.word	0x2400223c

0800b2f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800b3a4 <vTaskSwitchContext+0xb4>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b3a8 <vTaskSwitchContext+0xb8>)
 800b300:	2201      	movs	r2, #1
 800b302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b304:	e047      	b.n	800b396 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b306:	4b28      	ldr	r3, [pc, #160]	@ (800b3a8 <vTaskSwitchContext+0xb8>)
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30c:	4b27      	ldr	r3, [pc, #156]	@ (800b3ac <vTaskSwitchContext+0xbc>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	e011      	b.n	800b338 <vTaskSwitchContext+0x48>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10b      	bne.n	800b332 <vTaskSwitchContext+0x42>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	607b      	str	r3, [r7, #4]
}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	e7fd      	b.n	800b32e <vTaskSwitchContext+0x3e>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3b01      	subs	r3, #1
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	491d      	ldr	r1, [pc, #116]	@ (800b3b0 <vTaskSwitchContext+0xc0>)
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0e3      	beq.n	800b314 <vTaskSwitchContext+0x24>
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a16      	ldr	r2, [pc, #88]	@ (800b3b0 <vTaskSwitchContext+0xc0>)
 800b358:	4413      	add	r3, r2
 800b35a:	60bb      	str	r3, [r7, #8]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	3308      	adds	r3, #8
 800b36e:	429a      	cmp	r2, r3
 800b370:	d104      	bne.n	800b37c <vTaskSwitchContext+0x8c>
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	605a      	str	r2, [r3, #4]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b4 <vTaskSwitchContext+0xc4>)
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	4a09      	ldr	r2, [pc, #36]	@ (800b3ac <vTaskSwitchContext+0xbc>)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b38c:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <vTaskSwitchContext+0xc4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3354      	adds	r3, #84	@ 0x54
 800b392:	4a09      	ldr	r2, [pc, #36]	@ (800b3b8 <vTaskSwitchContext+0xc8>)
 800b394:	6013      	str	r3, [r2, #0]
}
 800b396:	bf00      	nop
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	24002254 	.word	0x24002254
 800b3a8:	24002240 	.word	0x24002240
 800b3ac:	24002234 	.word	0x24002234
 800b3b0:	24001d5c 	.word	0x24001d5c
 800b3b4:	24001d58 	.word	0x24001d58
 800b3b8:	24000020 	.word	0x24000020

0800b3bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60fb      	str	r3, [r7, #12]
}
 800b3de:	bf00      	nop
 800b3e0:	bf00      	nop
 800b3e2:	e7fd      	b.n	800b3e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3e4:	4b07      	ldr	r3, [pc, #28]	@ (800b404 <vTaskPlaceOnEventList+0x48>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3318      	adds	r3, #24
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7fe fe48 	bl	800a082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	6838      	ldr	r0, [r7, #0]
 800b3f6:	f000 fa87 	bl	800b908 <prvAddCurrentTaskToDelayedList>
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	24001d58 	.word	0x24001d58

0800b408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	617b      	str	r3, [r7, #20]
}
 800b42c:	bf00      	nop
 800b42e:	bf00      	nop
 800b430:	e7fd      	b.n	800b42e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b432:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <vTaskPlaceOnEventListRestricted+0x54>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3318      	adds	r3, #24
 800b438:	4619      	mov	r1, r3
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7fe fdfd 	bl	800a03a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b44a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	68b8      	ldr	r0, [r7, #8]
 800b450:	f000 fa5a 	bl	800b908 <prvAddCurrentTaskToDelayedList>
	}
 800b454:	bf00      	nop
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	24001d58 	.word	0x24001d58

0800b460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	60fb      	str	r3, [r7, #12]
}
 800b488:	bf00      	nop
 800b48a:	bf00      	nop
 800b48c:	e7fd      	b.n	800b48a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	3318      	adds	r3, #24
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fe2e 	bl	800a0f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b498:	4b1d      	ldr	r3, [pc, #116]	@ (800b510 <xTaskRemoveFromEventList+0xb0>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d11d      	bne.n	800b4dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fe25 	bl	800a0f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ae:	4b19      	ldr	r3, [pc, #100]	@ (800b514 <xTaskRemoveFromEventList+0xb4>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d903      	bls.n	800b4be <xTaskRemoveFromEventList+0x5e>
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ba:	4a16      	ldr	r2, [pc, #88]	@ (800b514 <xTaskRemoveFromEventList+0xb4>)
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a13      	ldr	r2, [pc, #76]	@ (800b518 <xTaskRemoveFromEventList+0xb8>)
 800b4cc:	441a      	add	r2, r3
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fe fdb0 	bl	800a03a <vListInsertEnd>
 800b4da:	e005      	b.n	800b4e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	3318      	adds	r3, #24
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	480e      	ldr	r0, [pc, #56]	@ (800b51c <xTaskRemoveFromEventList+0xbc>)
 800b4e4:	f7fe fda9 	bl	800a03a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b520 <xTaskRemoveFromEventList+0xc0>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d905      	bls.n	800b502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b524 <xTaskRemoveFromEventList+0xc4>)
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	e001      	b.n	800b506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b506:	697b      	ldr	r3, [r7, #20]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	24002254 	.word	0x24002254
 800b514:	24002234 	.word	0x24002234
 800b518:	24001d5c 	.word	0x24001d5c
 800b51c:	240021ec 	.word	0x240021ec
 800b520:	24001d58 	.word	0x24001d58
 800b524:	24002240 	.word	0x24002240

0800b528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b530:	4b06      	ldr	r3, [pc, #24]	@ (800b54c <vTaskInternalSetTimeOutState+0x24>)
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b538:	4b05      	ldr	r3, [pc, #20]	@ (800b550 <vTaskInternalSetTimeOutState+0x28>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	605a      	str	r2, [r3, #4]
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	24002244 	.word	0x24002244
 800b550:	24002230 	.word	0x24002230

0800b554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10b      	bne.n	800b57c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	613b      	str	r3, [r7, #16]
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	e7fd      	b.n	800b578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10b      	bne.n	800b59a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	60fb      	str	r3, [r7, #12]
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	e7fd      	b.n	800b596 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b59a:	f000 fe95 	bl	800c2c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b59e:	4b1d      	ldr	r3, [pc, #116]	@ (800b614 <xTaskCheckForTimeOut+0xc0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	69ba      	ldr	r2, [r7, #24]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5b6:	d102      	bne.n	800b5be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]
 800b5bc:	e023      	b.n	800b606 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	4b15      	ldr	r3, [pc, #84]	@ (800b618 <xTaskCheckForTimeOut+0xc4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d007      	beq.n	800b5da <xTaskCheckForTimeOut+0x86>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d302      	bcc.n	800b5da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	61fb      	str	r3, [r7, #28]
 800b5d8:	e015      	b.n	800b606 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d20b      	bcs.n	800b5fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff ff99 	bl	800b528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	61fb      	str	r3, [r7, #28]
 800b5fa:	e004      	b.n	800b606 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b602:	2301      	movs	r3, #1
 800b604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b606:	f000 fe91 	bl	800c32c <vPortExitCritical>

	return xReturn;
 800b60a:	69fb      	ldr	r3, [r7, #28]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	24002230 	.word	0x24002230
 800b618:	24002244 	.word	0x24002244

0800b61c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b620:	4b03      	ldr	r3, [pc, #12]	@ (800b630 <vTaskMissedYield+0x14>)
 800b622:	2201      	movs	r2, #1
 800b624:	601a      	str	r2, [r3, #0]
}
 800b626:	bf00      	nop
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	24002240 	.word	0x24002240

0800b634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b63c:	f000 f852 	bl	800b6e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b640:	4b06      	ldr	r3, [pc, #24]	@ (800b65c <prvIdleTask+0x28>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d9f9      	bls.n	800b63c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b648:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <prvIdleTask+0x2c>)
 800b64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b658:	e7f0      	b.n	800b63c <prvIdleTask+0x8>
 800b65a:	bf00      	nop
 800b65c:	24001d5c 	.word	0x24001d5c
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b66a:	2300      	movs	r3, #0
 800b66c:	607b      	str	r3, [r7, #4]
 800b66e:	e00c      	b.n	800b68a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4a12      	ldr	r2, [pc, #72]	@ (800b6c4 <prvInitialiseTaskLists+0x60>)
 800b67c:	4413      	add	r3, r2
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fcae 	bl	8009fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3301      	adds	r3, #1
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b37      	cmp	r3, #55	@ 0x37
 800b68e:	d9ef      	bls.n	800b670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b690:	480d      	ldr	r0, [pc, #52]	@ (800b6c8 <prvInitialiseTaskLists+0x64>)
 800b692:	f7fe fca5 	bl	8009fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b696:	480d      	ldr	r0, [pc, #52]	@ (800b6cc <prvInitialiseTaskLists+0x68>)
 800b698:	f7fe fca2 	bl	8009fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b69c:	480c      	ldr	r0, [pc, #48]	@ (800b6d0 <prvInitialiseTaskLists+0x6c>)
 800b69e:	f7fe fc9f 	bl	8009fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6a2:	480c      	ldr	r0, [pc, #48]	@ (800b6d4 <prvInitialiseTaskLists+0x70>)
 800b6a4:	f7fe fc9c 	bl	8009fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6a8:	480b      	ldr	r0, [pc, #44]	@ (800b6d8 <prvInitialiseTaskLists+0x74>)
 800b6aa:	f7fe fc99 	bl	8009fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b6dc <prvInitialiseTaskLists+0x78>)
 800b6b0:	4a05      	ldr	r2, [pc, #20]	@ (800b6c8 <prvInitialiseTaskLists+0x64>)
 800b6b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e0 <prvInitialiseTaskLists+0x7c>)
 800b6b6:	4a05      	ldr	r2, [pc, #20]	@ (800b6cc <prvInitialiseTaskLists+0x68>)
 800b6b8:	601a      	str	r2, [r3, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	24001d5c 	.word	0x24001d5c
 800b6c8:	240021bc 	.word	0x240021bc
 800b6cc:	240021d0 	.word	0x240021d0
 800b6d0:	240021ec 	.word	0x240021ec
 800b6d4:	24002200 	.word	0x24002200
 800b6d8:	24002218 	.word	0x24002218
 800b6dc:	240021e4 	.word	0x240021e4
 800b6e0:	240021e8 	.word	0x240021e8

0800b6e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6ea:	e019      	b.n	800b720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6ec:	f000 fdec 	bl	800c2c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f0:	4b10      	ldr	r3, [pc, #64]	@ (800b734 <prvCheckTasksWaitingTermination+0x50>)
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fcf9 	bl	800a0f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b702:	4b0d      	ldr	r3, [pc, #52]	@ (800b738 <prvCheckTasksWaitingTermination+0x54>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3b01      	subs	r3, #1
 800b708:	4a0b      	ldr	r2, [pc, #44]	@ (800b738 <prvCheckTasksWaitingTermination+0x54>)
 800b70a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b70c:	4b0b      	ldr	r3, [pc, #44]	@ (800b73c <prvCheckTasksWaitingTermination+0x58>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3b01      	subs	r3, #1
 800b712:	4a0a      	ldr	r2, [pc, #40]	@ (800b73c <prvCheckTasksWaitingTermination+0x58>)
 800b714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b716:	f000 fe09 	bl	800c32c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f810 	bl	800b740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b720:	4b06      	ldr	r3, [pc, #24]	@ (800b73c <prvCheckTasksWaitingTermination+0x58>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e1      	bne.n	800b6ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	24002200 	.word	0x24002200
 800b738:	2400222c 	.word	0x2400222c
 800b73c:	24002214 	.word	0x24002214

0800b740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3354      	adds	r3, #84	@ 0x54
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 feb3 	bl	800d4b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d108      	bne.n	800b76e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b760:	4618      	mov	r0, r3
 800b762:	f000 ffa1 	bl	800c6a8 <vPortFree>
				vPortFree( pxTCB );
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 ff9e 	bl	800c6a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b76c:	e019      	b.n	800b7a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b774:	2b01      	cmp	r3, #1
 800b776:	d103      	bne.n	800b780 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 ff95 	bl	800c6a8 <vPortFree>
	}
 800b77e:	e010      	b.n	800b7a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b786:	2b02      	cmp	r3, #2
 800b788:	d00b      	beq.n	800b7a2 <prvDeleteTCB+0x62>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60fb      	str	r3, [r7, #12]
}
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
 800b7a0:	e7fd      	b.n	800b79e <prvDeleteTCB+0x5e>
	}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <prvResetNextTaskUnblockTime+0x38>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d104      	bne.n	800b7c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7c4:	e008      	b.n	800b7d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c6:	4b07      	ldr	r3, [pc, #28]	@ (800b7e4 <prvResetNextTaskUnblockTime+0x38>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4a04      	ldr	r2, [pc, #16]	@ (800b7e8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7d6:	6013      	str	r3, [r2, #0]
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	240021e4 	.word	0x240021e4
 800b7e8:	2400224c 	.word	0x2400224c

0800b7ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b820 <xTaskGetSchedulerState+0x34>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	607b      	str	r3, [r7, #4]
 800b7fe:	e008      	b.n	800b812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b800:	4b08      	ldr	r3, [pc, #32]	@ (800b824 <xTaskGetSchedulerState+0x38>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b808:	2302      	movs	r3, #2
 800b80a:	607b      	str	r3, [r7, #4]
 800b80c:	e001      	b.n	800b812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b80e:	2300      	movs	r3, #0
 800b810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b812:	687b      	ldr	r3, [r7, #4]
	}
 800b814:	4618      	mov	r0, r3
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	24002238 	.word	0x24002238
 800b824:	24002254 	.word	0x24002254

0800b828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b834:	2300      	movs	r3, #0
 800b836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d058      	beq.n	800b8f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b83e:	4b2f      	ldr	r3, [pc, #188]	@ (800b8fc <xTaskPriorityDisinherit+0xd4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	429a      	cmp	r2, r3
 800b846:	d00b      	beq.n	800b860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	60fb      	str	r3, [r7, #12]
}
 800b85a:	bf00      	nop
 800b85c:	bf00      	nop
 800b85e:	e7fd      	b.n	800b85c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10b      	bne.n	800b880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60bb      	str	r3, [r7, #8]
}
 800b87a:	bf00      	nop
 800b87c:	bf00      	nop
 800b87e:	e7fd      	b.n	800b87c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b884:	1e5a      	subs	r2, r3, #1
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b892:	429a      	cmp	r2, r3
 800b894:	d02c      	beq.n	800b8f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d128      	bne.n	800b8f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe fc26 	bl	800a0f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b900 <xTaskPriorityDisinherit+0xd8>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d903      	bls.n	800b8d0 <xTaskPriorityDisinherit+0xa8>
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b900 <xTaskPriorityDisinherit+0xd8>)
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4a09      	ldr	r2, [pc, #36]	@ (800b904 <xTaskPriorityDisinherit+0xdc>)
 800b8de:	441a      	add	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	f7fe fba7 	bl	800a03a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8f0:	697b      	ldr	r3, [r7, #20]
	}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	24001d58 	.word	0x24001d58
 800b900:	24002234 	.word	0x24002234
 800b904:	24001d5c 	.word	0x24001d5c

0800b908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b912:	4b21      	ldr	r3, [pc, #132]	@ (800b998 <prvAddCurrentTaskToDelayedList+0x90>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b918:	4b20      	ldr	r3, [pc, #128]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fbe8 	bl	800a0f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b92a:	d10a      	bne.n	800b942 <prvAddCurrentTaskToDelayedList+0x3a>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b932:	4b1a      	ldr	r3, [pc, #104]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3304      	adds	r3, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	4819      	ldr	r0, [pc, #100]	@ (800b9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b93c:	f7fe fb7d 	bl	800a03a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b940:	e026      	b.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b94a:	4b14      	ldr	r3, [pc, #80]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	429a      	cmp	r2, r3
 800b958:	d209      	bcs.n	800b96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b0f      	ldr	r3, [pc, #60]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3304      	adds	r3, #4
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe fb8b 	bl	800a082 <vListInsert>
}
 800b96c:	e010      	b.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b96e:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x94>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3304      	adds	r3, #4
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fb81 	bl	800a082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b980:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	429a      	cmp	r2, r3
 800b988:	d202      	bcs.n	800b990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b98a:	4a08      	ldr	r2, [pc, #32]	@ (800b9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	6013      	str	r3, [r2, #0]
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	24002230 	.word	0x24002230
 800b99c:	24001d58 	.word	0x24001d58
 800b9a0:	24002218 	.word	0x24002218
 800b9a4:	240021e8 	.word	0x240021e8
 800b9a8:	240021e4 	.word	0x240021e4
 800b9ac:	2400224c 	.word	0x2400224c

0800b9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	@ 0x28
 800b9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9ba:	f000 fb13 	bl	800bfe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9be:	4b1d      	ldr	r3, [pc, #116]	@ (800ba34 <xTimerCreateTimerTask+0x84>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d021      	beq.n	800ba0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9ce:	1d3a      	adds	r2, r7, #4
 800b9d0:	f107 0108 	add.w	r1, r7, #8
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe fae7 	bl	8009fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9de:	6879      	ldr	r1, [r7, #4]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	9202      	str	r2, [sp, #8]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	460a      	mov	r2, r1
 800b9f0:	4911      	ldr	r1, [pc, #68]	@ (800ba38 <xTimerCreateTimerTask+0x88>)
 800b9f2:	4812      	ldr	r0, [pc, #72]	@ (800ba3c <xTimerCreateTimerTask+0x8c>)
 800b9f4:	f7ff f8a2 	bl	800ab3c <xTaskCreateStatic>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	4a11      	ldr	r2, [pc, #68]	@ (800ba40 <xTimerCreateTimerTask+0x90>)
 800b9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9fe:	4b10      	ldr	r3, [pc, #64]	@ (800ba40 <xTimerCreateTimerTask+0x90>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba06:	2301      	movs	r3, #1
 800ba08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10b      	bne.n	800ba28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	613b      	str	r3, [r7, #16]
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba28:	697b      	ldr	r3, [r7, #20]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	24002288 	.word	0x24002288
 800ba38:	0800f1ec 	.word	0x0800f1ec
 800ba3c:	0800bb7d 	.word	0x0800bb7d
 800ba40:	2400228c 	.word	0x2400228c

0800ba44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08a      	sub	sp, #40	@ 0x28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10b      	bne.n	800ba74 <xTimerGenericCommand+0x30>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	623b      	str	r3, [r7, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	e7fd      	b.n	800ba70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba74:	4b19      	ldr	r3, [pc, #100]	@ (800badc <xTimerGenericCommand+0x98>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d02a      	beq.n	800bad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	dc18      	bgt.n	800bac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba8e:	f7ff fead 	bl	800b7ec <xTaskGetSchedulerState>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d109      	bne.n	800baac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba98:	4b10      	ldr	r3, [pc, #64]	@ (800badc <xTimerGenericCommand+0x98>)
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	f107 0110 	add.w	r1, r7, #16
 800baa0:	2300      	movs	r3, #0
 800baa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baa4:	f7fe fc5a 	bl	800a35c <xQueueGenericSend>
 800baa8:	6278      	str	r0, [r7, #36]	@ 0x24
 800baaa:	e012      	b.n	800bad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baac:	4b0b      	ldr	r3, [pc, #44]	@ (800badc <xTimerGenericCommand+0x98>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	f107 0110 	add.w	r1, r7, #16
 800bab4:	2300      	movs	r3, #0
 800bab6:	2200      	movs	r2, #0
 800bab8:	f7fe fc50 	bl	800a35c <xQueueGenericSend>
 800babc:	6278      	str	r0, [r7, #36]	@ 0x24
 800babe:	e008      	b.n	800bad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bac0:	4b06      	ldr	r3, [pc, #24]	@ (800badc <xTimerGenericCommand+0x98>)
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	f107 0110 	add.w	r1, r7, #16
 800bac8:	2300      	movs	r3, #0
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	f7fe fd48 	bl	800a560 <xQueueGenericSendFromISR>
 800bad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3728      	adds	r7, #40	@ 0x28
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	24002288 	.word	0x24002288

0800bae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af02      	add	r7, sp, #8
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baea:	4b23      	ldr	r3, [pc, #140]	@ (800bb78 <prvProcessExpiredTimer+0x98>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fe fafb 	bl	800a0f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb04:	f003 0304 	and.w	r3, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d023      	beq.n	800bb54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	699a      	ldr	r2, [r3, #24]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	18d1      	adds	r1, r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	6978      	ldr	r0, [r7, #20]
 800bb1a:	f000 f8d5 	bl	800bcc8 <prvInsertTimerInActiveList>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d020      	beq.n	800bb66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb24:	2300      	movs	r3, #0
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	6978      	ldr	r0, [r7, #20]
 800bb30:	f7ff ff88 	bl	800ba44 <xTimerGenericCommand>
 800bb34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d114      	bne.n	800bb66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	60fb      	str	r3, [r7, #12]
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb5a:	f023 0301 	bic.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	6978      	ldr	r0, [r7, #20]
 800bb6c:	4798      	blx	r3
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	24002280 	.word	0x24002280

0800bb7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb84:	f107 0308 	add.w	r3, r7, #8
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f859 	bl	800bc40 <prvGetNextExpireTime>
 800bb8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4619      	mov	r1, r3
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f805 	bl	800bba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb9a:	f000 f8d7 	bl	800bd4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb9e:	bf00      	nop
 800bba0:	e7f0      	b.n	800bb84 <prvTimerTask+0x8>
	...

0800bba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbae:	f7ff fa29 	bl	800b004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f866 	bl	800bc88 <prvSampleTimeNow>
 800bbbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d130      	bne.n	800bc26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <prvProcessTimerOrBlockTask+0x3c>
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d806      	bhi.n	800bbe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbd2:	f7ff fa25 	bl	800b020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbd6:	68f9      	ldr	r1, [r7, #12]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff ff81 	bl	800bae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbde:	e024      	b.n	800bc2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbe6:	4b13      	ldr	r3, [pc, #76]	@ (800bc34 <prvProcessTimerOrBlockTask+0x90>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d101      	bne.n	800bbf4 <prvProcessTimerOrBlockTask+0x50>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e000      	b.n	800bbf6 <prvProcessTimerOrBlockTask+0x52>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc38 <prvProcessTimerOrBlockTask+0x94>)
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	4619      	mov	r1, r3
 800bc06:	f7fe ff65 	bl	800aad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc0a:	f7ff fa09 	bl	800b020 <xTaskResumeAll>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc14:	4b09      	ldr	r3, [pc, #36]	@ (800bc3c <prvProcessTimerOrBlockTask+0x98>)
 800bc16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	f3bf 8f6f 	isb	sy
}
 800bc24:	e001      	b.n	800bc2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc26:	f7ff f9fb 	bl	800b020 <xTaskResumeAll>
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	24002284 	.word	0x24002284
 800bc38:	24002288 	.word	0x24002288
 800bc3c:	e000ed04 	.word	0xe000ed04

0800bc40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc48:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <prvGetNextExpireTime+0x44>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <prvGetNextExpireTime+0x16>
 800bc52:	2201      	movs	r2, #1
 800bc54:	e000      	b.n	800bc58 <prvGetNextExpireTime+0x18>
 800bc56:	2200      	movs	r2, #0
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d105      	bne.n	800bc70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc64:	4b07      	ldr	r3, [pc, #28]	@ (800bc84 <prvGetNextExpireTime+0x44>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	e001      	b.n	800bc74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc74:	68fb      	ldr	r3, [r7, #12]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	24002280 	.word	0x24002280

0800bc88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc90:	f7ff fa64 	bl	800b15c <xTaskGetTickCount>
 800bc94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc96:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc4 <prvSampleTimeNow+0x3c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d205      	bcs.n	800bcac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bca0:	f000 f93a 	bl	800bf18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	e002      	b.n	800bcb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcb2:	4a04      	ldr	r2, [pc, #16]	@ (800bcc4 <prvSampleTimeNow+0x3c>)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	24002290 	.word	0x24002290

0800bcc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d812      	bhi.n	800bd14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	1ad2      	subs	r2, r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d302      	bcc.n	800bd02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e01b      	b.n	800bd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd02:	4b10      	ldr	r3, [pc, #64]	@ (800bd44 <prvInsertTimerInActiveList+0x7c>)
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	f7fe f9b8 	bl	800a082 <vListInsert>
 800bd12:	e012      	b.n	800bd3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d206      	bcs.n	800bd2a <prvInsertTimerInActiveList+0x62>
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d302      	bcc.n	800bd2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd24:	2301      	movs	r3, #1
 800bd26:	617b      	str	r3, [r7, #20]
 800bd28:	e007      	b.n	800bd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd2a:	4b07      	ldr	r3, [pc, #28]	@ (800bd48 <prvInsertTimerInActiveList+0x80>)
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3304      	adds	r3, #4
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f7fe f9a4 	bl	800a082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd3a:	697b      	ldr	r3, [r7, #20]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	24002284 	.word	0x24002284
 800bd48:	24002280 	.word	0x24002280

0800bd4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08e      	sub	sp, #56	@ 0x38
 800bd50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd52:	e0ce      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da19      	bge.n	800bd8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd5a:	1d3b      	adds	r3, r7, #4
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10b      	bne.n	800bd7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	61fb      	str	r3, [r7, #28]
}
 800bd78:	bf00      	nop
 800bd7a:	bf00      	nop
 800bd7c:	e7fd      	b.n	800bd7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd84:	6850      	ldr	r0, [r2, #4]
 800bd86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd88:	6892      	ldr	r2, [r2, #8]
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f2c0 80ae 	blt.w	800bef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d004      	beq.n	800bdac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe f9a4 	bl	800a0f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdac:	463b      	mov	r3, r7
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff ff6a 	bl	800bc88 <prvSampleTimeNow>
 800bdb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b09      	cmp	r3, #9
 800bdba:	f200 8097 	bhi.w	800beec <prvProcessReceivedCommands+0x1a0>
 800bdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc4 <prvProcessReceivedCommands+0x78>)
 800bdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc4:	0800bded 	.word	0x0800bded
 800bdc8:	0800bded 	.word	0x0800bded
 800bdcc:	0800bded 	.word	0x0800bded
 800bdd0:	0800be63 	.word	0x0800be63
 800bdd4:	0800be77 	.word	0x0800be77
 800bdd8:	0800bec3 	.word	0x0800bec3
 800bddc:	0800bded 	.word	0x0800bded
 800bde0:	0800bded 	.word	0x0800bded
 800bde4:	0800be63 	.word	0x0800be63
 800bde8:	0800be77 	.word	0x0800be77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdf2:	f043 0301 	orr.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	18d1      	adds	r1, r2, r3
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be0c:	f7ff ff5c 	bl	800bcc8 <prvInsertTimerInActiveList>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d06c      	beq.n	800bef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d061      	beq.n	800bef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	441a      	add	r2, r3
 800be34:	2300      	movs	r3, #0
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	2300      	movs	r3, #0
 800be3a:	2100      	movs	r1, #0
 800be3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be3e:	f7ff fe01 	bl	800ba44 <xTimerGenericCommand>
 800be42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d152      	bne.n	800bef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	61bb      	str	r3, [r7, #24]
}
 800be5c:	bf00      	nop
 800be5e:	bf00      	nop
 800be60:	e7fd      	b.n	800be5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be68:	f023 0301 	bic.w	r3, r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be74:	e03d      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be7c:	f043 0301 	orr.w	r3, r3, #1
 800be80:	b2da      	uxtb	r2, r3
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10b      	bne.n	800beae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	617b      	str	r3, [r7, #20]
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	699a      	ldr	r2, [r3, #24]
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb4:	18d1      	adds	r1, r2, r3
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bebc:	f7ff ff04 	bl	800bcc8 <prvInsertTimerInActiveList>
					break;
 800bec0:	e017      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bed2:	f000 fbe9 	bl	800c6a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bed6:	e00c      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bede:	f023 0301 	bic.w	r3, r3, #1
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800beea:	e002      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <prvProcessReceivedCommands+0x1a6>
					break;
 800bef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bef2:	4b08      	ldr	r3, [pc, #32]	@ (800bf14 <prvProcessReceivedCommands+0x1c8>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	1d39      	adds	r1, r7, #4
 800bef8:	2200      	movs	r2, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe fbce 	bl	800a69c <xQueueReceive>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f47f af26 	bne.w	800bd54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	3730      	adds	r7, #48	@ 0x30
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	24002288 	.word	0x24002288

0800bf18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf1e:	e049      	b.n	800bfb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf20:	4b2e      	ldr	r3, [pc, #184]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf2a:	4b2c      	ldr	r3, [pc, #176]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe f8db 	bl	800a0f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d02f      	beq.n	800bfb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d90e      	bls.n	800bf84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf72:	4b1a      	ldr	r3, [pc, #104]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fe f880 	bl	800a082 <vListInsert>
 800bf82:	e017      	b.n	800bfb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf84:	2300      	movs	r3, #0
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f7ff fd58 	bl	800ba44 <xTimerGenericCommand>
 800bf94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10b      	bne.n	800bfb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	603b      	str	r3, [r7, #0]
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfb4:	4b09      	ldr	r3, [pc, #36]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1b0      	bne.n	800bf20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfbe:	4b07      	ldr	r3, [pc, #28]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfc4:	4b06      	ldr	r3, [pc, #24]	@ (800bfe0 <prvSwitchTimerLists+0xc8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a04      	ldr	r2, [pc, #16]	@ (800bfdc <prvSwitchTimerLists+0xc4>)
 800bfca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfcc:	4a04      	ldr	r2, [pc, #16]	@ (800bfe0 <prvSwitchTimerLists+0xc8>)
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	6013      	str	r3, [r2, #0]
}
 800bfd2:	bf00      	nop
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	24002280 	.word	0x24002280
 800bfe0:	24002284 	.word	0x24002284

0800bfe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfea:	f000 f96d 	bl	800c2c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfee:	4b15      	ldr	r3, [pc, #84]	@ (800c044 <prvCheckForValidListAndQueue+0x60>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d120      	bne.n	800c038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bff6:	4814      	ldr	r0, [pc, #80]	@ (800c048 <prvCheckForValidListAndQueue+0x64>)
 800bff8:	f7fd fff2 	bl	8009fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bffc:	4813      	ldr	r0, [pc, #76]	@ (800c04c <prvCheckForValidListAndQueue+0x68>)
 800bffe:	f7fd ffef 	bl	8009fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c002:	4b13      	ldr	r3, [pc, #76]	@ (800c050 <prvCheckForValidListAndQueue+0x6c>)
 800c004:	4a10      	ldr	r2, [pc, #64]	@ (800c048 <prvCheckForValidListAndQueue+0x64>)
 800c006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c008:	4b12      	ldr	r3, [pc, #72]	@ (800c054 <prvCheckForValidListAndQueue+0x70>)
 800c00a:	4a10      	ldr	r2, [pc, #64]	@ (800c04c <prvCheckForValidListAndQueue+0x68>)
 800c00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c00e:	2300      	movs	r3, #0
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4b11      	ldr	r3, [pc, #68]	@ (800c058 <prvCheckForValidListAndQueue+0x74>)
 800c014:	4a11      	ldr	r2, [pc, #68]	@ (800c05c <prvCheckForValidListAndQueue+0x78>)
 800c016:	2110      	movs	r1, #16
 800c018:	200a      	movs	r0, #10
 800c01a:	f7fe f8ff 	bl	800a21c <xQueueGenericCreateStatic>
 800c01e:	4603      	mov	r3, r0
 800c020:	4a08      	ldr	r2, [pc, #32]	@ (800c044 <prvCheckForValidListAndQueue+0x60>)
 800c022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c024:	4b07      	ldr	r3, [pc, #28]	@ (800c044 <prvCheckForValidListAndQueue+0x60>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c02c:	4b05      	ldr	r3, [pc, #20]	@ (800c044 <prvCheckForValidListAndQueue+0x60>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	490b      	ldr	r1, [pc, #44]	@ (800c060 <prvCheckForValidListAndQueue+0x7c>)
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fd24 	bl	800aa80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c038:	f000 f978 	bl	800c32c <vPortExitCritical>
}
 800c03c:	bf00      	nop
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	24002288 	.word	0x24002288
 800c048:	24002258 	.word	0x24002258
 800c04c:	2400226c 	.word	0x2400226c
 800c050:	24002280 	.word	0x24002280
 800c054:	24002284 	.word	0x24002284
 800c058:	24002334 	.word	0x24002334
 800c05c:	24002294 	.word	0x24002294
 800c060:	0800f1f4 	.word	0x0800f1f4

0800c064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3b04      	subs	r3, #4
 800c074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3b04      	subs	r3, #4
 800c082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f023 0201 	bic.w	r2, r3, #1
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c094:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c8 <pxPortInitialiseStack+0x64>)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3b14      	subs	r3, #20
 800c09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f06f 0202 	mvn.w	r2, #2
 800c0b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3b20      	subs	r3, #32
 800c0b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	0800c0cd 	.word	0x0800c0cd

0800c0cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0d6:	4b13      	ldr	r3, [pc, #76]	@ (800c124 <prvTaskExitError+0x58>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0de:	d00b      	beq.n	800c0f8 <prvTaskExitError+0x2c>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <prvTaskExitError+0x28>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	60bb      	str	r3, [r7, #8]
}
 800c10a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c10c:	bf00      	nop
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0fc      	beq.n	800c10e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	24000010 	.word	0x24000010
	...

0800c130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c130:	4b07      	ldr	r3, [pc, #28]	@ (800c150 <pxCurrentTCBConst2>)
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	6808      	ldr	r0, [r1, #0]
 800c136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	f380 8809 	msr	PSP, r0
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f04f 0000 	mov.w	r0, #0
 800c146:	f380 8811 	msr	BASEPRI, r0
 800c14a:	4770      	bx	lr
 800c14c:	f3af 8000 	nop.w

0800c150 <pxCurrentTCBConst2>:
 800c150:	24001d58 	.word	0x24001d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop

0800c158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c158:	4808      	ldr	r0, [pc, #32]	@ (800c17c <prvPortStartFirstTask+0x24>)
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	6800      	ldr	r0, [r0, #0]
 800c15e:	f380 8808 	msr	MSP, r0
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8814 	msr	CONTROL, r0
 800c16a:	b662      	cpsie	i
 800c16c:	b661      	cpsie	f
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	df00      	svc	0
 800c178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c17a:	bf00      	nop
 800c17c:	e000ed08 	.word	0xe000ed08

0800c180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c186:	4b47      	ldr	r3, [pc, #284]	@ (800c2a4 <xPortStartScheduler+0x124>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a47      	ldr	r2, [pc, #284]	@ (800c2a8 <xPortStartScheduler+0x128>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d10b      	bne.n	800c1a8 <xPortStartScheduler+0x28>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	613b      	str	r3, [r7, #16]
}
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	e7fd      	b.n	800c1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2a4 <xPortStartScheduler+0x124>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a3f      	ldr	r2, [pc, #252]	@ (800c2ac <xPortStartScheduler+0x12c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d10b      	bne.n	800c1ca <xPortStartScheduler+0x4a>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60fb      	str	r3, [r7, #12]
}
 800c1c4:	bf00      	nop
 800c1c6:	bf00      	nop
 800c1c8:	e7fd      	b.n	800c1c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1ca:	4b39      	ldr	r3, [pc, #228]	@ (800c2b0 <xPortStartScheduler+0x130>)
 800c1cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	22ff      	movs	r2, #255	@ 0xff
 800c1da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1e4:	78fb      	ldrb	r3, [r7, #3]
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	4b31      	ldr	r3, [pc, #196]	@ (800c2b4 <xPortStartScheduler+0x134>)
 800c1f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1f2:	4b31      	ldr	r3, [pc, #196]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c1f4:	2207      	movs	r2, #7
 800c1f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1f8:	e009      	b.n	800c20e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c1fa:	4b2f      	ldr	r3, [pc, #188]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4a2d      	ldr	r2, [pc, #180]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c216:	2b80      	cmp	r3, #128	@ 0x80
 800c218:	d0ef      	beq.n	800c1fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c21a:	4b27      	ldr	r3, [pc, #156]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1c3 0307 	rsb	r3, r3, #7
 800c222:	2b04      	cmp	r3, #4
 800c224:	d00b      	beq.n	800c23e <xPortStartScheduler+0xbe>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	60bb      	str	r3, [r7, #8]
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	e7fd      	b.n	800c23a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c23e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	4a1c      	ldr	r2, [pc, #112]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c248:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c250:	4a19      	ldr	r2, [pc, #100]	@ (800c2b8 <xPortStartScheduler+0x138>)
 800c252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	b2da      	uxtb	r2, r3
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c25c:	4b17      	ldr	r3, [pc, #92]	@ (800c2bc <xPortStartScheduler+0x13c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a16      	ldr	r2, [pc, #88]	@ (800c2bc <xPortStartScheduler+0x13c>)
 800c262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c268:	4b14      	ldr	r3, [pc, #80]	@ (800c2bc <xPortStartScheduler+0x13c>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a13      	ldr	r2, [pc, #76]	@ (800c2bc <xPortStartScheduler+0x13c>)
 800c26e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c274:	f000 f8da 	bl	800c42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c278:	4b11      	ldr	r3, [pc, #68]	@ (800c2c0 <xPortStartScheduler+0x140>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c27e:	f000 f8f9 	bl	800c474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c282:	4b10      	ldr	r3, [pc, #64]	@ (800c2c4 <xPortStartScheduler+0x144>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a0f      	ldr	r2, [pc, #60]	@ (800c2c4 <xPortStartScheduler+0x144>)
 800c288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c28c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c28e:	f7ff ff63 	bl	800c158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c292:	f7ff f82d 	bl	800b2f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c296:	f7ff ff19 	bl	800c0cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3718      	adds	r7, #24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	e000ed00 	.word	0xe000ed00
 800c2a8:	410fc271 	.word	0x410fc271
 800c2ac:	410fc270 	.word	0x410fc270
 800c2b0:	e000e400 	.word	0xe000e400
 800c2b4:	24002384 	.word	0x24002384
 800c2b8:	24002388 	.word	0x24002388
 800c2bc:	e000ed20 	.word	0xe000ed20
 800c2c0:	24000010 	.word	0x24000010
 800c2c4:	e000ef34 	.word	0xe000ef34

0800c2c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	607b      	str	r3, [r7, #4]
}
 800c2e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2e2:	4b10      	ldr	r3, [pc, #64]	@ (800c324 <vPortEnterCritical+0x5c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c324 <vPortEnterCritical+0x5c>)
 800c2ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c324 <vPortEnterCritical+0x5c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d110      	bne.n	800c316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c328 <vPortEnterCritical+0x60>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00b      	beq.n	800c316 <vPortEnterCritical+0x4e>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	603b      	str	r3, [r7, #0]
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	e7fd      	b.n	800c312 <vPortEnterCritical+0x4a>
	}
}
 800c316:	bf00      	nop
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	24000010 	.word	0x24000010
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c332:	4b12      	ldr	r3, [pc, #72]	@ (800c37c <vPortExitCritical+0x50>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10b      	bne.n	800c352 <vPortExitCritical+0x26>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	607b      	str	r3, [r7, #4]
}
 800c34c:	bf00      	nop
 800c34e:	bf00      	nop
 800c350:	e7fd      	b.n	800c34e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c352:	4b0a      	ldr	r3, [pc, #40]	@ (800c37c <vPortExitCritical+0x50>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3b01      	subs	r3, #1
 800c358:	4a08      	ldr	r2, [pc, #32]	@ (800c37c <vPortExitCritical+0x50>)
 800c35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c35c:	4b07      	ldr	r3, [pc, #28]	@ (800c37c <vPortExitCritical+0x50>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <vPortExitCritical+0x44>
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	24000010 	.word	0x24000010

0800c380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c380:	f3ef 8009 	mrs	r0, PSP
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	4b15      	ldr	r3, [pc, #84]	@ (800c3e0 <pxCurrentTCBConst>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	f01e 0f10 	tst.w	lr, #16
 800c390:	bf08      	it	eq
 800c392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39a:	6010      	str	r0, [r2, #0]
 800c39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3a4:	f380 8811 	msr	BASEPRI, r0
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f7fe ff9e 	bl	800b2f0 <vTaskSwitchContext>
 800c3b4:	f04f 0000 	mov.w	r0, #0
 800c3b8:	f380 8811 	msr	BASEPRI, r0
 800c3bc:	bc09      	pop	{r0, r3}
 800c3be:	6819      	ldr	r1, [r3, #0]
 800c3c0:	6808      	ldr	r0, [r1, #0]
 800c3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c6:	f01e 0f10 	tst.w	lr, #16
 800c3ca:	bf08      	it	eq
 800c3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3d0:	f380 8809 	msr	PSP, r0
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst>:
 800c3e0:	24001d58 	.word	0x24001d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	607b      	str	r3, [r7, #4]
}
 800c400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c402:	f7fe febb 	bl	800b17c <xTaskIncrementTick>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c40c:	4b06      	ldr	r3, [pc, #24]	@ (800c428 <xPortSysTickHandler+0x40>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	2300      	movs	r3, #0
 800c416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	f383 8811 	msr	BASEPRI, r3
}
 800c41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	e000ed04 	.word	0xe000ed04

0800c42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c42c:	b480      	push	{r7}
 800c42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c430:	4b0b      	ldr	r3, [pc, #44]	@ (800c460 <vPortSetupTimerInterrupt+0x34>)
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c436:	4b0b      	ldr	r3, [pc, #44]	@ (800c464 <vPortSetupTimerInterrupt+0x38>)
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c43c:	4b0a      	ldr	r3, [pc, #40]	@ (800c468 <vPortSetupTimerInterrupt+0x3c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a0a      	ldr	r2, [pc, #40]	@ (800c46c <vPortSetupTimerInterrupt+0x40>)
 800c442:	fba2 2303 	umull	r2, r3, r2, r3
 800c446:	099b      	lsrs	r3, r3, #6
 800c448:	4a09      	ldr	r2, [pc, #36]	@ (800c470 <vPortSetupTimerInterrupt+0x44>)
 800c44a:	3b01      	subs	r3, #1
 800c44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c44e:	4b04      	ldr	r3, [pc, #16]	@ (800c460 <vPortSetupTimerInterrupt+0x34>)
 800c450:	2207      	movs	r2, #7
 800c452:	601a      	str	r2, [r3, #0]
}
 800c454:	bf00      	nop
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	e000e010 	.word	0xe000e010
 800c464:	e000e018 	.word	0xe000e018
 800c468:	24000000 	.word	0x24000000
 800c46c:	10624dd3 	.word	0x10624dd3
 800c470:	e000e014 	.word	0xe000e014

0800c474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c484 <vPortEnableVFP+0x10>
 800c478:	6801      	ldr	r1, [r0, #0]
 800c47a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c47e:	6001      	str	r1, [r0, #0]
 800c480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c482:	bf00      	nop
 800c484:	e000ed88 	.word	0xe000ed88

0800c488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c48e:	f3ef 8305 	mrs	r3, IPSR
 800c492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b0f      	cmp	r3, #15
 800c498:	d915      	bls.n	800c4c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c49a:	4a18      	ldr	r2, [pc, #96]	@ (800c4fc <vPortValidateInterruptPriority+0x74>)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4413      	add	r3, r2
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4a4:	4b16      	ldr	r3, [pc, #88]	@ (800c500 <vPortValidateInterruptPriority+0x78>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	7afa      	ldrb	r2, [r7, #11]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d20b      	bcs.n	800c4c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	607b      	str	r3, [r7, #4]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c504 <vPortValidateInterruptPriority+0x7c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c508 <vPortValidateInterruptPriority+0x80>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d90b      	bls.n	800c4ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	603b      	str	r3, [r7, #0]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <vPortValidateInterruptPriority+0x62>
	}
 800c4ee:	bf00      	nop
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	e000e3f0 	.word	0xe000e3f0
 800c500:	24002384 	.word	0x24002384
 800c504:	e000ed0c 	.word	0xe000ed0c
 800c508:	24002388 	.word	0x24002388

0800c50c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08a      	sub	sp, #40	@ 0x28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c518:	f7fe fd74 	bl	800b004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c51c:	4b5c      	ldr	r3, [pc, #368]	@ (800c690 <pvPortMalloc+0x184>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c524:	f000 f930 	bl	800c788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c528:	4b5a      	ldr	r3, [pc, #360]	@ (800c694 <pvPortMalloc+0x188>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4013      	ands	r3, r2
 800c530:	2b00      	cmp	r3, #0
 800c532:	f040 8095 	bne.w	800c660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01e      	beq.n	800c57a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c53c:	2208      	movs	r2, #8
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4413      	add	r3, r2
 800c542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d015      	beq.n	800c57a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f023 0307 	bic.w	r3, r3, #7
 800c554:	3308      	adds	r3, #8
 800c556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f003 0307 	and.w	r3, r3, #7
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00b      	beq.n	800c57a <pvPortMalloc+0x6e>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	617b      	str	r3, [r7, #20]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d06f      	beq.n	800c660 <pvPortMalloc+0x154>
 800c580:	4b45      	ldr	r3, [pc, #276]	@ (800c698 <pvPortMalloc+0x18c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	429a      	cmp	r2, r3
 800c588:	d86a      	bhi.n	800c660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c58a:	4b44      	ldr	r3, [pc, #272]	@ (800c69c <pvPortMalloc+0x190>)
 800c58c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c58e:	4b43      	ldr	r3, [pc, #268]	@ (800c69c <pvPortMalloc+0x190>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c594:	e004      	b.n	800c5a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d903      	bls.n	800c5b2 <pvPortMalloc+0xa6>
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1f1      	bne.n	800c596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5b2:	4b37      	ldr	r3, [pc, #220]	@ (800c690 <pvPortMalloc+0x184>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d051      	beq.n	800c660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5bc:	6a3b      	ldr	r3, [r7, #32]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	4413      	add	r3, r2
 800c5c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	1ad2      	subs	r2, r2, r3
 800c5d6:	2308      	movs	r3, #8
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d920      	bls.n	800c620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	f003 0307 	and.w	r3, r3, #7
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <pvPortMalloc+0xfc>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	613b      	str	r3, [r7, #16]
}
 800c602:	bf00      	nop
 800c604:	bf00      	nop
 800c606:	e7fd      	b.n	800c604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	1ad2      	subs	r2, r2, r3
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c61a:	69b8      	ldr	r0, [r7, #24]
 800c61c:	f000 f916 	bl	800c84c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c620:	4b1d      	ldr	r3, [pc, #116]	@ (800c698 <pvPortMalloc+0x18c>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	4a1b      	ldr	r2, [pc, #108]	@ (800c698 <pvPortMalloc+0x18c>)
 800c62c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c62e:	4b1a      	ldr	r3, [pc, #104]	@ (800c698 <pvPortMalloc+0x18c>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a0 <pvPortMalloc+0x194>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d203      	bcs.n	800c642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c63a:	4b17      	ldr	r3, [pc, #92]	@ (800c698 <pvPortMalloc+0x18c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a18      	ldr	r2, [pc, #96]	@ (800c6a0 <pvPortMalloc+0x194>)
 800c640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	4b13      	ldr	r3, [pc, #76]	@ (800c694 <pvPortMalloc+0x188>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c656:	4b13      	ldr	r3, [pc, #76]	@ (800c6a4 <pvPortMalloc+0x198>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	4a11      	ldr	r2, [pc, #68]	@ (800c6a4 <pvPortMalloc+0x198>)
 800c65e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c660:	f7fe fcde 	bl	800b020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00b      	beq.n	800c686 <pvPortMalloc+0x17a>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	60fb      	str	r3, [r7, #12]
}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	e7fd      	b.n	800c682 <pvPortMalloc+0x176>
	return pvReturn;
 800c686:	69fb      	ldr	r3, [r7, #28]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3728      	adds	r7, #40	@ 0x28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	24042394 	.word	0x24042394
 800c694:	240423a8 	.word	0x240423a8
 800c698:	24042398 	.word	0x24042398
 800c69c:	2404238c 	.word	0x2404238c
 800c6a0:	2404239c 	.word	0x2404239c
 800c6a4:	240423a0 	.word	0x240423a0

0800c6a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d04f      	beq.n	800c75a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6ba:	2308      	movs	r3, #8
 800c6bc:	425b      	negs	r3, r3
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	4b25      	ldr	r3, [pc, #148]	@ (800c764 <vPortFree+0xbc>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10b      	bne.n	800c6ee <vPortFree+0x46>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	60fb      	str	r3, [r7, #12]
}
 800c6e8:	bf00      	nop
 800c6ea:	bf00      	nop
 800c6ec:	e7fd      	b.n	800c6ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00b      	beq.n	800c70e <vPortFree+0x66>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	60bb      	str	r3, [r7, #8]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	4b14      	ldr	r3, [pc, #80]	@ (800c764 <vPortFree+0xbc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4013      	ands	r3, r2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01e      	beq.n	800c75a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11a      	bne.n	800c75a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b0e      	ldr	r3, [pc, #56]	@ (800c764 <vPortFree+0xbc>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	43db      	mvns	r3, r3
 800c72e:	401a      	ands	r2, r3
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c734:	f7fe fc66 	bl	800b004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	4b0a      	ldr	r3, [pc, #40]	@ (800c768 <vPortFree+0xc0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4413      	add	r3, r2
 800c742:	4a09      	ldr	r2, [pc, #36]	@ (800c768 <vPortFree+0xc0>)
 800c744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c746:	6938      	ldr	r0, [r7, #16]
 800c748:	f000 f880 	bl	800c84c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c74c:	4b07      	ldr	r3, [pc, #28]	@ (800c76c <vPortFree+0xc4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3301      	adds	r3, #1
 800c752:	4a06      	ldr	r2, [pc, #24]	@ (800c76c <vPortFree+0xc4>)
 800c754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c756:	f7fe fc63 	bl	800b020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c75a:	bf00      	nop
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	240423a8 	.word	0x240423a8
 800c768:	24042398 	.word	0x24042398
 800c76c:	240423a4 	.word	0x240423a4

0800c770 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c774:	4b03      	ldr	r3, [pc, #12]	@ (800c784 <xPortGetFreeHeapSize+0x14>)
 800c776:	681b      	ldr	r3, [r3, #0]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	24042398 	.word	0x24042398

0800c788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c78e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c794:	4b27      	ldr	r3, [pc, #156]	@ (800c834 <prvHeapInit+0xac>)
 800c796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00c      	beq.n	800c7bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3307      	adds	r3, #7
 800c7a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c834 <prvHeapInit+0xac>)
 800c7b8:	4413      	add	r3, r2
 800c7ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c838 <prvHeapInit+0xb0>)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7c6:	4b1c      	ldr	r3, [pc, #112]	@ (800c838 <prvHeapInit+0xb0>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	1a9b      	subs	r3, r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f023 0307 	bic.w	r3, r3, #7
 800c7e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4a15      	ldr	r2, [pc, #84]	@ (800c83c <prvHeapInit+0xb4>)
 800c7e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7ea:	4b14      	ldr	r3, [pc, #80]	@ (800c83c <prvHeapInit+0xb4>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7f2:	4b12      	ldr	r3, [pc, #72]	@ (800c83c <prvHeapInit+0xb4>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	1ad2      	subs	r2, r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c808:	4b0c      	ldr	r3, [pc, #48]	@ (800c83c <prvHeapInit+0xb4>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	4a0a      	ldr	r2, [pc, #40]	@ (800c840 <prvHeapInit+0xb8>)
 800c816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	4a09      	ldr	r2, [pc, #36]	@ (800c844 <prvHeapInit+0xbc>)
 800c81e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c820:	4b09      	ldr	r3, [pc, #36]	@ (800c848 <prvHeapInit+0xc0>)
 800c822:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c826:	601a      	str	r2, [r3, #0]
}
 800c828:	bf00      	nop
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	2400238c 	.word	0x2400238c
 800c838:	2404238c 	.word	0x2404238c
 800c83c:	24042394 	.word	0x24042394
 800c840:	2404239c 	.word	0x2404239c
 800c844:	24042398 	.word	0x24042398
 800c848:	240423a8 	.word	0x240423a8

0800c84c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c854:	4b28      	ldr	r3, [pc, #160]	@ (800c8f8 <prvInsertBlockIntoFreeList+0xac>)
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	e002      	b.n	800c860 <prvInsertBlockIntoFreeList+0x14>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d8f7      	bhi.n	800c85a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4413      	add	r3, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d108      	bne.n	800c88e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	441a      	add	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	441a      	add	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d118      	bne.n	800c8d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	4b15      	ldr	r3, [pc, #84]	@ (800c8fc <prvInsertBlockIntoFreeList+0xb0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d00d      	beq.n	800c8ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	441a      	add	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e008      	b.n	800c8dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c8fc <prvInsertBlockIntoFreeList+0xb0>)
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	e003      	b.n	800c8dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d002      	beq.n	800c8ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8ea:	bf00      	nop
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	2404238c 	.word	0x2404238c
 800c8fc:	24042394 	.word	0x24042394

0800c900 <_Znwj>:
 800c900:	2801      	cmp	r0, #1
 800c902:	bf38      	it	cc
 800c904:	2001      	movcc	r0, #1
 800c906:	b510      	push	{r4, lr}
 800c908:	4604      	mov	r4, r0
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 fac2 	bl	800ce94 <malloc>
 800c910:	b100      	cbz	r0, 800c914 <_Znwj+0x14>
 800c912:	bd10      	pop	{r4, pc}
 800c914:	f000 f806 	bl	800c924 <_ZSt15get_new_handlerv>
 800c918:	b908      	cbnz	r0, 800c91e <_Znwj+0x1e>
 800c91a:	f000 f80b 	bl	800c934 <abort>
 800c91e:	4780      	blx	r0
 800c920:	e7f3      	b.n	800c90a <_Znwj+0xa>
	...

0800c924 <_ZSt15get_new_handlerv>:
 800c924:	4b02      	ldr	r3, [pc, #8]	@ (800c930 <_ZSt15get_new_handlerv+0xc>)
 800c926:	6818      	ldr	r0, [r3, #0]
 800c928:	f3bf 8f5b 	dmb	ish
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	240423ac 	.word	0x240423ac

0800c934 <abort>:
 800c934:	b508      	push	{r3, lr}
 800c936:	2006      	movs	r0, #6
 800c938:	f000 fe3c 	bl	800d5b4 <raise>
 800c93c:	2001      	movs	r0, #1
 800c93e:	f7f5 fd9f 	bl	8002480 <_exit>

0800c942 <__cvt>:
 800c942:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c944:	ed2d 8b02 	vpush	{d8}
 800c948:	eeb0 8b40 	vmov.f64	d8, d0
 800c94c:	b085      	sub	sp, #20
 800c94e:	4617      	mov	r7, r2
 800c950:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c954:	ee18 2a90 	vmov	r2, s17
 800c958:	f025 0520 	bic.w	r5, r5, #32
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	bfb6      	itet	lt
 800c960:	222d      	movlt	r2, #45	@ 0x2d
 800c962:	2200      	movge	r2, #0
 800c964:	eeb1 8b40 	vneglt.f64	d8, d0
 800c968:	2d46      	cmp	r5, #70	@ 0x46
 800c96a:	460c      	mov	r4, r1
 800c96c:	701a      	strb	r2, [r3, #0]
 800c96e:	d004      	beq.n	800c97a <__cvt+0x38>
 800c970:	2d45      	cmp	r5, #69	@ 0x45
 800c972:	d100      	bne.n	800c976 <__cvt+0x34>
 800c974:	3401      	adds	r4, #1
 800c976:	2102      	movs	r1, #2
 800c978:	e000      	b.n	800c97c <__cvt+0x3a>
 800c97a:	2103      	movs	r1, #3
 800c97c:	ab03      	add	r3, sp, #12
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	ab02      	add	r3, sp, #8
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4622      	mov	r2, r4
 800c986:	4633      	mov	r3, r6
 800c988:	eeb0 0b48 	vmov.f64	d0, d8
 800c98c:	f000 ff04 	bl	800d798 <_dtoa_r>
 800c990:	2d47      	cmp	r5, #71	@ 0x47
 800c992:	d114      	bne.n	800c9be <__cvt+0x7c>
 800c994:	07fb      	lsls	r3, r7, #31
 800c996:	d50a      	bpl.n	800c9ae <__cvt+0x6c>
 800c998:	1902      	adds	r2, r0, r4
 800c99a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	bf08      	it	eq
 800c9a4:	9203      	streq	r2, [sp, #12]
 800c9a6:	2130      	movs	r1, #48	@ 0x30
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d319      	bcc.n	800c9e2 <__cvt+0xa0>
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9b2:	1a1b      	subs	r3, r3, r0
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	b005      	add	sp, #20
 800c9b8:	ecbd 8b02 	vpop	{d8}
 800c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9be:	2d46      	cmp	r5, #70	@ 0x46
 800c9c0:	eb00 0204 	add.w	r2, r0, r4
 800c9c4:	d1e9      	bne.n	800c99a <__cvt+0x58>
 800c9c6:	7803      	ldrb	r3, [r0, #0]
 800c9c8:	2b30      	cmp	r3, #48	@ 0x30
 800c9ca:	d107      	bne.n	800c9dc <__cvt+0x9a>
 800c9cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d4:	bf1c      	itt	ne
 800c9d6:	f1c4 0401 	rsbne	r4, r4, #1
 800c9da:	6034      	strne	r4, [r6, #0]
 800c9dc:	6833      	ldr	r3, [r6, #0]
 800c9de:	441a      	add	r2, r3
 800c9e0:	e7db      	b.n	800c99a <__cvt+0x58>
 800c9e2:	1c5c      	adds	r4, r3, #1
 800c9e4:	9403      	str	r4, [sp, #12]
 800c9e6:	7019      	strb	r1, [r3, #0]
 800c9e8:	e7de      	b.n	800c9a8 <__cvt+0x66>

0800c9ea <__exponent>:
 800c9ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	bfba      	itte	lt
 800c9f0:	4249      	neglt	r1, r1
 800c9f2:	232d      	movlt	r3, #45	@ 0x2d
 800c9f4:	232b      	movge	r3, #43	@ 0x2b
 800c9f6:	2909      	cmp	r1, #9
 800c9f8:	7002      	strb	r2, [r0, #0]
 800c9fa:	7043      	strb	r3, [r0, #1]
 800c9fc:	dd29      	ble.n	800ca52 <__exponent+0x68>
 800c9fe:	f10d 0307 	add.w	r3, sp, #7
 800ca02:	461d      	mov	r5, r3
 800ca04:	270a      	movs	r7, #10
 800ca06:	461a      	mov	r2, r3
 800ca08:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca0c:	fb07 1416 	mls	r4, r7, r6, r1
 800ca10:	3430      	adds	r4, #48	@ 0x30
 800ca12:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca16:	460c      	mov	r4, r1
 800ca18:	2c63      	cmp	r4, #99	@ 0x63
 800ca1a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ca1e:	4631      	mov	r1, r6
 800ca20:	dcf1      	bgt.n	800ca06 <__exponent+0x1c>
 800ca22:	3130      	adds	r1, #48	@ 0x30
 800ca24:	1e94      	subs	r4, r2, #2
 800ca26:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca2a:	1c41      	adds	r1, r0, #1
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	42ab      	cmp	r3, r5
 800ca30:	d30a      	bcc.n	800ca48 <__exponent+0x5e>
 800ca32:	f10d 0309 	add.w	r3, sp, #9
 800ca36:	1a9b      	subs	r3, r3, r2
 800ca38:	42ac      	cmp	r4, r5
 800ca3a:	bf88      	it	hi
 800ca3c:	2300      	movhi	r3, #0
 800ca3e:	3302      	adds	r3, #2
 800ca40:	4403      	add	r3, r0
 800ca42:	1a18      	subs	r0, r3, r0
 800ca44:	b003      	add	sp, #12
 800ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca48:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca50:	e7ed      	b.n	800ca2e <__exponent+0x44>
 800ca52:	2330      	movs	r3, #48	@ 0x30
 800ca54:	3130      	adds	r1, #48	@ 0x30
 800ca56:	7083      	strb	r3, [r0, #2]
 800ca58:	70c1      	strb	r1, [r0, #3]
 800ca5a:	1d03      	adds	r3, r0, #4
 800ca5c:	e7f1      	b.n	800ca42 <__exponent+0x58>
	...

0800ca60 <_printf_float>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	b08d      	sub	sp, #52	@ 0x34
 800ca66:	460c      	mov	r4, r1
 800ca68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca6c:	4616      	mov	r6, r2
 800ca6e:	461f      	mov	r7, r3
 800ca70:	4605      	mov	r5, r0
 800ca72:	f000 fd1d 	bl	800d4b0 <_localeconv_r>
 800ca76:	f8d0 b000 	ldr.w	fp, [r0]
 800ca7a:	4658      	mov	r0, fp
 800ca7c:	f7f3 fc98 	bl	80003b0 <strlen>
 800ca80:	2300      	movs	r3, #0
 800ca82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca84:	f8d8 3000 	ldr.w	r3, [r8]
 800ca88:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ca8c:	6822      	ldr	r2, [r4, #0]
 800ca8e:	9005      	str	r0, [sp, #20]
 800ca90:	3307      	adds	r3, #7
 800ca92:	f023 0307 	bic.w	r3, r3, #7
 800ca96:	f103 0108 	add.w	r1, r3, #8
 800ca9a:	f8c8 1000 	str.w	r1, [r8]
 800ca9e:	ed93 0b00 	vldr	d0, [r3]
 800caa2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800cd00 <_printf_float+0x2a0>
 800caa6:	eeb0 7bc0 	vabs.f64	d7, d0
 800caaa:	eeb4 7b46 	vcmp.f64	d7, d6
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800cab6:	dd24      	ble.n	800cb02 <_printf_float+0xa2>
 800cab8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac0:	d502      	bpl.n	800cac8 <_printf_float+0x68>
 800cac2:	232d      	movs	r3, #45	@ 0x2d
 800cac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cac8:	498f      	ldr	r1, [pc, #572]	@ (800cd08 <_printf_float+0x2a8>)
 800caca:	4b90      	ldr	r3, [pc, #576]	@ (800cd0c <_printf_float+0x2ac>)
 800cacc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800cad0:	bf94      	ite	ls
 800cad2:	4688      	movls	r8, r1
 800cad4:	4698      	movhi	r8, r3
 800cad6:	f022 0204 	bic.w	r2, r2, #4
 800cada:	2303      	movs	r3, #3
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	6022      	str	r2, [r4, #0]
 800cae0:	f04f 0a00 	mov.w	sl, #0
 800cae4:	9700      	str	r7, [sp, #0]
 800cae6:	4633      	mov	r3, r6
 800cae8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800caea:	4621      	mov	r1, r4
 800caec:	4628      	mov	r0, r5
 800caee:	f000 fa7b 	bl	800cfe8 <_printf_common>
 800caf2:	3001      	adds	r0, #1
 800caf4:	f040 8089 	bne.w	800cc0a <_printf_float+0x1aa>
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cafc:	b00d      	add	sp, #52	@ 0x34
 800cafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb02:	eeb4 0b40 	vcmp.f64	d0, d0
 800cb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0a:	d709      	bvc.n	800cb20 <_printf_float+0xc0>
 800cb0c:	ee10 3a90 	vmov	r3, s1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	bfbc      	itt	lt
 800cb14:	232d      	movlt	r3, #45	@ 0x2d
 800cb16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb1a:	497d      	ldr	r1, [pc, #500]	@ (800cd10 <_printf_float+0x2b0>)
 800cb1c:	4b7d      	ldr	r3, [pc, #500]	@ (800cd14 <_printf_float+0x2b4>)
 800cb1e:	e7d5      	b.n	800cacc <_printf_float+0x6c>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	1c59      	adds	r1, r3, #1
 800cb24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800cb28:	d139      	bne.n	800cb9e <_printf_float+0x13e>
 800cb2a:	2306      	movs	r3, #6
 800cb2c:	6063      	str	r3, [r4, #4]
 800cb2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb32:	2300      	movs	r3, #0
 800cb34:	6022      	str	r2, [r4, #0]
 800cb36:	9303      	str	r3, [sp, #12]
 800cb38:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cb3e:	ab09      	add	r3, sp, #36	@ 0x24
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	6861      	ldr	r1, [r4, #4]
 800cb44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f7ff fefa 	bl	800c942 <__cvt>
 800cb4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb54:	4680      	mov	r8, r0
 800cb56:	d129      	bne.n	800cbac <_printf_float+0x14c>
 800cb58:	1cc8      	adds	r0, r1, #3
 800cb5a:	db02      	blt.n	800cb62 <_printf_float+0x102>
 800cb5c:	6863      	ldr	r3, [r4, #4]
 800cb5e:	4299      	cmp	r1, r3
 800cb60:	dd41      	ble.n	800cbe6 <_printf_float+0x186>
 800cb62:	f1a9 0902 	sub.w	r9, r9, #2
 800cb66:	fa5f f989 	uxtb.w	r9, r9
 800cb6a:	3901      	subs	r1, #1
 800cb6c:	464a      	mov	r2, r9
 800cb6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb72:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb74:	f7ff ff39 	bl	800c9ea <__exponent>
 800cb78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb7a:	1813      	adds	r3, r2, r0
 800cb7c:	2a01      	cmp	r2, #1
 800cb7e:	4682      	mov	sl, r0
 800cb80:	6123      	str	r3, [r4, #16]
 800cb82:	dc02      	bgt.n	800cb8a <_printf_float+0x12a>
 800cb84:	6822      	ldr	r2, [r4, #0]
 800cb86:	07d2      	lsls	r2, r2, #31
 800cb88:	d501      	bpl.n	800cb8e <_printf_float+0x12e>
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	6123      	str	r3, [r4, #16]
 800cb8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d0a6      	beq.n	800cae4 <_printf_float+0x84>
 800cb96:	232d      	movs	r3, #45	@ 0x2d
 800cb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb9c:	e7a2      	b.n	800cae4 <_printf_float+0x84>
 800cb9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cba2:	d1c4      	bne.n	800cb2e <_printf_float+0xce>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1c2      	bne.n	800cb2e <_printf_float+0xce>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e7bf      	b.n	800cb2c <_printf_float+0xcc>
 800cbac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cbb0:	d9db      	bls.n	800cb6a <_printf_float+0x10a>
 800cbb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800cbb6:	d118      	bne.n	800cbea <_printf_float+0x18a>
 800cbb8:	2900      	cmp	r1, #0
 800cbba:	6863      	ldr	r3, [r4, #4]
 800cbbc:	dd0b      	ble.n	800cbd6 <_printf_float+0x176>
 800cbbe:	6121      	str	r1, [r4, #16]
 800cbc0:	b913      	cbnz	r3, 800cbc8 <_printf_float+0x168>
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	07d0      	lsls	r0, r2, #31
 800cbc6:	d502      	bpl.n	800cbce <_printf_float+0x16e>
 800cbc8:	3301      	adds	r3, #1
 800cbca:	440b      	add	r3, r1
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cbd0:	f04f 0a00 	mov.w	sl, #0
 800cbd4:	e7db      	b.n	800cb8e <_printf_float+0x12e>
 800cbd6:	b913      	cbnz	r3, 800cbde <_printf_float+0x17e>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	07d2      	lsls	r2, r2, #31
 800cbdc:	d501      	bpl.n	800cbe2 <_printf_float+0x182>
 800cbde:	3302      	adds	r3, #2
 800cbe0:	e7f4      	b.n	800cbcc <_printf_float+0x16c>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e7f2      	b.n	800cbcc <_printf_float+0x16c>
 800cbe6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800cbea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbec:	4299      	cmp	r1, r3
 800cbee:	db05      	blt.n	800cbfc <_printf_float+0x19c>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	6121      	str	r1, [r4, #16]
 800cbf4:	07d8      	lsls	r0, r3, #31
 800cbf6:	d5ea      	bpl.n	800cbce <_printf_float+0x16e>
 800cbf8:	1c4b      	adds	r3, r1, #1
 800cbfa:	e7e7      	b.n	800cbcc <_printf_float+0x16c>
 800cbfc:	2900      	cmp	r1, #0
 800cbfe:	bfd4      	ite	le
 800cc00:	f1c1 0202 	rsble	r2, r1, #2
 800cc04:	2201      	movgt	r2, #1
 800cc06:	4413      	add	r3, r2
 800cc08:	e7e0      	b.n	800cbcc <_printf_float+0x16c>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	055a      	lsls	r2, r3, #21
 800cc0e:	d407      	bmi.n	800cc20 <_printf_float+0x1c0>
 800cc10:	6923      	ldr	r3, [r4, #16]
 800cc12:	4642      	mov	r2, r8
 800cc14:	4631      	mov	r1, r6
 800cc16:	4628      	mov	r0, r5
 800cc18:	47b8      	blx	r7
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d12a      	bne.n	800cc74 <_printf_float+0x214>
 800cc1e:	e76b      	b.n	800caf8 <_printf_float+0x98>
 800cc20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cc24:	f240 80e0 	bls.w	800cde8 <_printf_float+0x388>
 800cc28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cc2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc34:	d133      	bne.n	800cc9e <_printf_float+0x23e>
 800cc36:	4a38      	ldr	r2, [pc, #224]	@ (800cd18 <_printf_float+0x2b8>)
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4631      	mov	r1, r6
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b8      	blx	r7
 800cc40:	3001      	adds	r0, #1
 800cc42:	f43f af59 	beq.w	800caf8 <_printf_float+0x98>
 800cc46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc4a:	4543      	cmp	r3, r8
 800cc4c:	db02      	blt.n	800cc54 <_printf_float+0x1f4>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	07d8      	lsls	r0, r3, #31
 800cc52:	d50f      	bpl.n	800cc74 <_printf_float+0x214>
 800cc54:	9b05      	ldr	r3, [sp, #20]
 800cc56:	465a      	mov	r2, fp
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f af4a 	beq.w	800caf8 <_printf_float+0x98>
 800cc64:	f04f 0900 	mov.w	r9, #0
 800cc68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cc6c:	f104 0a1a 	add.w	sl, r4, #26
 800cc70:	45c8      	cmp	r8, r9
 800cc72:	dc09      	bgt.n	800cc88 <_printf_float+0x228>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	079b      	lsls	r3, r3, #30
 800cc78:	f100 8107 	bmi.w	800ce8a <_printf_float+0x42a>
 800cc7c:	68e0      	ldr	r0, [r4, #12]
 800cc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc80:	4298      	cmp	r0, r3
 800cc82:	bfb8      	it	lt
 800cc84:	4618      	movlt	r0, r3
 800cc86:	e739      	b.n	800cafc <_printf_float+0x9c>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	f43f af30 	beq.w	800caf8 <_printf_float+0x98>
 800cc98:	f109 0901 	add.w	r9, r9, #1
 800cc9c:	e7e8      	b.n	800cc70 <_printf_float+0x210>
 800cc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dc3b      	bgt.n	800cd1c <_printf_float+0x2bc>
 800cca4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd18 <_printf_float+0x2b8>)
 800cca6:	2301      	movs	r3, #1
 800cca8:	4631      	mov	r1, r6
 800ccaa:	4628      	mov	r0, r5
 800ccac:	47b8      	blx	r7
 800ccae:	3001      	adds	r0, #1
 800ccb0:	f43f af22 	beq.w	800caf8 <_printf_float+0x98>
 800ccb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ccb8:	ea59 0303 	orrs.w	r3, r9, r3
 800ccbc:	d102      	bne.n	800ccc4 <_printf_float+0x264>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	07d9      	lsls	r1, r3, #31
 800ccc2:	d5d7      	bpl.n	800cc74 <_printf_float+0x214>
 800ccc4:	9b05      	ldr	r3, [sp, #20]
 800ccc6:	465a      	mov	r2, fp
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f af12 	beq.w	800caf8 <_printf_float+0x98>
 800ccd4:	f04f 0a00 	mov.w	sl, #0
 800ccd8:	f104 0b1a 	add.w	fp, r4, #26
 800ccdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccde:	425b      	negs	r3, r3
 800cce0:	4553      	cmp	r3, sl
 800cce2:	dc01      	bgt.n	800cce8 <_printf_float+0x288>
 800cce4:	464b      	mov	r3, r9
 800cce6:	e794      	b.n	800cc12 <_printf_float+0x1b2>
 800cce8:	2301      	movs	r3, #1
 800ccea:	465a      	mov	r2, fp
 800ccec:	4631      	mov	r1, r6
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f43f af00 	beq.w	800caf8 <_printf_float+0x98>
 800ccf8:	f10a 0a01 	add.w	sl, sl, #1
 800ccfc:	e7ee      	b.n	800ccdc <_printf_float+0x27c>
 800ccfe:	bf00      	nop
 800cd00:	ffffffff 	.word	0xffffffff
 800cd04:	7fefffff 	.word	0x7fefffff
 800cd08:	0800f298 	.word	0x0800f298
 800cd0c:	0800f29c 	.word	0x0800f29c
 800cd10:	0800f2a0 	.word	0x0800f2a0
 800cd14:	0800f2a4 	.word	0x0800f2a4
 800cd18:	0800f2a8 	.word	0x0800f2a8
 800cd1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd22:	4553      	cmp	r3, sl
 800cd24:	bfa8      	it	ge
 800cd26:	4653      	movge	r3, sl
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	4699      	mov	r9, r3
 800cd2c:	dc37      	bgt.n	800cd9e <_printf_float+0x33e>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9307      	str	r3, [sp, #28]
 800cd32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd36:	f104 021a 	add.w	r2, r4, #26
 800cd3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd3c:	9907      	ldr	r1, [sp, #28]
 800cd3e:	9306      	str	r3, [sp, #24]
 800cd40:	eba3 0309 	sub.w	r3, r3, r9
 800cd44:	428b      	cmp	r3, r1
 800cd46:	dc31      	bgt.n	800cdac <_printf_float+0x34c>
 800cd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd4a:	459a      	cmp	sl, r3
 800cd4c:	dc3b      	bgt.n	800cdc6 <_printf_float+0x366>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	07da      	lsls	r2, r3, #31
 800cd52:	d438      	bmi.n	800cdc6 <_printf_float+0x366>
 800cd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd56:	ebaa 0903 	sub.w	r9, sl, r3
 800cd5a:	9b06      	ldr	r3, [sp, #24]
 800cd5c:	ebaa 0303 	sub.w	r3, sl, r3
 800cd60:	4599      	cmp	r9, r3
 800cd62:	bfa8      	it	ge
 800cd64:	4699      	movge	r9, r3
 800cd66:	f1b9 0f00 	cmp.w	r9, #0
 800cd6a:	dc34      	bgt.n	800cdd6 <_printf_float+0x376>
 800cd6c:	f04f 0800 	mov.w	r8, #0
 800cd70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd74:	f104 0b1a 	add.w	fp, r4, #26
 800cd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd7a:	ebaa 0303 	sub.w	r3, sl, r3
 800cd7e:	eba3 0309 	sub.w	r3, r3, r9
 800cd82:	4543      	cmp	r3, r8
 800cd84:	f77f af76 	ble.w	800cc74 <_printf_float+0x214>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	465a      	mov	r2, fp
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	47b8      	blx	r7
 800cd92:	3001      	adds	r0, #1
 800cd94:	f43f aeb0 	beq.w	800caf8 <_printf_float+0x98>
 800cd98:	f108 0801 	add.w	r8, r8, #1
 800cd9c:	e7ec      	b.n	800cd78 <_printf_float+0x318>
 800cd9e:	4642      	mov	r2, r8
 800cda0:	4631      	mov	r1, r6
 800cda2:	4628      	mov	r0, r5
 800cda4:	47b8      	blx	r7
 800cda6:	3001      	adds	r0, #1
 800cda8:	d1c1      	bne.n	800cd2e <_printf_float+0x2ce>
 800cdaa:	e6a5      	b.n	800caf8 <_printf_float+0x98>
 800cdac:	2301      	movs	r3, #1
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	9206      	str	r2, [sp, #24]
 800cdb4:	47b8      	blx	r7
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	f43f ae9e 	beq.w	800caf8 <_printf_float+0x98>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	9a06      	ldr	r2, [sp, #24]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	9307      	str	r3, [sp, #28]
 800cdc4:	e7b9      	b.n	800cd3a <_printf_float+0x2da>
 800cdc6:	9b05      	ldr	r3, [sp, #20]
 800cdc8:	465a      	mov	r2, fp
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4628      	mov	r0, r5
 800cdce:	47b8      	blx	r7
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d1bf      	bne.n	800cd54 <_printf_float+0x2f4>
 800cdd4:	e690      	b.n	800caf8 <_printf_float+0x98>
 800cdd6:	9a06      	ldr	r2, [sp, #24]
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4442      	add	r2, r8
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	d1c2      	bne.n	800cd6c <_printf_float+0x30c>
 800cde6:	e687      	b.n	800caf8 <_printf_float+0x98>
 800cde8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800cdec:	f1b9 0f01 	cmp.w	r9, #1
 800cdf0:	dc01      	bgt.n	800cdf6 <_printf_float+0x396>
 800cdf2:	07db      	lsls	r3, r3, #31
 800cdf4:	d536      	bpl.n	800ce64 <_printf_float+0x404>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	47b8      	blx	r7
 800ce00:	3001      	adds	r0, #1
 800ce02:	f43f ae79 	beq.w	800caf8 <_printf_float+0x98>
 800ce06:	9b05      	ldr	r3, [sp, #20]
 800ce08:	465a      	mov	r2, fp
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	f43f ae71 	beq.w	800caf8 <_printf_float+0x98>
 800ce16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ce1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce22:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ce26:	d018      	beq.n	800ce5a <_printf_float+0x3fa>
 800ce28:	464b      	mov	r3, r9
 800ce2a:	f108 0201 	add.w	r2, r8, #1
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b8      	blx	r7
 800ce34:	3001      	adds	r0, #1
 800ce36:	d10c      	bne.n	800ce52 <_printf_float+0x3f2>
 800ce38:	e65e      	b.n	800caf8 <_printf_float+0x98>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	465a      	mov	r2, fp
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	f43f ae57 	beq.w	800caf8 <_printf_float+0x98>
 800ce4a:	f108 0801 	add.w	r8, r8, #1
 800ce4e:	45c8      	cmp	r8, r9
 800ce50:	dbf3      	blt.n	800ce3a <_printf_float+0x3da>
 800ce52:	4653      	mov	r3, sl
 800ce54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ce58:	e6dc      	b.n	800cc14 <_printf_float+0x1b4>
 800ce5a:	f04f 0800 	mov.w	r8, #0
 800ce5e:	f104 0b1a 	add.w	fp, r4, #26
 800ce62:	e7f4      	b.n	800ce4e <_printf_float+0x3ee>
 800ce64:	2301      	movs	r3, #1
 800ce66:	4642      	mov	r2, r8
 800ce68:	e7e1      	b.n	800ce2e <_printf_float+0x3ce>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	464a      	mov	r2, r9
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4628      	mov	r0, r5
 800ce72:	47b8      	blx	r7
 800ce74:	3001      	adds	r0, #1
 800ce76:	f43f ae3f 	beq.w	800caf8 <_printf_float+0x98>
 800ce7a:	f108 0801 	add.w	r8, r8, #1
 800ce7e:	68e3      	ldr	r3, [r4, #12]
 800ce80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce82:	1a5b      	subs	r3, r3, r1
 800ce84:	4543      	cmp	r3, r8
 800ce86:	dcf0      	bgt.n	800ce6a <_printf_float+0x40a>
 800ce88:	e6f8      	b.n	800cc7c <_printf_float+0x21c>
 800ce8a:	f04f 0800 	mov.w	r8, #0
 800ce8e:	f104 0919 	add.w	r9, r4, #25
 800ce92:	e7f4      	b.n	800ce7e <_printf_float+0x41e>

0800ce94 <malloc>:
 800ce94:	4b02      	ldr	r3, [pc, #8]	@ (800cea0 <malloc+0xc>)
 800ce96:	4601      	mov	r1, r0
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f000 b825 	b.w	800cee8 <_malloc_r>
 800ce9e:	bf00      	nop
 800cea0:	24000020 	.word	0x24000020

0800cea4 <sbrk_aligned>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4e0f      	ldr	r6, [pc, #60]	@ (800cee4 <sbrk_aligned+0x40>)
 800cea8:	460c      	mov	r4, r1
 800ceaa:	6831      	ldr	r1, [r6, #0]
 800ceac:	4605      	mov	r5, r0
 800ceae:	b911      	cbnz	r1, 800ceb6 <sbrk_aligned+0x12>
 800ceb0:	f000 fb9c 	bl	800d5ec <_sbrk_r>
 800ceb4:	6030      	str	r0, [r6, #0]
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 fb97 	bl	800d5ec <_sbrk_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	d103      	bne.n	800ceca <sbrk_aligned+0x26>
 800cec2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cec6:	4620      	mov	r0, r4
 800cec8:	bd70      	pop	{r4, r5, r6, pc}
 800ceca:	1cc4      	adds	r4, r0, #3
 800cecc:	f024 0403 	bic.w	r4, r4, #3
 800ced0:	42a0      	cmp	r0, r4
 800ced2:	d0f8      	beq.n	800cec6 <sbrk_aligned+0x22>
 800ced4:	1a21      	subs	r1, r4, r0
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 fb88 	bl	800d5ec <_sbrk_r>
 800cedc:	3001      	adds	r0, #1
 800cede:	d1f2      	bne.n	800cec6 <sbrk_aligned+0x22>
 800cee0:	e7ef      	b.n	800cec2 <sbrk_aligned+0x1e>
 800cee2:	bf00      	nop
 800cee4:	240423b0 	.word	0x240423b0

0800cee8 <_malloc_r>:
 800cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceec:	1ccd      	adds	r5, r1, #3
 800ceee:	f025 0503 	bic.w	r5, r5, #3
 800cef2:	3508      	adds	r5, #8
 800cef4:	2d0c      	cmp	r5, #12
 800cef6:	bf38      	it	cc
 800cef8:	250c      	movcc	r5, #12
 800cefa:	2d00      	cmp	r5, #0
 800cefc:	4606      	mov	r6, r0
 800cefe:	db01      	blt.n	800cf04 <_malloc_r+0x1c>
 800cf00:	42a9      	cmp	r1, r5
 800cf02:	d904      	bls.n	800cf0e <_malloc_r+0x26>
 800cf04:	230c      	movs	r3, #12
 800cf06:	6033      	str	r3, [r6, #0]
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfe4 <_malloc_r+0xfc>
 800cf12:	f000 f9f7 	bl	800d304 <__malloc_lock>
 800cf16:	f8d8 3000 	ldr.w	r3, [r8]
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	bb44      	cbnz	r4, 800cf70 <_malloc_r+0x88>
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7ff ffbf 	bl	800cea4 <sbrk_aligned>
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	4604      	mov	r4, r0
 800cf2a:	d158      	bne.n	800cfde <_malloc_r+0xf6>
 800cf2c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf30:	4627      	mov	r7, r4
 800cf32:	2f00      	cmp	r7, #0
 800cf34:	d143      	bne.n	800cfbe <_malloc_r+0xd6>
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	d04b      	beq.n	800cfd2 <_malloc_r+0xea>
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	4630      	mov	r0, r6
 800cf40:	eb04 0903 	add.w	r9, r4, r3
 800cf44:	f000 fb52 	bl	800d5ec <_sbrk_r>
 800cf48:	4581      	cmp	r9, r0
 800cf4a:	d142      	bne.n	800cfd2 <_malloc_r+0xea>
 800cf4c:	6821      	ldr	r1, [r4, #0]
 800cf4e:	1a6d      	subs	r5, r5, r1
 800cf50:	4629      	mov	r1, r5
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7ff ffa6 	bl	800cea4 <sbrk_aligned>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d03a      	beq.n	800cfd2 <_malloc_r+0xea>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	442b      	add	r3, r5
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	f8d8 3000 	ldr.w	r3, [r8]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	bb62      	cbnz	r2, 800cfc4 <_malloc_r+0xdc>
 800cf6a:	f8c8 7000 	str.w	r7, [r8]
 800cf6e:	e00f      	b.n	800cf90 <_malloc_r+0xa8>
 800cf70:	6822      	ldr	r2, [r4, #0]
 800cf72:	1b52      	subs	r2, r2, r5
 800cf74:	d420      	bmi.n	800cfb8 <_malloc_r+0xd0>
 800cf76:	2a0b      	cmp	r2, #11
 800cf78:	d917      	bls.n	800cfaa <_malloc_r+0xc2>
 800cf7a:	1961      	adds	r1, r4, r5
 800cf7c:	42a3      	cmp	r3, r4
 800cf7e:	6025      	str	r5, [r4, #0]
 800cf80:	bf18      	it	ne
 800cf82:	6059      	strne	r1, [r3, #4]
 800cf84:	6863      	ldr	r3, [r4, #4]
 800cf86:	bf08      	it	eq
 800cf88:	f8c8 1000 	streq.w	r1, [r8]
 800cf8c:	5162      	str	r2, [r4, r5]
 800cf8e:	604b      	str	r3, [r1, #4]
 800cf90:	4630      	mov	r0, r6
 800cf92:	f000 f9bd 	bl	800d310 <__malloc_unlock>
 800cf96:	f104 000b 	add.w	r0, r4, #11
 800cf9a:	1d23      	adds	r3, r4, #4
 800cf9c:	f020 0007 	bic.w	r0, r0, #7
 800cfa0:	1ac2      	subs	r2, r0, r3
 800cfa2:	bf1c      	itt	ne
 800cfa4:	1a1b      	subne	r3, r3, r0
 800cfa6:	50a3      	strne	r3, [r4, r2]
 800cfa8:	e7af      	b.n	800cf0a <_malloc_r+0x22>
 800cfaa:	6862      	ldr	r2, [r4, #4]
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	bf0c      	ite	eq
 800cfb0:	f8c8 2000 	streq.w	r2, [r8]
 800cfb4:	605a      	strne	r2, [r3, #4]
 800cfb6:	e7eb      	b.n	800cf90 <_malloc_r+0xa8>
 800cfb8:	4623      	mov	r3, r4
 800cfba:	6864      	ldr	r4, [r4, #4]
 800cfbc:	e7ae      	b.n	800cf1c <_malloc_r+0x34>
 800cfbe:	463c      	mov	r4, r7
 800cfc0:	687f      	ldr	r7, [r7, #4]
 800cfc2:	e7b6      	b.n	800cf32 <_malloc_r+0x4a>
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	d1fb      	bne.n	800cfc4 <_malloc_r+0xdc>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	6053      	str	r3, [r2, #4]
 800cfd0:	e7de      	b.n	800cf90 <_malloc_r+0xa8>
 800cfd2:	230c      	movs	r3, #12
 800cfd4:	6033      	str	r3, [r6, #0]
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f000 f99a 	bl	800d310 <__malloc_unlock>
 800cfdc:	e794      	b.n	800cf08 <_malloc_r+0x20>
 800cfde:	6005      	str	r5, [r0, #0]
 800cfe0:	e7d6      	b.n	800cf90 <_malloc_r+0xa8>
 800cfe2:	bf00      	nop
 800cfe4:	240423b4 	.word	0x240423b4

0800cfe8 <_printf_common>:
 800cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	4616      	mov	r6, r2
 800cfee:	4698      	mov	r8, r3
 800cff0:	688a      	ldr	r2, [r1, #8]
 800cff2:	690b      	ldr	r3, [r1, #16]
 800cff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cff8:	4293      	cmp	r3, r2
 800cffa:	bfb8      	it	lt
 800cffc:	4613      	movlt	r3, r2
 800cffe:	6033      	str	r3, [r6, #0]
 800d000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d004:	4607      	mov	r7, r0
 800d006:	460c      	mov	r4, r1
 800d008:	b10a      	cbz	r2, 800d00e <_printf_common+0x26>
 800d00a:	3301      	adds	r3, #1
 800d00c:	6033      	str	r3, [r6, #0]
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	0699      	lsls	r1, r3, #26
 800d012:	bf42      	ittt	mi
 800d014:	6833      	ldrmi	r3, [r6, #0]
 800d016:	3302      	addmi	r3, #2
 800d018:	6033      	strmi	r3, [r6, #0]
 800d01a:	6825      	ldr	r5, [r4, #0]
 800d01c:	f015 0506 	ands.w	r5, r5, #6
 800d020:	d106      	bne.n	800d030 <_printf_common+0x48>
 800d022:	f104 0a19 	add.w	sl, r4, #25
 800d026:	68e3      	ldr	r3, [r4, #12]
 800d028:	6832      	ldr	r2, [r6, #0]
 800d02a:	1a9b      	subs	r3, r3, r2
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dc26      	bgt.n	800d07e <_printf_common+0x96>
 800d030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d034:	6822      	ldr	r2, [r4, #0]
 800d036:	3b00      	subs	r3, #0
 800d038:	bf18      	it	ne
 800d03a:	2301      	movne	r3, #1
 800d03c:	0692      	lsls	r2, r2, #26
 800d03e:	d42b      	bmi.n	800d098 <_printf_common+0xb0>
 800d040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d044:	4641      	mov	r1, r8
 800d046:	4638      	mov	r0, r7
 800d048:	47c8      	blx	r9
 800d04a:	3001      	adds	r0, #1
 800d04c:	d01e      	beq.n	800d08c <_printf_common+0xa4>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	6922      	ldr	r2, [r4, #16]
 800d052:	f003 0306 	and.w	r3, r3, #6
 800d056:	2b04      	cmp	r3, #4
 800d058:	bf02      	ittt	eq
 800d05a:	68e5      	ldreq	r5, [r4, #12]
 800d05c:	6833      	ldreq	r3, [r6, #0]
 800d05e:	1aed      	subeq	r5, r5, r3
 800d060:	68a3      	ldr	r3, [r4, #8]
 800d062:	bf0c      	ite	eq
 800d064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d068:	2500      	movne	r5, #0
 800d06a:	4293      	cmp	r3, r2
 800d06c:	bfc4      	itt	gt
 800d06e:	1a9b      	subgt	r3, r3, r2
 800d070:	18ed      	addgt	r5, r5, r3
 800d072:	2600      	movs	r6, #0
 800d074:	341a      	adds	r4, #26
 800d076:	42b5      	cmp	r5, r6
 800d078:	d11a      	bne.n	800d0b0 <_printf_common+0xc8>
 800d07a:	2000      	movs	r0, #0
 800d07c:	e008      	b.n	800d090 <_printf_common+0xa8>
 800d07e:	2301      	movs	r3, #1
 800d080:	4652      	mov	r2, sl
 800d082:	4641      	mov	r1, r8
 800d084:	4638      	mov	r0, r7
 800d086:	47c8      	blx	r9
 800d088:	3001      	adds	r0, #1
 800d08a:	d103      	bne.n	800d094 <_printf_common+0xac>
 800d08c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d094:	3501      	adds	r5, #1
 800d096:	e7c6      	b.n	800d026 <_printf_common+0x3e>
 800d098:	18e1      	adds	r1, r4, r3
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	2030      	movs	r0, #48	@ 0x30
 800d09e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d0a2:	4422      	add	r2, r4
 800d0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d0a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d0ac:	3302      	adds	r3, #2
 800d0ae:	e7c7      	b.n	800d040 <_printf_common+0x58>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4641      	mov	r1, r8
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	47c8      	blx	r9
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d0e6      	beq.n	800d08c <_printf_common+0xa4>
 800d0be:	3601      	adds	r6, #1
 800d0c0:	e7d9      	b.n	800d076 <_printf_common+0x8e>
	...

0800d0c4 <_printf_i>:
 800d0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	7e0f      	ldrb	r7, [r1, #24]
 800d0ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0cc:	2f78      	cmp	r7, #120	@ 0x78
 800d0ce:	4691      	mov	r9, r2
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	469a      	mov	sl, r3
 800d0d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0da:	d807      	bhi.n	800d0ec <_printf_i+0x28>
 800d0dc:	2f62      	cmp	r7, #98	@ 0x62
 800d0de:	d80a      	bhi.n	800d0f6 <_printf_i+0x32>
 800d0e0:	2f00      	cmp	r7, #0
 800d0e2:	f000 80d2 	beq.w	800d28a <_printf_i+0x1c6>
 800d0e6:	2f58      	cmp	r7, #88	@ 0x58
 800d0e8:	f000 80b9 	beq.w	800d25e <_printf_i+0x19a>
 800d0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0f4:	e03a      	b.n	800d16c <_printf_i+0xa8>
 800d0f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0fa:	2b15      	cmp	r3, #21
 800d0fc:	d8f6      	bhi.n	800d0ec <_printf_i+0x28>
 800d0fe:	a101      	add	r1, pc, #4	@ (adr r1, 800d104 <_printf_i+0x40>)
 800d100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d171 	.word	0x0800d171
 800d10c:	0800d0ed 	.word	0x0800d0ed
 800d110:	0800d0ed 	.word	0x0800d0ed
 800d114:	0800d0ed 	.word	0x0800d0ed
 800d118:	0800d0ed 	.word	0x0800d0ed
 800d11c:	0800d171 	.word	0x0800d171
 800d120:	0800d0ed 	.word	0x0800d0ed
 800d124:	0800d0ed 	.word	0x0800d0ed
 800d128:	0800d0ed 	.word	0x0800d0ed
 800d12c:	0800d0ed 	.word	0x0800d0ed
 800d130:	0800d271 	.word	0x0800d271
 800d134:	0800d19b 	.word	0x0800d19b
 800d138:	0800d22b 	.word	0x0800d22b
 800d13c:	0800d0ed 	.word	0x0800d0ed
 800d140:	0800d0ed 	.word	0x0800d0ed
 800d144:	0800d293 	.word	0x0800d293
 800d148:	0800d0ed 	.word	0x0800d0ed
 800d14c:	0800d19b 	.word	0x0800d19b
 800d150:	0800d0ed 	.word	0x0800d0ed
 800d154:	0800d0ed 	.word	0x0800d0ed
 800d158:	0800d233 	.word	0x0800d233
 800d15c:	6833      	ldr	r3, [r6, #0]
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6032      	str	r2, [r6, #0]
 800d164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d16c:	2301      	movs	r3, #1
 800d16e:	e09d      	b.n	800d2ac <_printf_i+0x1e8>
 800d170:	6833      	ldr	r3, [r6, #0]
 800d172:	6820      	ldr	r0, [r4, #0]
 800d174:	1d19      	adds	r1, r3, #4
 800d176:	6031      	str	r1, [r6, #0]
 800d178:	0606      	lsls	r6, r0, #24
 800d17a:	d501      	bpl.n	800d180 <_printf_i+0xbc>
 800d17c:	681d      	ldr	r5, [r3, #0]
 800d17e:	e003      	b.n	800d188 <_printf_i+0xc4>
 800d180:	0645      	lsls	r5, r0, #25
 800d182:	d5fb      	bpl.n	800d17c <_printf_i+0xb8>
 800d184:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d188:	2d00      	cmp	r5, #0
 800d18a:	da03      	bge.n	800d194 <_printf_i+0xd0>
 800d18c:	232d      	movs	r3, #45	@ 0x2d
 800d18e:	426d      	negs	r5, r5
 800d190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d194:	4859      	ldr	r0, [pc, #356]	@ (800d2fc <_printf_i+0x238>)
 800d196:	230a      	movs	r3, #10
 800d198:	e011      	b.n	800d1be <_printf_i+0xfa>
 800d19a:	6821      	ldr	r1, [r4, #0]
 800d19c:	6833      	ldr	r3, [r6, #0]
 800d19e:	0608      	lsls	r0, r1, #24
 800d1a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d1a4:	d402      	bmi.n	800d1ac <_printf_i+0xe8>
 800d1a6:	0649      	lsls	r1, r1, #25
 800d1a8:	bf48      	it	mi
 800d1aa:	b2ad      	uxthmi	r5, r5
 800d1ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800d1ae:	4853      	ldr	r0, [pc, #332]	@ (800d2fc <_printf_i+0x238>)
 800d1b0:	6033      	str	r3, [r6, #0]
 800d1b2:	bf14      	ite	ne
 800d1b4:	230a      	movne	r3, #10
 800d1b6:	2308      	moveq	r3, #8
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d1be:	6866      	ldr	r6, [r4, #4]
 800d1c0:	60a6      	str	r6, [r4, #8]
 800d1c2:	2e00      	cmp	r6, #0
 800d1c4:	bfa2      	ittt	ge
 800d1c6:	6821      	ldrge	r1, [r4, #0]
 800d1c8:	f021 0104 	bicge.w	r1, r1, #4
 800d1cc:	6021      	strge	r1, [r4, #0]
 800d1ce:	b90d      	cbnz	r5, 800d1d4 <_printf_i+0x110>
 800d1d0:	2e00      	cmp	r6, #0
 800d1d2:	d04b      	beq.n	800d26c <_printf_i+0x1a8>
 800d1d4:	4616      	mov	r6, r2
 800d1d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1da:	fb03 5711 	mls	r7, r3, r1, r5
 800d1de:	5dc7      	ldrb	r7, [r0, r7]
 800d1e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1e4:	462f      	mov	r7, r5
 800d1e6:	42bb      	cmp	r3, r7
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	d9f4      	bls.n	800d1d6 <_printf_i+0x112>
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	d10b      	bne.n	800d208 <_printf_i+0x144>
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	07df      	lsls	r7, r3, #31
 800d1f4:	d508      	bpl.n	800d208 <_printf_i+0x144>
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	6861      	ldr	r1, [r4, #4]
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	bfde      	ittt	le
 800d1fe:	2330      	movle	r3, #48	@ 0x30
 800d200:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d204:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d208:	1b92      	subs	r2, r2, r6
 800d20a:	6122      	str	r2, [r4, #16]
 800d20c:	f8cd a000 	str.w	sl, [sp]
 800d210:	464b      	mov	r3, r9
 800d212:	aa03      	add	r2, sp, #12
 800d214:	4621      	mov	r1, r4
 800d216:	4640      	mov	r0, r8
 800d218:	f7ff fee6 	bl	800cfe8 <_printf_common>
 800d21c:	3001      	adds	r0, #1
 800d21e:	d14a      	bne.n	800d2b6 <_printf_i+0x1f2>
 800d220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d224:	b004      	add	sp, #16
 800d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	f043 0320 	orr.w	r3, r3, #32
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	4833      	ldr	r0, [pc, #204]	@ (800d300 <_printf_i+0x23c>)
 800d234:	2778      	movs	r7, #120	@ 0x78
 800d236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	6831      	ldr	r1, [r6, #0]
 800d23e:	061f      	lsls	r7, r3, #24
 800d240:	f851 5b04 	ldr.w	r5, [r1], #4
 800d244:	d402      	bmi.n	800d24c <_printf_i+0x188>
 800d246:	065f      	lsls	r7, r3, #25
 800d248:	bf48      	it	mi
 800d24a:	b2ad      	uxthmi	r5, r5
 800d24c:	6031      	str	r1, [r6, #0]
 800d24e:	07d9      	lsls	r1, r3, #31
 800d250:	bf44      	itt	mi
 800d252:	f043 0320 	orrmi.w	r3, r3, #32
 800d256:	6023      	strmi	r3, [r4, #0]
 800d258:	b11d      	cbz	r5, 800d262 <_printf_i+0x19e>
 800d25a:	2310      	movs	r3, #16
 800d25c:	e7ac      	b.n	800d1b8 <_printf_i+0xf4>
 800d25e:	4827      	ldr	r0, [pc, #156]	@ (800d2fc <_printf_i+0x238>)
 800d260:	e7e9      	b.n	800d236 <_printf_i+0x172>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f023 0320 	bic.w	r3, r3, #32
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	e7f6      	b.n	800d25a <_printf_i+0x196>
 800d26c:	4616      	mov	r6, r2
 800d26e:	e7bd      	b.n	800d1ec <_printf_i+0x128>
 800d270:	6833      	ldr	r3, [r6, #0]
 800d272:	6825      	ldr	r5, [r4, #0]
 800d274:	6961      	ldr	r1, [r4, #20]
 800d276:	1d18      	adds	r0, r3, #4
 800d278:	6030      	str	r0, [r6, #0]
 800d27a:	062e      	lsls	r6, r5, #24
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	d501      	bpl.n	800d284 <_printf_i+0x1c0>
 800d280:	6019      	str	r1, [r3, #0]
 800d282:	e002      	b.n	800d28a <_printf_i+0x1c6>
 800d284:	0668      	lsls	r0, r5, #25
 800d286:	d5fb      	bpl.n	800d280 <_printf_i+0x1bc>
 800d288:	8019      	strh	r1, [r3, #0]
 800d28a:	2300      	movs	r3, #0
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	4616      	mov	r6, r2
 800d290:	e7bc      	b.n	800d20c <_printf_i+0x148>
 800d292:	6833      	ldr	r3, [r6, #0]
 800d294:	1d1a      	adds	r2, r3, #4
 800d296:	6032      	str	r2, [r6, #0]
 800d298:	681e      	ldr	r6, [r3, #0]
 800d29a:	6862      	ldr	r2, [r4, #4]
 800d29c:	2100      	movs	r1, #0
 800d29e:	4630      	mov	r0, r6
 800d2a0:	f7f3 f836 	bl	8000310 <memchr>
 800d2a4:	b108      	cbz	r0, 800d2aa <_printf_i+0x1e6>
 800d2a6:	1b80      	subs	r0, r0, r6
 800d2a8:	6060      	str	r0, [r4, #4]
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	6123      	str	r3, [r4, #16]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2b4:	e7aa      	b.n	800d20c <_printf_i+0x148>
 800d2b6:	6923      	ldr	r3, [r4, #16]
 800d2b8:	4632      	mov	r2, r6
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	4640      	mov	r0, r8
 800d2be:	47d0      	blx	sl
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	d0ad      	beq.n	800d220 <_printf_i+0x15c>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	079b      	lsls	r3, r3, #30
 800d2c8:	d413      	bmi.n	800d2f2 <_printf_i+0x22e>
 800d2ca:	68e0      	ldr	r0, [r4, #12]
 800d2cc:	9b03      	ldr	r3, [sp, #12]
 800d2ce:	4298      	cmp	r0, r3
 800d2d0:	bfb8      	it	lt
 800d2d2:	4618      	movlt	r0, r3
 800d2d4:	e7a6      	b.n	800d224 <_printf_i+0x160>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	4632      	mov	r2, r6
 800d2da:	4649      	mov	r1, r9
 800d2dc:	4640      	mov	r0, r8
 800d2de:	47d0      	blx	sl
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d09d      	beq.n	800d220 <_printf_i+0x15c>
 800d2e4:	3501      	adds	r5, #1
 800d2e6:	68e3      	ldr	r3, [r4, #12]
 800d2e8:	9903      	ldr	r1, [sp, #12]
 800d2ea:	1a5b      	subs	r3, r3, r1
 800d2ec:	42ab      	cmp	r3, r5
 800d2ee:	dcf2      	bgt.n	800d2d6 <_printf_i+0x212>
 800d2f0:	e7eb      	b.n	800d2ca <_printf_i+0x206>
 800d2f2:	2500      	movs	r5, #0
 800d2f4:	f104 0619 	add.w	r6, r4, #25
 800d2f8:	e7f5      	b.n	800d2e6 <_printf_i+0x222>
 800d2fa:	bf00      	nop
 800d2fc:	0800f2aa 	.word	0x0800f2aa
 800d300:	0800f2bb 	.word	0x0800f2bb

0800d304 <__malloc_lock>:
 800d304:	4801      	ldr	r0, [pc, #4]	@ (800d30c <__malloc_lock+0x8>)
 800d306:	f000 b9ac 	b.w	800d662 <__retarget_lock_acquire_recursive>
 800d30a:	bf00      	nop
 800d30c:	240424f8 	.word	0x240424f8

0800d310 <__malloc_unlock>:
 800d310:	4801      	ldr	r0, [pc, #4]	@ (800d318 <__malloc_unlock+0x8>)
 800d312:	f000 b9a7 	b.w	800d664 <__retarget_lock_release_recursive>
 800d316:	bf00      	nop
 800d318:	240424f8 	.word	0x240424f8

0800d31c <std>:
 800d31c:	2300      	movs	r3, #0
 800d31e:	b510      	push	{r4, lr}
 800d320:	4604      	mov	r4, r0
 800d322:	e9c0 3300 	strd	r3, r3, [r0]
 800d326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d32a:	6083      	str	r3, [r0, #8]
 800d32c:	8181      	strh	r1, [r0, #12]
 800d32e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d330:	81c2      	strh	r2, [r0, #14]
 800d332:	6183      	str	r3, [r0, #24]
 800d334:	4619      	mov	r1, r3
 800d336:	2208      	movs	r2, #8
 800d338:	305c      	adds	r0, #92	@ 0x5c
 800d33a:	f000 f8b1 	bl	800d4a0 <memset>
 800d33e:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <std+0x58>)
 800d340:	6263      	str	r3, [r4, #36]	@ 0x24
 800d342:	4b0d      	ldr	r3, [pc, #52]	@ (800d378 <std+0x5c>)
 800d344:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d346:	4b0d      	ldr	r3, [pc, #52]	@ (800d37c <std+0x60>)
 800d348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d34a:	4b0d      	ldr	r3, [pc, #52]	@ (800d380 <std+0x64>)
 800d34c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d34e:	4b0d      	ldr	r3, [pc, #52]	@ (800d384 <std+0x68>)
 800d350:	6224      	str	r4, [r4, #32]
 800d352:	429c      	cmp	r4, r3
 800d354:	d006      	beq.n	800d364 <std+0x48>
 800d356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d35a:	4294      	cmp	r4, r2
 800d35c:	d002      	beq.n	800d364 <std+0x48>
 800d35e:	33d0      	adds	r3, #208	@ 0xd0
 800d360:	429c      	cmp	r4, r3
 800d362:	d105      	bne.n	800d370 <std+0x54>
 800d364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d36c:	f000 b978 	b.w	800d660 <__retarget_lock_init_recursive>
 800d370:	bd10      	pop	{r4, pc}
 800d372:	bf00      	nop
 800d374:	0800eb35 	.word	0x0800eb35
 800d378:	0800eb57 	.word	0x0800eb57
 800d37c:	0800eb8f 	.word	0x0800eb8f
 800d380:	0800ebb3 	.word	0x0800ebb3
 800d384:	240423b8 	.word	0x240423b8

0800d388 <stdio_exit_handler>:
 800d388:	4a02      	ldr	r2, [pc, #8]	@ (800d394 <stdio_exit_handler+0xc>)
 800d38a:	4903      	ldr	r1, [pc, #12]	@ (800d398 <stdio_exit_handler+0x10>)
 800d38c:	4803      	ldr	r0, [pc, #12]	@ (800d39c <stdio_exit_handler+0x14>)
 800d38e:	f000 b869 	b.w	800d464 <_fwalk_sglue>
 800d392:	bf00      	nop
 800d394:	24000014 	.word	0x24000014
 800d398:	0800e3e1 	.word	0x0800e3e1
 800d39c:	24000024 	.word	0x24000024

0800d3a0 <cleanup_stdio>:
 800d3a0:	6841      	ldr	r1, [r0, #4]
 800d3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d4 <cleanup_stdio+0x34>)
 800d3a4:	4299      	cmp	r1, r3
 800d3a6:	b510      	push	{r4, lr}
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	d001      	beq.n	800d3b0 <cleanup_stdio+0x10>
 800d3ac:	f001 f818 	bl	800e3e0 <_fflush_r>
 800d3b0:	68a1      	ldr	r1, [r4, #8]
 800d3b2:	4b09      	ldr	r3, [pc, #36]	@ (800d3d8 <cleanup_stdio+0x38>)
 800d3b4:	4299      	cmp	r1, r3
 800d3b6:	d002      	beq.n	800d3be <cleanup_stdio+0x1e>
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f001 f811 	bl	800e3e0 <_fflush_r>
 800d3be:	68e1      	ldr	r1, [r4, #12]
 800d3c0:	4b06      	ldr	r3, [pc, #24]	@ (800d3dc <cleanup_stdio+0x3c>)
 800d3c2:	4299      	cmp	r1, r3
 800d3c4:	d004      	beq.n	800d3d0 <cleanup_stdio+0x30>
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3cc:	f001 b808 	b.w	800e3e0 <_fflush_r>
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	bf00      	nop
 800d3d4:	240423b8 	.word	0x240423b8
 800d3d8:	24042420 	.word	0x24042420
 800d3dc:	24042488 	.word	0x24042488

0800d3e0 <global_stdio_init.part.0>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d410 <global_stdio_init.part.0+0x30>)
 800d3e4:	4c0b      	ldr	r4, [pc, #44]	@ (800d414 <global_stdio_init.part.0+0x34>)
 800d3e6:	4a0c      	ldr	r2, [pc, #48]	@ (800d418 <global_stdio_init.part.0+0x38>)
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2104      	movs	r1, #4
 800d3f0:	f7ff ff94 	bl	800d31c <std>
 800d3f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	2109      	movs	r1, #9
 800d3fc:	f7ff ff8e 	bl	800d31c <std>
 800d400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d404:	2202      	movs	r2, #2
 800d406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d40a:	2112      	movs	r1, #18
 800d40c:	f7ff bf86 	b.w	800d31c <std>
 800d410:	240424f0 	.word	0x240424f0
 800d414:	240423b8 	.word	0x240423b8
 800d418:	0800d389 	.word	0x0800d389

0800d41c <__sfp_lock_acquire>:
 800d41c:	4801      	ldr	r0, [pc, #4]	@ (800d424 <__sfp_lock_acquire+0x8>)
 800d41e:	f000 b920 	b.w	800d662 <__retarget_lock_acquire_recursive>
 800d422:	bf00      	nop
 800d424:	240424f9 	.word	0x240424f9

0800d428 <__sfp_lock_release>:
 800d428:	4801      	ldr	r0, [pc, #4]	@ (800d430 <__sfp_lock_release+0x8>)
 800d42a:	f000 b91b 	b.w	800d664 <__retarget_lock_release_recursive>
 800d42e:	bf00      	nop
 800d430:	240424f9 	.word	0x240424f9

0800d434 <__sinit>:
 800d434:	b510      	push	{r4, lr}
 800d436:	4604      	mov	r4, r0
 800d438:	f7ff fff0 	bl	800d41c <__sfp_lock_acquire>
 800d43c:	6a23      	ldr	r3, [r4, #32]
 800d43e:	b11b      	cbz	r3, 800d448 <__sinit+0x14>
 800d440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d444:	f7ff bff0 	b.w	800d428 <__sfp_lock_release>
 800d448:	4b04      	ldr	r3, [pc, #16]	@ (800d45c <__sinit+0x28>)
 800d44a:	6223      	str	r3, [r4, #32]
 800d44c:	4b04      	ldr	r3, [pc, #16]	@ (800d460 <__sinit+0x2c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f5      	bne.n	800d440 <__sinit+0xc>
 800d454:	f7ff ffc4 	bl	800d3e0 <global_stdio_init.part.0>
 800d458:	e7f2      	b.n	800d440 <__sinit+0xc>
 800d45a:	bf00      	nop
 800d45c:	0800d3a1 	.word	0x0800d3a1
 800d460:	240424f0 	.word	0x240424f0

0800d464 <_fwalk_sglue>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	4607      	mov	r7, r0
 800d46a:	4688      	mov	r8, r1
 800d46c:	4614      	mov	r4, r2
 800d46e:	2600      	movs	r6, #0
 800d470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d474:	f1b9 0901 	subs.w	r9, r9, #1
 800d478:	d505      	bpl.n	800d486 <_fwalk_sglue+0x22>
 800d47a:	6824      	ldr	r4, [r4, #0]
 800d47c:	2c00      	cmp	r4, #0
 800d47e:	d1f7      	bne.n	800d470 <_fwalk_sglue+0xc>
 800d480:	4630      	mov	r0, r6
 800d482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d907      	bls.n	800d49c <_fwalk_sglue+0x38>
 800d48c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d490:	3301      	adds	r3, #1
 800d492:	d003      	beq.n	800d49c <_fwalk_sglue+0x38>
 800d494:	4629      	mov	r1, r5
 800d496:	4638      	mov	r0, r7
 800d498:	47c0      	blx	r8
 800d49a:	4306      	orrs	r6, r0
 800d49c:	3568      	adds	r5, #104	@ 0x68
 800d49e:	e7e9      	b.n	800d474 <_fwalk_sglue+0x10>

0800d4a0 <memset>:
 800d4a0:	4402      	add	r2, r0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d100      	bne.n	800d4aa <memset+0xa>
 800d4a8:	4770      	bx	lr
 800d4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d4ae:	e7f9      	b.n	800d4a4 <memset+0x4>

0800d4b0 <_localeconv_r>:
 800d4b0:	4800      	ldr	r0, [pc, #0]	@ (800d4b4 <_localeconv_r+0x4>)
 800d4b2:	4770      	bx	lr
 800d4b4:	24000160 	.word	0x24000160

0800d4b8 <_reclaim_reent>:
 800d4b8:	4b29      	ldr	r3, [pc, #164]	@ (800d560 <_reclaim_reent+0xa8>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4283      	cmp	r3, r0
 800d4be:	b570      	push	{r4, r5, r6, lr}
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	d04b      	beq.n	800d55c <_reclaim_reent+0xa4>
 800d4c4:	69c3      	ldr	r3, [r0, #28]
 800d4c6:	b1ab      	cbz	r3, 800d4f4 <_reclaim_reent+0x3c>
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	b16b      	cbz	r3, 800d4e8 <_reclaim_reent+0x30>
 800d4cc:	2500      	movs	r5, #0
 800d4ce:	69e3      	ldr	r3, [r4, #28]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	5959      	ldr	r1, [r3, r5]
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	d13b      	bne.n	800d550 <_reclaim_reent+0x98>
 800d4d8:	3504      	adds	r5, #4
 800d4da:	2d80      	cmp	r5, #128	@ 0x80
 800d4dc:	d1f7      	bne.n	800d4ce <_reclaim_reent+0x16>
 800d4de:	69e3      	ldr	r3, [r4, #28]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	68d9      	ldr	r1, [r3, #12]
 800d4e4:	f000 feae 	bl	800e244 <_free_r>
 800d4e8:	69e3      	ldr	r3, [r4, #28]
 800d4ea:	6819      	ldr	r1, [r3, #0]
 800d4ec:	b111      	cbz	r1, 800d4f4 <_reclaim_reent+0x3c>
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 fea8 	bl	800e244 <_free_r>
 800d4f4:	6961      	ldr	r1, [r4, #20]
 800d4f6:	b111      	cbz	r1, 800d4fe <_reclaim_reent+0x46>
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fea3 	bl	800e244 <_free_r>
 800d4fe:	69e1      	ldr	r1, [r4, #28]
 800d500:	b111      	cbz	r1, 800d508 <_reclaim_reent+0x50>
 800d502:	4620      	mov	r0, r4
 800d504:	f000 fe9e 	bl	800e244 <_free_r>
 800d508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d50a:	b111      	cbz	r1, 800d512 <_reclaim_reent+0x5a>
 800d50c:	4620      	mov	r0, r4
 800d50e:	f000 fe99 	bl	800e244 <_free_r>
 800d512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d514:	b111      	cbz	r1, 800d51c <_reclaim_reent+0x64>
 800d516:	4620      	mov	r0, r4
 800d518:	f000 fe94 	bl	800e244 <_free_r>
 800d51c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d51e:	b111      	cbz	r1, 800d526 <_reclaim_reent+0x6e>
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fe8f 	bl	800e244 <_free_r>
 800d526:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d528:	b111      	cbz	r1, 800d530 <_reclaim_reent+0x78>
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 fe8a 	bl	800e244 <_free_r>
 800d530:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d532:	b111      	cbz	r1, 800d53a <_reclaim_reent+0x82>
 800d534:	4620      	mov	r0, r4
 800d536:	f000 fe85 	bl	800e244 <_free_r>
 800d53a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d53c:	b111      	cbz	r1, 800d544 <_reclaim_reent+0x8c>
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 fe80 	bl	800e244 <_free_r>
 800d544:	6a23      	ldr	r3, [r4, #32]
 800d546:	b14b      	cbz	r3, 800d55c <_reclaim_reent+0xa4>
 800d548:	4620      	mov	r0, r4
 800d54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d54e:	4718      	bx	r3
 800d550:	680e      	ldr	r6, [r1, #0]
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fe76 	bl	800e244 <_free_r>
 800d558:	4631      	mov	r1, r6
 800d55a:	e7bb      	b.n	800d4d4 <_reclaim_reent+0x1c>
 800d55c:	bd70      	pop	{r4, r5, r6, pc}
 800d55e:	bf00      	nop
 800d560:	24000020 	.word	0x24000020

0800d564 <_raise_r>:
 800d564:	291f      	cmp	r1, #31
 800d566:	b538      	push	{r3, r4, r5, lr}
 800d568:	4605      	mov	r5, r0
 800d56a:	460c      	mov	r4, r1
 800d56c:	d904      	bls.n	800d578 <_raise_r+0x14>
 800d56e:	2316      	movs	r3, #22
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d57a:	b112      	cbz	r2, 800d582 <_raise_r+0x1e>
 800d57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d580:	b94b      	cbnz	r3, 800d596 <_raise_r+0x32>
 800d582:	4628      	mov	r0, r5
 800d584:	f000 f830 	bl	800d5e8 <_getpid_r>
 800d588:	4622      	mov	r2, r4
 800d58a:	4601      	mov	r1, r0
 800d58c:	4628      	mov	r0, r5
 800d58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d592:	f000 b817 	b.w	800d5c4 <_kill_r>
 800d596:	2b01      	cmp	r3, #1
 800d598:	d00a      	beq.n	800d5b0 <_raise_r+0x4c>
 800d59a:	1c59      	adds	r1, r3, #1
 800d59c:	d103      	bne.n	800d5a6 <_raise_r+0x42>
 800d59e:	2316      	movs	r3, #22
 800d5a0:	6003      	str	r3, [r0, #0]
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7e7      	b.n	800d576 <_raise_r+0x12>
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	4798      	blx	r3
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	e7e0      	b.n	800d576 <_raise_r+0x12>

0800d5b4 <raise>:
 800d5b4:	4b02      	ldr	r3, [pc, #8]	@ (800d5c0 <raise+0xc>)
 800d5b6:	4601      	mov	r1, r0
 800d5b8:	6818      	ldr	r0, [r3, #0]
 800d5ba:	f7ff bfd3 	b.w	800d564 <_raise_r>
 800d5be:	bf00      	nop
 800d5c0:	24000020 	.word	0x24000020

0800d5c4 <_kill_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d07      	ldr	r5, [pc, #28]	@ (800d5e4 <_kill_r+0x20>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f7f4 ff45 	bl	8002460 <_kill>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d102      	bne.n	800d5e0 <_kill_r+0x1c>
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	b103      	cbz	r3, 800d5e0 <_kill_r+0x1c>
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	bf00      	nop
 800d5e4:	240424f4 	.word	0x240424f4

0800d5e8 <_getpid_r>:
 800d5e8:	f7f4 bf32 	b.w	8002450 <_getpid>

0800d5ec <_sbrk_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d06      	ldr	r5, [pc, #24]	@ (800d608 <_sbrk_r+0x1c>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	602b      	str	r3, [r5, #0]
 800d5f8:	f7f4 ffba 	bl	8002570 <_sbrk>
 800d5fc:	1c43      	adds	r3, r0, #1
 800d5fe:	d102      	bne.n	800d606 <_sbrk_r+0x1a>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	b103      	cbz	r3, 800d606 <_sbrk_r+0x1a>
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	240424f4 	.word	0x240424f4

0800d60c <__errno>:
 800d60c:	4b01      	ldr	r3, [pc, #4]	@ (800d614 <__errno+0x8>)
 800d60e:	6818      	ldr	r0, [r3, #0]
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	24000020 	.word	0x24000020

0800d618 <__libc_init_array>:
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	4d0d      	ldr	r5, [pc, #52]	@ (800d650 <__libc_init_array+0x38>)
 800d61c:	4c0d      	ldr	r4, [pc, #52]	@ (800d654 <__libc_init_array+0x3c>)
 800d61e:	1b64      	subs	r4, r4, r5
 800d620:	10a4      	asrs	r4, r4, #2
 800d622:	2600      	movs	r6, #0
 800d624:	42a6      	cmp	r6, r4
 800d626:	d109      	bne.n	800d63c <__libc_init_array+0x24>
 800d628:	4d0b      	ldr	r5, [pc, #44]	@ (800d658 <__libc_init_array+0x40>)
 800d62a:	4c0c      	ldr	r4, [pc, #48]	@ (800d65c <__libc_init_array+0x44>)
 800d62c:	f001 fdc8 	bl	800f1c0 <_init>
 800d630:	1b64      	subs	r4, r4, r5
 800d632:	10a4      	asrs	r4, r4, #2
 800d634:	2600      	movs	r6, #0
 800d636:	42a6      	cmp	r6, r4
 800d638:	d105      	bne.n	800d646 <__libc_init_array+0x2e>
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d640:	4798      	blx	r3
 800d642:	3601      	adds	r6, #1
 800d644:	e7ee      	b.n	800d624 <__libc_init_array+0xc>
 800d646:	f855 3b04 	ldr.w	r3, [r5], #4
 800d64a:	4798      	blx	r3
 800d64c:	3601      	adds	r6, #1
 800d64e:	e7f2      	b.n	800d636 <__libc_init_array+0x1e>
 800d650:	0800f610 	.word	0x0800f610
 800d654:	0800f610 	.word	0x0800f610
 800d658:	0800f610 	.word	0x0800f610
 800d65c:	0800f614 	.word	0x0800f614

0800d660 <__retarget_lock_init_recursive>:
 800d660:	4770      	bx	lr

0800d662 <__retarget_lock_acquire_recursive>:
 800d662:	4770      	bx	lr

0800d664 <__retarget_lock_release_recursive>:
 800d664:	4770      	bx	lr

0800d666 <memcpy>:
 800d666:	440a      	add	r2, r1
 800d668:	4291      	cmp	r1, r2
 800d66a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d66e:	d100      	bne.n	800d672 <memcpy+0xc>
 800d670:	4770      	bx	lr
 800d672:	b510      	push	{r4, lr}
 800d674:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d67c:	4291      	cmp	r1, r2
 800d67e:	d1f9      	bne.n	800d674 <memcpy+0xe>
 800d680:	bd10      	pop	{r4, pc}

0800d682 <quorem>:
 800d682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d686:	6903      	ldr	r3, [r0, #16]
 800d688:	690c      	ldr	r4, [r1, #16]
 800d68a:	42a3      	cmp	r3, r4
 800d68c:	4607      	mov	r7, r0
 800d68e:	db7e      	blt.n	800d78e <quorem+0x10c>
 800d690:	3c01      	subs	r4, #1
 800d692:	f101 0814 	add.w	r8, r1, #20
 800d696:	00a3      	lsls	r3, r4, #2
 800d698:	f100 0514 	add.w	r5, r0, #20
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6b8:	d32e      	bcc.n	800d718 <quorem+0x96>
 800d6ba:	f04f 0a00 	mov.w	sl, #0
 800d6be:	46c4      	mov	ip, r8
 800d6c0:	46ae      	mov	lr, r5
 800d6c2:	46d3      	mov	fp, sl
 800d6c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d6c8:	b298      	uxth	r0, r3
 800d6ca:	fb06 a000 	mla	r0, r6, r0, sl
 800d6ce:	0c02      	lsrs	r2, r0, #16
 800d6d0:	0c1b      	lsrs	r3, r3, #16
 800d6d2:	fb06 2303 	mla	r3, r6, r3, r2
 800d6d6:	f8de 2000 	ldr.w	r2, [lr]
 800d6da:	b280      	uxth	r0, r0
 800d6dc:	b292      	uxth	r2, r2
 800d6de:	1a12      	subs	r2, r2, r0
 800d6e0:	445a      	add	r2, fp
 800d6e2:	f8de 0000 	ldr.w	r0, [lr]
 800d6e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d6f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d6fa:	45e1      	cmp	r9, ip
 800d6fc:	f84e 2b04 	str.w	r2, [lr], #4
 800d700:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d704:	d2de      	bcs.n	800d6c4 <quorem+0x42>
 800d706:	9b00      	ldr	r3, [sp, #0]
 800d708:	58eb      	ldr	r3, [r5, r3]
 800d70a:	b92b      	cbnz	r3, 800d718 <quorem+0x96>
 800d70c:	9b01      	ldr	r3, [sp, #4]
 800d70e:	3b04      	subs	r3, #4
 800d710:	429d      	cmp	r5, r3
 800d712:	461a      	mov	r2, r3
 800d714:	d32f      	bcc.n	800d776 <quorem+0xf4>
 800d716:	613c      	str	r4, [r7, #16]
 800d718:	4638      	mov	r0, r7
 800d71a:	f001 f903 	bl	800e924 <__mcmp>
 800d71e:	2800      	cmp	r0, #0
 800d720:	db25      	blt.n	800d76e <quorem+0xec>
 800d722:	4629      	mov	r1, r5
 800d724:	2000      	movs	r0, #0
 800d726:	f858 2b04 	ldr.w	r2, [r8], #4
 800d72a:	f8d1 c000 	ldr.w	ip, [r1]
 800d72e:	fa1f fe82 	uxth.w	lr, r2
 800d732:	fa1f f38c 	uxth.w	r3, ip
 800d736:	eba3 030e 	sub.w	r3, r3, lr
 800d73a:	4403      	add	r3, r0
 800d73c:	0c12      	lsrs	r2, r2, #16
 800d73e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d742:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d746:	b29b      	uxth	r3, r3
 800d748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d74c:	45c1      	cmp	r9, r8
 800d74e:	f841 3b04 	str.w	r3, [r1], #4
 800d752:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d756:	d2e6      	bcs.n	800d726 <quorem+0xa4>
 800d758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d75c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d760:	b922      	cbnz	r2, 800d76c <quorem+0xea>
 800d762:	3b04      	subs	r3, #4
 800d764:	429d      	cmp	r5, r3
 800d766:	461a      	mov	r2, r3
 800d768:	d30b      	bcc.n	800d782 <quorem+0x100>
 800d76a:	613c      	str	r4, [r7, #16]
 800d76c:	3601      	adds	r6, #1
 800d76e:	4630      	mov	r0, r6
 800d770:	b003      	add	sp, #12
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d776:	6812      	ldr	r2, [r2, #0]
 800d778:	3b04      	subs	r3, #4
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	d1cb      	bne.n	800d716 <quorem+0x94>
 800d77e:	3c01      	subs	r4, #1
 800d780:	e7c6      	b.n	800d710 <quorem+0x8e>
 800d782:	6812      	ldr	r2, [r2, #0]
 800d784:	3b04      	subs	r3, #4
 800d786:	2a00      	cmp	r2, #0
 800d788:	d1ef      	bne.n	800d76a <quorem+0xe8>
 800d78a:	3c01      	subs	r4, #1
 800d78c:	e7ea      	b.n	800d764 <quorem+0xe2>
 800d78e:	2000      	movs	r0, #0
 800d790:	e7ee      	b.n	800d770 <quorem+0xee>
 800d792:	0000      	movs	r0, r0
 800d794:	0000      	movs	r0, r0
	...

0800d798 <_dtoa_r>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	ed2d 8b02 	vpush	{d8}
 800d7a0:	69c7      	ldr	r7, [r0, #28]
 800d7a2:	b091      	sub	sp, #68	@ 0x44
 800d7a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d7a8:	ec55 4b10 	vmov	r4, r5, d0
 800d7ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d7ae:	9107      	str	r1, [sp, #28]
 800d7b0:	4681      	mov	r9, r0
 800d7b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d7b6:	b97f      	cbnz	r7, 800d7d8 <_dtoa_r+0x40>
 800d7b8:	2010      	movs	r0, #16
 800d7ba:	f7ff fb6b 	bl	800ce94 <malloc>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800d7c4:	b920      	cbnz	r0, 800d7d0 <_dtoa_r+0x38>
 800d7c6:	4ba0      	ldr	r3, [pc, #640]	@ (800da48 <_dtoa_r+0x2b0>)
 800d7c8:	21ef      	movs	r1, #239	@ 0xef
 800d7ca:	48a0      	ldr	r0, [pc, #640]	@ (800da4c <_dtoa_r+0x2b4>)
 800d7cc:	f001 fa3c 	bl	800ec48 <__assert_func>
 800d7d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d7d4:	6007      	str	r7, [r0, #0]
 800d7d6:	60c7      	str	r7, [r0, #12]
 800d7d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	b159      	cbz	r1, 800d7f8 <_dtoa_r+0x60>
 800d7e0:	685a      	ldr	r2, [r3, #4]
 800d7e2:	604a      	str	r2, [r1, #4]
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4093      	lsls	r3, r2
 800d7e8:	608b      	str	r3, [r1, #8]
 800d7ea:	4648      	mov	r0, r9
 800d7ec:	f000 fe60 	bl	800e4b0 <_Bfree>
 800d7f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	1e2b      	subs	r3, r5, #0
 800d7fa:	bfbb      	ittet	lt
 800d7fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d800:	9303      	strlt	r3, [sp, #12]
 800d802:	2300      	movge	r3, #0
 800d804:	2201      	movlt	r2, #1
 800d806:	bfac      	ite	ge
 800d808:	6033      	strge	r3, [r6, #0]
 800d80a:	6032      	strlt	r2, [r6, #0]
 800d80c:	4b90      	ldr	r3, [pc, #576]	@ (800da50 <_dtoa_r+0x2b8>)
 800d80e:	9e03      	ldr	r6, [sp, #12]
 800d810:	43b3      	bics	r3, r6
 800d812:	d110      	bne.n	800d836 <_dtoa_r+0x9e>
 800d814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d816:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d820:	4323      	orrs	r3, r4
 800d822:	f000 84de 	beq.w	800e1e2 <_dtoa_r+0xa4a>
 800d826:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d828:	4f8a      	ldr	r7, [pc, #552]	@ (800da54 <_dtoa_r+0x2bc>)
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 84e0 	beq.w	800e1f0 <_dtoa_r+0xa58>
 800d830:	1cfb      	adds	r3, r7, #3
 800d832:	f000 bcdb 	b.w	800e1ec <_dtoa_r+0xa54>
 800d836:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d83a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	d10a      	bne.n	800d85a <_dtoa_r+0xc2>
 800d844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d846:	2301      	movs	r3, #1
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d84c:	b113      	cbz	r3, 800d854 <_dtoa_r+0xbc>
 800d84e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d850:	4b81      	ldr	r3, [pc, #516]	@ (800da58 <_dtoa_r+0x2c0>)
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	4f81      	ldr	r7, [pc, #516]	@ (800da5c <_dtoa_r+0x2c4>)
 800d856:	f000 bccb 	b.w	800e1f0 <_dtoa_r+0xa58>
 800d85a:	aa0e      	add	r2, sp, #56	@ 0x38
 800d85c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d85e:	4648      	mov	r0, r9
 800d860:	eeb0 0b48 	vmov.f64	d0, d8
 800d864:	f001 f90e 	bl	800ea84 <__d2b>
 800d868:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d86c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d86e:	9001      	str	r0, [sp, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d045      	beq.n	800d900 <_dtoa_r+0x168>
 800d874:	eeb0 7b48 	vmov.f64	d7, d8
 800d878:	ee18 1a90 	vmov	r1, s17
 800d87c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d880:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d884:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d888:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d88c:	2500      	movs	r5, #0
 800d88e:	ee07 1a90 	vmov	s15, r1
 800d892:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d896:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800da30 <_dtoa_r+0x298>
 800d89a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d89e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800da38 <_dtoa_r+0x2a0>
 800d8a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d8a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800da40 <_dtoa_r+0x2a8>
 800d8aa:	ee07 3a90 	vmov	s15, r3
 800d8ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d8b2:	eeb0 7b46 	vmov.f64	d7, d6
 800d8b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d8ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d8be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c6:	ee16 8a90 	vmov	r8, s13
 800d8ca:	d508      	bpl.n	800d8de <_dtoa_r+0x146>
 800d8cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d8d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800d8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d8:	bf18      	it	ne
 800d8da:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800d8de:	f1b8 0f16 	cmp.w	r8, #22
 800d8e2:	d82b      	bhi.n	800d93c <_dtoa_r+0x1a4>
 800d8e4:	495e      	ldr	r1, [pc, #376]	@ (800da60 <_dtoa_r+0x2c8>)
 800d8e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d8ea:	ed91 7b00 	vldr	d7, [r1]
 800d8ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	d501      	bpl.n	800d8fc <_dtoa_r+0x164>
 800d8f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	e01e      	b.n	800d93e <_dtoa_r+0x1a6>
 800d900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d902:	4413      	add	r3, r2
 800d904:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d908:	2920      	cmp	r1, #32
 800d90a:	bfc1      	itttt	gt
 800d90c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d910:	408e      	lslgt	r6, r1
 800d912:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d916:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d91a:	bfd6      	itet	le
 800d91c:	f1c1 0120 	rsble	r1, r1, #32
 800d920:	4331      	orrgt	r1, r6
 800d922:	fa04 f101 	lslle.w	r1, r4, r1
 800d926:	ee07 1a90 	vmov	s15, r1
 800d92a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d92e:	3b01      	subs	r3, #1
 800d930:	ee17 1a90 	vmov	r1, s15
 800d934:	2501      	movs	r5, #1
 800d936:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d93a:	e7a8      	b.n	800d88e <_dtoa_r+0xf6>
 800d93c:	2101      	movs	r1, #1
 800d93e:	1ad2      	subs	r2, r2, r3
 800d940:	1e53      	subs	r3, r2, #1
 800d942:	9306      	str	r3, [sp, #24]
 800d944:	bf45      	ittet	mi
 800d946:	f1c2 0301 	rsbmi	r3, r2, #1
 800d94a:	9305      	strmi	r3, [sp, #20]
 800d94c:	2300      	movpl	r3, #0
 800d94e:	2300      	movmi	r3, #0
 800d950:	bf4c      	ite	mi
 800d952:	9306      	strmi	r3, [sp, #24]
 800d954:	9305      	strpl	r3, [sp, #20]
 800d956:	f1b8 0f00 	cmp.w	r8, #0
 800d95a:	910c      	str	r1, [sp, #48]	@ 0x30
 800d95c:	db18      	blt.n	800d990 <_dtoa_r+0x1f8>
 800d95e:	9b06      	ldr	r3, [sp, #24]
 800d960:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d964:	4443      	add	r3, r8
 800d966:	9306      	str	r3, [sp, #24]
 800d968:	2300      	movs	r3, #0
 800d96a:	9a07      	ldr	r2, [sp, #28]
 800d96c:	2a09      	cmp	r2, #9
 800d96e:	d849      	bhi.n	800da04 <_dtoa_r+0x26c>
 800d970:	2a05      	cmp	r2, #5
 800d972:	bfc4      	itt	gt
 800d974:	3a04      	subgt	r2, #4
 800d976:	9207      	strgt	r2, [sp, #28]
 800d978:	9a07      	ldr	r2, [sp, #28]
 800d97a:	f1a2 0202 	sub.w	r2, r2, #2
 800d97e:	bfcc      	ite	gt
 800d980:	2400      	movgt	r4, #0
 800d982:	2401      	movle	r4, #1
 800d984:	2a03      	cmp	r2, #3
 800d986:	d848      	bhi.n	800da1a <_dtoa_r+0x282>
 800d988:	e8df f002 	tbb	[pc, r2]
 800d98c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d990:	9b05      	ldr	r3, [sp, #20]
 800d992:	2200      	movs	r2, #0
 800d994:	eba3 0308 	sub.w	r3, r3, r8
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d99c:	f1c8 0300 	rsb	r3, r8, #0
 800d9a0:	e7e3      	b.n	800d96a <_dtoa_r+0x1d2>
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	9208      	str	r2, [sp, #32]
 800d9a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	dc39      	bgt.n	800da20 <_dtoa_r+0x288>
 800d9ac:	f04f 0b01 	mov.w	fp, #1
 800d9b0:	46da      	mov	sl, fp
 800d9b2:	465a      	mov	r2, fp
 800d9b4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d9b8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d9bc:	2100      	movs	r1, #0
 800d9be:	2004      	movs	r0, #4
 800d9c0:	f100 0614 	add.w	r6, r0, #20
 800d9c4:	4296      	cmp	r6, r2
 800d9c6:	d930      	bls.n	800da2a <_dtoa_r+0x292>
 800d9c8:	6079      	str	r1, [r7, #4]
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	f000 fd2f 	bl	800e430 <_Balloc>
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d146      	bne.n	800da68 <_dtoa_r+0x2d0>
 800d9da:	4b22      	ldr	r3, [pc, #136]	@ (800da64 <_dtoa_r+0x2cc>)
 800d9dc:	4602      	mov	r2, r0
 800d9de:	f240 11af 	movw	r1, #431	@ 0x1af
 800d9e2:	e6f2      	b.n	800d7ca <_dtoa_r+0x32>
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	e7dd      	b.n	800d9a4 <_dtoa_r+0x20c>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	9208      	str	r2, [sp, #32]
 800d9ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ee:	eb08 0b02 	add.w	fp, r8, r2
 800d9f2:	f10b 0a01 	add.w	sl, fp, #1
 800d9f6:	4652      	mov	r2, sl
 800d9f8:	2a01      	cmp	r2, #1
 800d9fa:	bfb8      	it	lt
 800d9fc:	2201      	movlt	r2, #1
 800d9fe:	e7db      	b.n	800d9b8 <_dtoa_r+0x220>
 800da00:	2201      	movs	r2, #1
 800da02:	e7f2      	b.n	800d9ea <_dtoa_r+0x252>
 800da04:	2401      	movs	r4, #1
 800da06:	2200      	movs	r2, #0
 800da08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800da0c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800da10:	2100      	movs	r1, #0
 800da12:	46da      	mov	sl, fp
 800da14:	2212      	movs	r2, #18
 800da16:	9109      	str	r1, [sp, #36]	@ 0x24
 800da18:	e7ce      	b.n	800d9b8 <_dtoa_r+0x220>
 800da1a:	2201      	movs	r2, #1
 800da1c:	9208      	str	r2, [sp, #32]
 800da1e:	e7f5      	b.n	800da0c <_dtoa_r+0x274>
 800da20:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800da24:	46da      	mov	sl, fp
 800da26:	465a      	mov	r2, fp
 800da28:	e7c6      	b.n	800d9b8 <_dtoa_r+0x220>
 800da2a:	3101      	adds	r1, #1
 800da2c:	0040      	lsls	r0, r0, #1
 800da2e:	e7c7      	b.n	800d9c0 <_dtoa_r+0x228>
 800da30:	636f4361 	.word	0x636f4361
 800da34:	3fd287a7 	.word	0x3fd287a7
 800da38:	8b60c8b3 	.word	0x8b60c8b3
 800da3c:	3fc68a28 	.word	0x3fc68a28
 800da40:	509f79fb 	.word	0x509f79fb
 800da44:	3fd34413 	.word	0x3fd34413
 800da48:	0800f2d9 	.word	0x0800f2d9
 800da4c:	0800f2f0 	.word	0x0800f2f0
 800da50:	7ff00000 	.word	0x7ff00000
 800da54:	0800f2d5 	.word	0x0800f2d5
 800da58:	0800f2a9 	.word	0x0800f2a9
 800da5c:	0800f2a8 	.word	0x0800f2a8
 800da60:	0800f3e8 	.word	0x0800f3e8
 800da64:	0800f348 	.word	0x0800f348
 800da68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800da6c:	f1ba 0f0e 	cmp.w	sl, #14
 800da70:	6010      	str	r0, [r2, #0]
 800da72:	d86f      	bhi.n	800db54 <_dtoa_r+0x3bc>
 800da74:	2c00      	cmp	r4, #0
 800da76:	d06d      	beq.n	800db54 <_dtoa_r+0x3bc>
 800da78:	f1b8 0f00 	cmp.w	r8, #0
 800da7c:	f340 80c2 	ble.w	800dc04 <_dtoa_r+0x46c>
 800da80:	4aca      	ldr	r2, [pc, #808]	@ (800ddac <_dtoa_r+0x614>)
 800da82:	f008 010f 	and.w	r1, r8, #15
 800da86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800da8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800da8e:	ed92 7b00 	vldr	d7, [r2]
 800da92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800da96:	f000 80a9 	beq.w	800dbec <_dtoa_r+0x454>
 800da9a:	4ac5      	ldr	r2, [pc, #788]	@ (800ddb0 <_dtoa_r+0x618>)
 800da9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800daa0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800daa4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800daa8:	f001 010f 	and.w	r1, r1, #15
 800daac:	2203      	movs	r2, #3
 800daae:	48c0      	ldr	r0, [pc, #768]	@ (800ddb0 <_dtoa_r+0x618>)
 800dab0:	2900      	cmp	r1, #0
 800dab2:	f040 809d 	bne.w	800dbf0 <_dtoa_r+0x458>
 800dab6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800daba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dabe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dac2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dac4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dac8:	2900      	cmp	r1, #0
 800daca:	f000 80c1 	beq.w	800dc50 <_dtoa_r+0x4b8>
 800dace:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dad2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dada:	f140 80b9 	bpl.w	800dc50 <_dtoa_r+0x4b8>
 800dade:	f1ba 0f00 	cmp.w	sl, #0
 800dae2:	f000 80b5 	beq.w	800dc50 <_dtoa_r+0x4b8>
 800dae6:	f1bb 0f00 	cmp.w	fp, #0
 800daea:	dd31      	ble.n	800db50 <_dtoa_r+0x3b8>
 800daec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800daf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800daf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daf8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800dafc:	9104      	str	r1, [sp, #16]
 800dafe:	3201      	adds	r2, #1
 800db00:	465c      	mov	r4, fp
 800db02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800db06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800db0a:	ee07 2a90 	vmov	s15, r2
 800db0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800db16:	ee15 2a90 	vmov	r2, s11
 800db1a:	ec51 0b15 	vmov	r0, r1, d5
 800db1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800db22:	2c00      	cmp	r4, #0
 800db24:	f040 8098 	bne.w	800dc58 <_dtoa_r+0x4c0>
 800db28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800db2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800db30:	ec41 0b17 	vmov	d7, r0, r1
 800db34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3c:	f300 8261 	bgt.w	800e002 <_dtoa_r+0x86a>
 800db40:	eeb1 7b47 	vneg.f64	d7, d7
 800db44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800db48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4c:	f100 80f5 	bmi.w	800dd3a <_dtoa_r+0x5a2>
 800db50:	ed8d 8b02 	vstr	d8, [sp, #8]
 800db54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800db56:	2a00      	cmp	r2, #0
 800db58:	f2c0 812c 	blt.w	800ddb4 <_dtoa_r+0x61c>
 800db5c:	f1b8 0f0e 	cmp.w	r8, #14
 800db60:	f300 8128 	bgt.w	800ddb4 <_dtoa_r+0x61c>
 800db64:	4b91      	ldr	r3, [pc, #580]	@ (800ddac <_dtoa_r+0x614>)
 800db66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db6a:	ed93 6b00 	vldr	d6, [r3]
 800db6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db70:	2b00      	cmp	r3, #0
 800db72:	da03      	bge.n	800db7c <_dtoa_r+0x3e4>
 800db74:	f1ba 0f00 	cmp.w	sl, #0
 800db78:	f340 80d2 	ble.w	800dd20 <_dtoa_r+0x588>
 800db7c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800db80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db84:	463e      	mov	r6, r7
 800db86:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800db8a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800db8e:	ee15 3a10 	vmov	r3, s10
 800db92:	3330      	adds	r3, #48	@ 0x30
 800db94:	f806 3b01 	strb.w	r3, [r6], #1
 800db98:	1bf3      	subs	r3, r6, r7
 800db9a:	459a      	cmp	sl, r3
 800db9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dba0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dba4:	f040 80f8 	bne.w	800dd98 <_dtoa_r+0x600>
 800dba8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dbac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb4:	f300 80dd 	bgt.w	800dd72 <_dtoa_r+0x5da>
 800dbb8:	eeb4 7b46 	vcmp.f64	d7, d6
 800dbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc0:	d104      	bne.n	800dbcc <_dtoa_r+0x434>
 800dbc2:	ee15 3a10 	vmov	r3, s10
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	f100 80d3 	bmi.w	800dd72 <_dtoa_r+0x5da>
 800dbcc:	9901      	ldr	r1, [sp, #4]
 800dbce:	4648      	mov	r0, r9
 800dbd0:	f000 fc6e 	bl	800e4b0 <_Bfree>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbd8:	7033      	strb	r3, [r6, #0]
 800dbda:	f108 0301 	add.w	r3, r8, #1
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 8304 	beq.w	800e1f0 <_dtoa_r+0xa58>
 800dbe8:	601e      	str	r6, [r3, #0]
 800dbea:	e301      	b.n	800e1f0 <_dtoa_r+0xa58>
 800dbec:	2202      	movs	r2, #2
 800dbee:	e75e      	b.n	800daae <_dtoa_r+0x316>
 800dbf0:	07cc      	lsls	r4, r1, #31
 800dbf2:	d504      	bpl.n	800dbfe <_dtoa_r+0x466>
 800dbf4:	ed90 6b00 	vldr	d6, [r0]
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbfe:	1049      	asrs	r1, r1, #1
 800dc00:	3008      	adds	r0, #8
 800dc02:	e755      	b.n	800dab0 <_dtoa_r+0x318>
 800dc04:	d022      	beq.n	800dc4c <_dtoa_r+0x4b4>
 800dc06:	f1c8 0100 	rsb	r1, r8, #0
 800dc0a:	4a68      	ldr	r2, [pc, #416]	@ (800ddac <_dtoa_r+0x614>)
 800dc0c:	f001 000f 	and.w	r0, r1, #15
 800dc10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dc14:	ed92 7b00 	vldr	d7, [r2]
 800dc18:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dc1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc20:	4863      	ldr	r0, [pc, #396]	@ (800ddb0 <_dtoa_r+0x618>)
 800dc22:	1109      	asrs	r1, r1, #4
 800dc24:	2400      	movs	r4, #0
 800dc26:	2202      	movs	r2, #2
 800dc28:	b929      	cbnz	r1, 800dc36 <_dtoa_r+0x49e>
 800dc2a:	2c00      	cmp	r4, #0
 800dc2c:	f43f af49 	beq.w	800dac2 <_dtoa_r+0x32a>
 800dc30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc34:	e745      	b.n	800dac2 <_dtoa_r+0x32a>
 800dc36:	07ce      	lsls	r6, r1, #31
 800dc38:	d505      	bpl.n	800dc46 <_dtoa_r+0x4ae>
 800dc3a:	ed90 6b00 	vldr	d6, [r0]
 800dc3e:	3201      	adds	r2, #1
 800dc40:	2401      	movs	r4, #1
 800dc42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc46:	1049      	asrs	r1, r1, #1
 800dc48:	3008      	adds	r0, #8
 800dc4a:	e7ed      	b.n	800dc28 <_dtoa_r+0x490>
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	e738      	b.n	800dac2 <_dtoa_r+0x32a>
 800dc50:	f8cd 8010 	str.w	r8, [sp, #16]
 800dc54:	4654      	mov	r4, sl
 800dc56:	e754      	b.n	800db02 <_dtoa_r+0x36a>
 800dc58:	4a54      	ldr	r2, [pc, #336]	@ (800ddac <_dtoa_r+0x614>)
 800dc5a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dc5e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dc62:	9a08      	ldr	r2, [sp, #32]
 800dc64:	ec41 0b17 	vmov	d7, r0, r1
 800dc68:	443c      	add	r4, r7
 800dc6a:	b34a      	cbz	r2, 800dcc0 <_dtoa_r+0x528>
 800dc6c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800dc70:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800dc74:	463e      	mov	r6, r7
 800dc76:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dc7a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dc7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc82:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dc86:	ee14 2a90 	vmov	r2, s9
 800dc8a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dc8e:	3230      	adds	r2, #48	@ 0x30
 800dc90:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dc94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc9c:	f806 2b01 	strb.w	r2, [r6], #1
 800dca0:	d438      	bmi.n	800dd14 <_dtoa_r+0x57c>
 800dca2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dca6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcae:	d462      	bmi.n	800dd76 <_dtoa_r+0x5de>
 800dcb0:	42a6      	cmp	r6, r4
 800dcb2:	f43f af4d 	beq.w	800db50 <_dtoa_r+0x3b8>
 800dcb6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dcba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dcbe:	e7e0      	b.n	800dc82 <_dtoa_r+0x4ea>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	463e      	mov	r6, r7
 800dcc4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dcc8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dccc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dcd0:	ee14 2a90 	vmov	r2, s9
 800dcd4:	3230      	adds	r2, #48	@ 0x30
 800dcd6:	f806 2b01 	strb.w	r2, [r6], #1
 800dcda:	42a6      	cmp	r6, r4
 800dcdc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dce0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dce4:	d119      	bne.n	800dd1a <_dtoa_r+0x582>
 800dce6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800dcea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dcee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf6:	dc3e      	bgt.n	800dd76 <_dtoa_r+0x5de>
 800dcf8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dcfc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	f57f af24 	bpl.w	800db50 <_dtoa_r+0x3b8>
 800dd08:	460e      	mov	r6, r1
 800dd0a:	3901      	subs	r1, #1
 800dd0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd10:	2b30      	cmp	r3, #48	@ 0x30
 800dd12:	d0f9      	beq.n	800dd08 <_dtoa_r+0x570>
 800dd14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd18:	e758      	b.n	800dbcc <_dtoa_r+0x434>
 800dd1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dd1e:	e7d5      	b.n	800dccc <_dtoa_r+0x534>
 800dd20:	d10b      	bne.n	800dd3a <_dtoa_r+0x5a2>
 800dd22:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800dd26:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dd2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	f2c0 8161 	blt.w	800dffc <_dtoa_r+0x864>
 800dd3a:	2400      	movs	r4, #0
 800dd3c:	4625      	mov	r5, r4
 800dd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd40:	43db      	mvns	r3, r3
 800dd42:	9304      	str	r3, [sp, #16]
 800dd44:	463e      	mov	r6, r7
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4648      	mov	r0, r9
 800dd4e:	f000 fbaf 	bl	800e4b0 <_Bfree>
 800dd52:	2d00      	cmp	r5, #0
 800dd54:	d0de      	beq.n	800dd14 <_dtoa_r+0x57c>
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d005      	beq.n	800dd68 <_dtoa_r+0x5d0>
 800dd5c:	45a8      	cmp	r8, r5
 800dd5e:	d003      	beq.n	800dd68 <_dtoa_r+0x5d0>
 800dd60:	4641      	mov	r1, r8
 800dd62:	4648      	mov	r0, r9
 800dd64:	f000 fba4 	bl	800e4b0 <_Bfree>
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	f000 fba0 	bl	800e4b0 <_Bfree>
 800dd70:	e7d0      	b.n	800dd14 <_dtoa_r+0x57c>
 800dd72:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd76:	4633      	mov	r3, r6
 800dd78:	461e      	mov	r6, r3
 800dd7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd7e:	2a39      	cmp	r2, #57	@ 0x39
 800dd80:	d106      	bne.n	800dd90 <_dtoa_r+0x5f8>
 800dd82:	429f      	cmp	r7, r3
 800dd84:	d1f8      	bne.n	800dd78 <_dtoa_r+0x5e0>
 800dd86:	9a04      	ldr	r2, [sp, #16]
 800dd88:	3201      	adds	r2, #1
 800dd8a:	9204      	str	r2, [sp, #16]
 800dd8c:	2230      	movs	r2, #48	@ 0x30
 800dd8e:	703a      	strb	r2, [r7, #0]
 800dd90:	781a      	ldrb	r2, [r3, #0]
 800dd92:	3201      	adds	r2, #1
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	e7bd      	b.n	800dd14 <_dtoa_r+0x57c>
 800dd98:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda4:	f47f aeef 	bne.w	800db86 <_dtoa_r+0x3ee>
 800dda8:	e710      	b.n	800dbcc <_dtoa_r+0x434>
 800ddaa:	bf00      	nop
 800ddac:	0800f3e8 	.word	0x0800f3e8
 800ddb0:	0800f3c0 	.word	0x0800f3c0
 800ddb4:	9908      	ldr	r1, [sp, #32]
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	f000 80e3 	beq.w	800df82 <_dtoa_r+0x7ea>
 800ddbc:	9907      	ldr	r1, [sp, #28]
 800ddbe:	2901      	cmp	r1, #1
 800ddc0:	f300 80c8 	bgt.w	800df54 <_dtoa_r+0x7bc>
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	f000 80c1 	beq.w	800df4c <_dtoa_r+0x7b4>
 800ddca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ddce:	9e05      	ldr	r6, [sp, #20]
 800ddd0:	461c      	mov	r4, r3
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	9b05      	ldr	r3, [sp, #20]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	9b06      	ldr	r3, [sp, #24]
 800dddc:	2101      	movs	r1, #1
 800ddde:	4413      	add	r3, r2
 800dde0:	4648      	mov	r0, r9
 800dde2:	9306      	str	r3, [sp, #24]
 800dde4:	f000 fc18 	bl	800e618 <__i2b>
 800dde8:	9b04      	ldr	r3, [sp, #16]
 800ddea:	4605      	mov	r5, r0
 800ddec:	b166      	cbz	r6, 800de08 <_dtoa_r+0x670>
 800ddee:	9a06      	ldr	r2, [sp, #24]
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	dd09      	ble.n	800de08 <_dtoa_r+0x670>
 800ddf4:	42b2      	cmp	r2, r6
 800ddf6:	9905      	ldr	r1, [sp, #20]
 800ddf8:	bfa8      	it	ge
 800ddfa:	4632      	movge	r2, r6
 800ddfc:	1a89      	subs	r1, r1, r2
 800ddfe:	9105      	str	r1, [sp, #20]
 800de00:	9906      	ldr	r1, [sp, #24]
 800de02:	1ab6      	subs	r6, r6, r2
 800de04:	1a8a      	subs	r2, r1, r2
 800de06:	9206      	str	r2, [sp, #24]
 800de08:	b1fb      	cbz	r3, 800de4a <_dtoa_r+0x6b2>
 800de0a:	9a08      	ldr	r2, [sp, #32]
 800de0c:	2a00      	cmp	r2, #0
 800de0e:	f000 80bc 	beq.w	800df8a <_dtoa_r+0x7f2>
 800de12:	b19c      	cbz	r4, 800de3c <_dtoa_r+0x6a4>
 800de14:	4629      	mov	r1, r5
 800de16:	4622      	mov	r2, r4
 800de18:	4648      	mov	r0, r9
 800de1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de1c:	f000 fcbc 	bl	800e798 <__pow5mult>
 800de20:	9a01      	ldr	r2, [sp, #4]
 800de22:	4601      	mov	r1, r0
 800de24:	4605      	mov	r5, r0
 800de26:	4648      	mov	r0, r9
 800de28:	f000 fc0c 	bl	800e644 <__multiply>
 800de2c:	9901      	ldr	r1, [sp, #4]
 800de2e:	9004      	str	r0, [sp, #16]
 800de30:	4648      	mov	r0, r9
 800de32:	f000 fb3d 	bl	800e4b0 <_Bfree>
 800de36:	9a04      	ldr	r2, [sp, #16]
 800de38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de3a:	9201      	str	r2, [sp, #4]
 800de3c:	1b1a      	subs	r2, r3, r4
 800de3e:	d004      	beq.n	800de4a <_dtoa_r+0x6b2>
 800de40:	9901      	ldr	r1, [sp, #4]
 800de42:	4648      	mov	r0, r9
 800de44:	f000 fca8 	bl	800e798 <__pow5mult>
 800de48:	9001      	str	r0, [sp, #4]
 800de4a:	2101      	movs	r1, #1
 800de4c:	4648      	mov	r0, r9
 800de4e:	f000 fbe3 	bl	800e618 <__i2b>
 800de52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de54:	4604      	mov	r4, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 81d0 	beq.w	800e1fc <_dtoa_r+0xa64>
 800de5c:	461a      	mov	r2, r3
 800de5e:	4601      	mov	r1, r0
 800de60:	4648      	mov	r0, r9
 800de62:	f000 fc99 	bl	800e798 <__pow5mult>
 800de66:	9b07      	ldr	r3, [sp, #28]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	4604      	mov	r4, r0
 800de6c:	f300 8095 	bgt.w	800df9a <_dtoa_r+0x802>
 800de70:	9b02      	ldr	r3, [sp, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 808b 	bne.w	800df8e <_dtoa_r+0x7f6>
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800de7e:	2a00      	cmp	r2, #0
 800de80:	f040 8087 	bne.w	800df92 <_dtoa_r+0x7fa>
 800de84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800de88:	0d12      	lsrs	r2, r2, #20
 800de8a:	0512      	lsls	r2, r2, #20
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	f000 8082 	beq.w	800df96 <_dtoa_r+0x7fe>
 800de92:	9b05      	ldr	r3, [sp, #20]
 800de94:	3301      	adds	r3, #1
 800de96:	9305      	str	r3, [sp, #20]
 800de98:	9b06      	ldr	r3, [sp, #24]
 800de9a:	3301      	adds	r3, #1
 800de9c:	9306      	str	r3, [sp, #24]
 800de9e:	2301      	movs	r3, #1
 800dea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 81af 	beq.w	800e208 <_dtoa_r+0xa70>
 800deaa:	6922      	ldr	r2, [r4, #16]
 800deac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800deb0:	6910      	ldr	r0, [r2, #16]
 800deb2:	f000 fb65 	bl	800e580 <__hi0bits>
 800deb6:	f1c0 0020 	rsb	r0, r0, #32
 800deba:	9b06      	ldr	r3, [sp, #24]
 800debc:	4418      	add	r0, r3
 800debe:	f010 001f 	ands.w	r0, r0, #31
 800dec2:	d076      	beq.n	800dfb2 <_dtoa_r+0x81a>
 800dec4:	f1c0 0220 	rsb	r2, r0, #32
 800dec8:	2a04      	cmp	r2, #4
 800deca:	dd69      	ble.n	800dfa0 <_dtoa_r+0x808>
 800decc:	9b05      	ldr	r3, [sp, #20]
 800dece:	f1c0 001c 	rsb	r0, r0, #28
 800ded2:	4403      	add	r3, r0
 800ded4:	9305      	str	r3, [sp, #20]
 800ded6:	9b06      	ldr	r3, [sp, #24]
 800ded8:	4406      	add	r6, r0
 800deda:	4403      	add	r3, r0
 800dedc:	9306      	str	r3, [sp, #24]
 800dede:	9b05      	ldr	r3, [sp, #20]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	dd05      	ble.n	800def0 <_dtoa_r+0x758>
 800dee4:	9901      	ldr	r1, [sp, #4]
 800dee6:	461a      	mov	r2, r3
 800dee8:	4648      	mov	r0, r9
 800deea:	f000 fcaf 	bl	800e84c <__lshift>
 800deee:	9001      	str	r0, [sp, #4]
 800def0:	9b06      	ldr	r3, [sp, #24]
 800def2:	2b00      	cmp	r3, #0
 800def4:	dd05      	ble.n	800df02 <_dtoa_r+0x76a>
 800def6:	4621      	mov	r1, r4
 800def8:	461a      	mov	r2, r3
 800defa:	4648      	mov	r0, r9
 800defc:	f000 fca6 	bl	800e84c <__lshift>
 800df00:	4604      	mov	r4, r0
 800df02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df04:	2b00      	cmp	r3, #0
 800df06:	d056      	beq.n	800dfb6 <_dtoa_r+0x81e>
 800df08:	9801      	ldr	r0, [sp, #4]
 800df0a:	4621      	mov	r1, r4
 800df0c:	f000 fd0a 	bl	800e924 <__mcmp>
 800df10:	2800      	cmp	r0, #0
 800df12:	da50      	bge.n	800dfb6 <_dtoa_r+0x81e>
 800df14:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	9901      	ldr	r1, [sp, #4]
 800df1c:	2300      	movs	r3, #0
 800df1e:	220a      	movs	r2, #10
 800df20:	4648      	mov	r0, r9
 800df22:	f000 fae7 	bl	800e4f4 <__multadd>
 800df26:	9b08      	ldr	r3, [sp, #32]
 800df28:	9001      	str	r0, [sp, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f000 816e 	beq.w	800e20c <_dtoa_r+0xa74>
 800df30:	4629      	mov	r1, r5
 800df32:	2300      	movs	r3, #0
 800df34:	220a      	movs	r2, #10
 800df36:	4648      	mov	r0, r9
 800df38:	f000 fadc 	bl	800e4f4 <__multadd>
 800df3c:	f1bb 0f00 	cmp.w	fp, #0
 800df40:	4605      	mov	r5, r0
 800df42:	dc64      	bgt.n	800e00e <_dtoa_r+0x876>
 800df44:	9b07      	ldr	r3, [sp, #28]
 800df46:	2b02      	cmp	r3, #2
 800df48:	dc3e      	bgt.n	800dfc8 <_dtoa_r+0x830>
 800df4a:	e060      	b.n	800e00e <_dtoa_r+0x876>
 800df4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800df52:	e73c      	b.n	800ddce <_dtoa_r+0x636>
 800df54:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800df58:	42a3      	cmp	r3, r4
 800df5a:	bfbf      	itttt	lt
 800df5c:	1ae2      	sublt	r2, r4, r3
 800df5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800df60:	189b      	addlt	r3, r3, r2
 800df62:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800df64:	bfae      	itee	ge
 800df66:	1b1c      	subge	r4, r3, r4
 800df68:	4623      	movlt	r3, r4
 800df6a:	2400      	movlt	r4, #0
 800df6c:	f1ba 0f00 	cmp.w	sl, #0
 800df70:	bfb5      	itete	lt
 800df72:	9a05      	ldrlt	r2, [sp, #20]
 800df74:	9e05      	ldrge	r6, [sp, #20]
 800df76:	eba2 060a 	sublt.w	r6, r2, sl
 800df7a:	4652      	movge	r2, sl
 800df7c:	bfb8      	it	lt
 800df7e:	2200      	movlt	r2, #0
 800df80:	e727      	b.n	800ddd2 <_dtoa_r+0x63a>
 800df82:	9e05      	ldr	r6, [sp, #20]
 800df84:	9d08      	ldr	r5, [sp, #32]
 800df86:	461c      	mov	r4, r3
 800df88:	e730      	b.n	800ddec <_dtoa_r+0x654>
 800df8a:	461a      	mov	r2, r3
 800df8c:	e758      	b.n	800de40 <_dtoa_r+0x6a8>
 800df8e:	2300      	movs	r3, #0
 800df90:	e786      	b.n	800dea0 <_dtoa_r+0x708>
 800df92:	9b02      	ldr	r3, [sp, #8]
 800df94:	e784      	b.n	800dea0 <_dtoa_r+0x708>
 800df96:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df98:	e783      	b.n	800dea2 <_dtoa_r+0x70a>
 800df9a:	2300      	movs	r3, #0
 800df9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df9e:	e784      	b.n	800deaa <_dtoa_r+0x712>
 800dfa0:	d09d      	beq.n	800dede <_dtoa_r+0x746>
 800dfa2:	9b05      	ldr	r3, [sp, #20]
 800dfa4:	321c      	adds	r2, #28
 800dfa6:	4413      	add	r3, r2
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	9b06      	ldr	r3, [sp, #24]
 800dfac:	4416      	add	r6, r2
 800dfae:	4413      	add	r3, r2
 800dfb0:	e794      	b.n	800dedc <_dtoa_r+0x744>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	e7f5      	b.n	800dfa2 <_dtoa_r+0x80a>
 800dfb6:	f1ba 0f00 	cmp.w	sl, #0
 800dfba:	f8cd 8010 	str.w	r8, [sp, #16]
 800dfbe:	46d3      	mov	fp, sl
 800dfc0:	dc21      	bgt.n	800e006 <_dtoa_r+0x86e>
 800dfc2:	9b07      	ldr	r3, [sp, #28]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	dd1e      	ble.n	800e006 <_dtoa_r+0x86e>
 800dfc8:	f1bb 0f00 	cmp.w	fp, #0
 800dfcc:	f47f aeb7 	bne.w	800dd3e <_dtoa_r+0x5a6>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	465b      	mov	r3, fp
 800dfd4:	2205      	movs	r2, #5
 800dfd6:	4648      	mov	r0, r9
 800dfd8:	f000 fa8c 	bl	800e4f4 <__multadd>
 800dfdc:	4601      	mov	r1, r0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	9801      	ldr	r0, [sp, #4]
 800dfe2:	f000 fc9f 	bl	800e924 <__mcmp>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f77f aea9 	ble.w	800dd3e <_dtoa_r+0x5a6>
 800dfec:	463e      	mov	r6, r7
 800dfee:	2331      	movs	r3, #49	@ 0x31
 800dff0:	f806 3b01 	strb.w	r3, [r6], #1
 800dff4:	9b04      	ldr	r3, [sp, #16]
 800dff6:	3301      	adds	r3, #1
 800dff8:	9304      	str	r3, [sp, #16]
 800dffa:	e6a4      	b.n	800dd46 <_dtoa_r+0x5ae>
 800dffc:	f8cd 8010 	str.w	r8, [sp, #16]
 800e000:	4654      	mov	r4, sl
 800e002:	4625      	mov	r5, r4
 800e004:	e7f2      	b.n	800dfec <_dtoa_r+0x854>
 800e006:	9b08      	ldr	r3, [sp, #32]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 8103 	beq.w	800e214 <_dtoa_r+0xa7c>
 800e00e:	2e00      	cmp	r6, #0
 800e010:	dd05      	ble.n	800e01e <_dtoa_r+0x886>
 800e012:	4629      	mov	r1, r5
 800e014:	4632      	mov	r2, r6
 800e016:	4648      	mov	r0, r9
 800e018:	f000 fc18 	bl	800e84c <__lshift>
 800e01c:	4605      	mov	r5, r0
 800e01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e020:	2b00      	cmp	r3, #0
 800e022:	d058      	beq.n	800e0d6 <_dtoa_r+0x93e>
 800e024:	6869      	ldr	r1, [r5, #4]
 800e026:	4648      	mov	r0, r9
 800e028:	f000 fa02 	bl	800e430 <_Balloc>
 800e02c:	4606      	mov	r6, r0
 800e02e:	b928      	cbnz	r0, 800e03c <_dtoa_r+0x8a4>
 800e030:	4b82      	ldr	r3, [pc, #520]	@ (800e23c <_dtoa_r+0xaa4>)
 800e032:	4602      	mov	r2, r0
 800e034:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e038:	f7ff bbc7 	b.w	800d7ca <_dtoa_r+0x32>
 800e03c:	692a      	ldr	r2, [r5, #16]
 800e03e:	3202      	adds	r2, #2
 800e040:	0092      	lsls	r2, r2, #2
 800e042:	f105 010c 	add.w	r1, r5, #12
 800e046:	300c      	adds	r0, #12
 800e048:	f7ff fb0d 	bl	800d666 <memcpy>
 800e04c:	2201      	movs	r2, #1
 800e04e:	4631      	mov	r1, r6
 800e050:	4648      	mov	r0, r9
 800e052:	f000 fbfb 	bl	800e84c <__lshift>
 800e056:	1c7b      	adds	r3, r7, #1
 800e058:	9305      	str	r3, [sp, #20]
 800e05a:	eb07 030b 	add.w	r3, r7, fp
 800e05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	46a8      	mov	r8, r5
 800e068:	9308      	str	r3, [sp, #32]
 800e06a:	4605      	mov	r5, r0
 800e06c:	9b05      	ldr	r3, [sp, #20]
 800e06e:	9801      	ldr	r0, [sp, #4]
 800e070:	4621      	mov	r1, r4
 800e072:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e076:	f7ff fb04 	bl	800d682 <quorem>
 800e07a:	4641      	mov	r1, r8
 800e07c:	9002      	str	r0, [sp, #8]
 800e07e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e082:	9801      	ldr	r0, [sp, #4]
 800e084:	f000 fc4e 	bl	800e924 <__mcmp>
 800e088:	462a      	mov	r2, r5
 800e08a:	9006      	str	r0, [sp, #24]
 800e08c:	4621      	mov	r1, r4
 800e08e:	4648      	mov	r0, r9
 800e090:	f000 fc64 	bl	800e95c <__mdiff>
 800e094:	68c2      	ldr	r2, [r0, #12]
 800e096:	4606      	mov	r6, r0
 800e098:	b9fa      	cbnz	r2, 800e0da <_dtoa_r+0x942>
 800e09a:	4601      	mov	r1, r0
 800e09c:	9801      	ldr	r0, [sp, #4]
 800e09e:	f000 fc41 	bl	800e924 <__mcmp>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4648      	mov	r0, r9
 800e0a8:	920a      	str	r2, [sp, #40]	@ 0x28
 800e0aa:	f000 fa01 	bl	800e4b0 <_Bfree>
 800e0ae:	9b07      	ldr	r3, [sp, #28]
 800e0b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0b2:	9e05      	ldr	r6, [sp, #20]
 800e0b4:	ea43 0102 	orr.w	r1, r3, r2
 800e0b8:	9b08      	ldr	r3, [sp, #32]
 800e0ba:	4319      	orrs	r1, r3
 800e0bc:	d10f      	bne.n	800e0de <_dtoa_r+0x946>
 800e0be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e0c2:	d028      	beq.n	800e116 <_dtoa_r+0x97e>
 800e0c4:	9b06      	ldr	r3, [sp, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dd02      	ble.n	800e0d0 <_dtoa_r+0x938>
 800e0ca:	9b02      	ldr	r3, [sp, #8]
 800e0cc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e0d0:	f88b a000 	strb.w	sl, [fp]
 800e0d4:	e639      	b.n	800dd4a <_dtoa_r+0x5b2>
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	e7bd      	b.n	800e056 <_dtoa_r+0x8be>
 800e0da:	2201      	movs	r2, #1
 800e0dc:	e7e2      	b.n	800e0a4 <_dtoa_r+0x90c>
 800e0de:	9b06      	ldr	r3, [sp, #24]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	db04      	blt.n	800e0ee <_dtoa_r+0x956>
 800e0e4:	9907      	ldr	r1, [sp, #28]
 800e0e6:	430b      	orrs	r3, r1
 800e0e8:	9908      	ldr	r1, [sp, #32]
 800e0ea:	430b      	orrs	r3, r1
 800e0ec:	d120      	bne.n	800e130 <_dtoa_r+0x998>
 800e0ee:	2a00      	cmp	r2, #0
 800e0f0:	ddee      	ble.n	800e0d0 <_dtoa_r+0x938>
 800e0f2:	9901      	ldr	r1, [sp, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	4648      	mov	r0, r9
 800e0f8:	f000 fba8 	bl	800e84c <__lshift>
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	9001      	str	r0, [sp, #4]
 800e100:	f000 fc10 	bl	800e924 <__mcmp>
 800e104:	2800      	cmp	r0, #0
 800e106:	dc03      	bgt.n	800e110 <_dtoa_r+0x978>
 800e108:	d1e2      	bne.n	800e0d0 <_dtoa_r+0x938>
 800e10a:	f01a 0f01 	tst.w	sl, #1
 800e10e:	d0df      	beq.n	800e0d0 <_dtoa_r+0x938>
 800e110:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e114:	d1d9      	bne.n	800e0ca <_dtoa_r+0x932>
 800e116:	2339      	movs	r3, #57	@ 0x39
 800e118:	f88b 3000 	strb.w	r3, [fp]
 800e11c:	4633      	mov	r3, r6
 800e11e:	461e      	mov	r6, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e126:	2a39      	cmp	r2, #57	@ 0x39
 800e128:	d053      	beq.n	800e1d2 <_dtoa_r+0xa3a>
 800e12a:	3201      	adds	r2, #1
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	e60c      	b.n	800dd4a <_dtoa_r+0x5b2>
 800e130:	2a00      	cmp	r2, #0
 800e132:	dd07      	ble.n	800e144 <_dtoa_r+0x9ac>
 800e134:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e138:	d0ed      	beq.n	800e116 <_dtoa_r+0x97e>
 800e13a:	f10a 0301 	add.w	r3, sl, #1
 800e13e:	f88b 3000 	strb.w	r3, [fp]
 800e142:	e602      	b.n	800dd4a <_dtoa_r+0x5b2>
 800e144:	9b05      	ldr	r3, [sp, #20]
 800e146:	9a05      	ldr	r2, [sp, #20]
 800e148:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e14e:	4293      	cmp	r3, r2
 800e150:	d029      	beq.n	800e1a6 <_dtoa_r+0xa0e>
 800e152:	9901      	ldr	r1, [sp, #4]
 800e154:	2300      	movs	r3, #0
 800e156:	220a      	movs	r2, #10
 800e158:	4648      	mov	r0, r9
 800e15a:	f000 f9cb 	bl	800e4f4 <__multadd>
 800e15e:	45a8      	cmp	r8, r5
 800e160:	9001      	str	r0, [sp, #4]
 800e162:	f04f 0300 	mov.w	r3, #0
 800e166:	f04f 020a 	mov.w	r2, #10
 800e16a:	4641      	mov	r1, r8
 800e16c:	4648      	mov	r0, r9
 800e16e:	d107      	bne.n	800e180 <_dtoa_r+0x9e8>
 800e170:	f000 f9c0 	bl	800e4f4 <__multadd>
 800e174:	4680      	mov	r8, r0
 800e176:	4605      	mov	r5, r0
 800e178:	9b05      	ldr	r3, [sp, #20]
 800e17a:	3301      	adds	r3, #1
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	e775      	b.n	800e06c <_dtoa_r+0x8d4>
 800e180:	f000 f9b8 	bl	800e4f4 <__multadd>
 800e184:	4629      	mov	r1, r5
 800e186:	4680      	mov	r8, r0
 800e188:	2300      	movs	r3, #0
 800e18a:	220a      	movs	r2, #10
 800e18c:	4648      	mov	r0, r9
 800e18e:	f000 f9b1 	bl	800e4f4 <__multadd>
 800e192:	4605      	mov	r5, r0
 800e194:	e7f0      	b.n	800e178 <_dtoa_r+0x9e0>
 800e196:	f1bb 0f00 	cmp.w	fp, #0
 800e19a:	bfcc      	ite	gt
 800e19c:	465e      	movgt	r6, fp
 800e19e:	2601      	movle	r6, #1
 800e1a0:	443e      	add	r6, r7
 800e1a2:	f04f 0800 	mov.w	r8, #0
 800e1a6:	9901      	ldr	r1, [sp, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	4648      	mov	r0, r9
 800e1ac:	f000 fb4e 	bl	800e84c <__lshift>
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	9001      	str	r0, [sp, #4]
 800e1b4:	f000 fbb6 	bl	800e924 <__mcmp>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	dcaf      	bgt.n	800e11c <_dtoa_r+0x984>
 800e1bc:	d102      	bne.n	800e1c4 <_dtoa_r+0xa2c>
 800e1be:	f01a 0f01 	tst.w	sl, #1
 800e1c2:	d1ab      	bne.n	800e11c <_dtoa_r+0x984>
 800e1c4:	4633      	mov	r3, r6
 800e1c6:	461e      	mov	r6, r3
 800e1c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1cc:	2a30      	cmp	r2, #48	@ 0x30
 800e1ce:	d0fa      	beq.n	800e1c6 <_dtoa_r+0xa2e>
 800e1d0:	e5bb      	b.n	800dd4a <_dtoa_r+0x5b2>
 800e1d2:	429f      	cmp	r7, r3
 800e1d4:	d1a3      	bne.n	800e11e <_dtoa_r+0x986>
 800e1d6:	9b04      	ldr	r3, [sp, #16]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	9304      	str	r3, [sp, #16]
 800e1dc:	2331      	movs	r3, #49	@ 0x31
 800e1de:	703b      	strb	r3, [r7, #0]
 800e1e0:	e5b3      	b.n	800dd4a <_dtoa_r+0x5b2>
 800e1e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e1e4:	4f16      	ldr	r7, [pc, #88]	@ (800e240 <_dtoa_r+0xaa8>)
 800e1e6:	b11b      	cbz	r3, 800e1f0 <_dtoa_r+0xa58>
 800e1e8:	f107 0308 	add.w	r3, r7, #8
 800e1ec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e1ee:	6013      	str	r3, [r2, #0]
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	b011      	add	sp, #68	@ 0x44
 800e1f4:	ecbd 8b02 	vpop	{d8}
 800e1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fc:	9b07      	ldr	r3, [sp, #28]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	f77f ae36 	ble.w	800de70 <_dtoa_r+0x6d8>
 800e204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e206:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e208:	2001      	movs	r0, #1
 800e20a:	e656      	b.n	800deba <_dtoa_r+0x722>
 800e20c:	f1bb 0f00 	cmp.w	fp, #0
 800e210:	f77f aed7 	ble.w	800dfc2 <_dtoa_r+0x82a>
 800e214:	463e      	mov	r6, r7
 800e216:	9801      	ldr	r0, [sp, #4]
 800e218:	4621      	mov	r1, r4
 800e21a:	f7ff fa32 	bl	800d682 <quorem>
 800e21e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e222:	f806 ab01 	strb.w	sl, [r6], #1
 800e226:	1bf2      	subs	r2, r6, r7
 800e228:	4593      	cmp	fp, r2
 800e22a:	ddb4      	ble.n	800e196 <_dtoa_r+0x9fe>
 800e22c:	9901      	ldr	r1, [sp, #4]
 800e22e:	2300      	movs	r3, #0
 800e230:	220a      	movs	r2, #10
 800e232:	4648      	mov	r0, r9
 800e234:	f000 f95e 	bl	800e4f4 <__multadd>
 800e238:	9001      	str	r0, [sp, #4]
 800e23a:	e7ec      	b.n	800e216 <_dtoa_r+0xa7e>
 800e23c:	0800f348 	.word	0x0800f348
 800e240:	0800f2cc 	.word	0x0800f2cc

0800e244 <_free_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4605      	mov	r5, r0
 800e248:	2900      	cmp	r1, #0
 800e24a:	d041      	beq.n	800e2d0 <_free_r+0x8c>
 800e24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e250:	1f0c      	subs	r4, r1, #4
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfb8      	it	lt
 800e256:	18e4      	addlt	r4, r4, r3
 800e258:	f7ff f854 	bl	800d304 <__malloc_lock>
 800e25c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2d4 <_free_r+0x90>)
 800e25e:	6813      	ldr	r3, [r2, #0]
 800e260:	b933      	cbnz	r3, 800e270 <_free_r+0x2c>
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	6014      	str	r4, [r2, #0]
 800e266:	4628      	mov	r0, r5
 800e268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e26c:	f7ff b850 	b.w	800d310 <__malloc_unlock>
 800e270:	42a3      	cmp	r3, r4
 800e272:	d908      	bls.n	800e286 <_free_r+0x42>
 800e274:	6820      	ldr	r0, [r4, #0]
 800e276:	1821      	adds	r1, r4, r0
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf01      	itttt	eq
 800e27c:	6819      	ldreq	r1, [r3, #0]
 800e27e:	685b      	ldreq	r3, [r3, #4]
 800e280:	1809      	addeq	r1, r1, r0
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	e7ed      	b.n	800e262 <_free_r+0x1e>
 800e286:	461a      	mov	r2, r3
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	b10b      	cbz	r3, 800e290 <_free_r+0x4c>
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d9fa      	bls.n	800e286 <_free_r+0x42>
 800e290:	6811      	ldr	r1, [r2, #0]
 800e292:	1850      	adds	r0, r2, r1
 800e294:	42a0      	cmp	r0, r4
 800e296:	d10b      	bne.n	800e2b0 <_free_r+0x6c>
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	4401      	add	r1, r0
 800e29c:	1850      	adds	r0, r2, r1
 800e29e:	4283      	cmp	r3, r0
 800e2a0:	6011      	str	r1, [r2, #0]
 800e2a2:	d1e0      	bne.n	800e266 <_free_r+0x22>
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	6053      	str	r3, [r2, #4]
 800e2aa:	4408      	add	r0, r1
 800e2ac:	6010      	str	r0, [r2, #0]
 800e2ae:	e7da      	b.n	800e266 <_free_r+0x22>
 800e2b0:	d902      	bls.n	800e2b8 <_free_r+0x74>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	e7d6      	b.n	800e266 <_free_r+0x22>
 800e2b8:	6820      	ldr	r0, [r4, #0]
 800e2ba:	1821      	adds	r1, r4, r0
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf04      	itt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	bf04      	itt	eq
 800e2c8:	1809      	addeq	r1, r1, r0
 800e2ca:	6021      	streq	r1, [r4, #0]
 800e2cc:	6054      	str	r4, [r2, #4]
 800e2ce:	e7ca      	b.n	800e266 <_free_r+0x22>
 800e2d0:	bd38      	pop	{r3, r4, r5, pc}
 800e2d2:	bf00      	nop
 800e2d4:	240423b4 	.word	0x240423b4

0800e2d8 <__sflush_r>:
 800e2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e0:	0716      	lsls	r6, r2, #28
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	d454      	bmi.n	800e392 <__sflush_r+0xba>
 800e2e8:	684b      	ldr	r3, [r1, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	dc02      	bgt.n	800e2f4 <__sflush_r+0x1c>
 800e2ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	dd48      	ble.n	800e386 <__sflush_r+0xae>
 800e2f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2f6:	2e00      	cmp	r6, #0
 800e2f8:	d045      	beq.n	800e386 <__sflush_r+0xae>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e300:	682f      	ldr	r7, [r5, #0]
 800e302:	6a21      	ldr	r1, [r4, #32]
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	d030      	beq.n	800e36a <__sflush_r+0x92>
 800e308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	0759      	lsls	r1, r3, #29
 800e30e:	d505      	bpl.n	800e31c <__sflush_r+0x44>
 800e310:	6863      	ldr	r3, [r4, #4]
 800e312:	1ad2      	subs	r2, r2, r3
 800e314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e316:	b10b      	cbz	r3, 800e31c <__sflush_r+0x44>
 800e318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e31a:	1ad2      	subs	r2, r2, r3
 800e31c:	2300      	movs	r3, #0
 800e31e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e320:	6a21      	ldr	r1, [r4, #32]
 800e322:	4628      	mov	r0, r5
 800e324:	47b0      	blx	r6
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	d106      	bne.n	800e33a <__sflush_r+0x62>
 800e32c:	6829      	ldr	r1, [r5, #0]
 800e32e:	291d      	cmp	r1, #29
 800e330:	d82b      	bhi.n	800e38a <__sflush_r+0xb2>
 800e332:	4a2a      	ldr	r2, [pc, #168]	@ (800e3dc <__sflush_r+0x104>)
 800e334:	410a      	asrs	r2, r1
 800e336:	07d6      	lsls	r6, r2, #31
 800e338:	d427      	bmi.n	800e38a <__sflush_r+0xb2>
 800e33a:	2200      	movs	r2, #0
 800e33c:	6062      	str	r2, [r4, #4]
 800e33e:	04d9      	lsls	r1, r3, #19
 800e340:	6922      	ldr	r2, [r4, #16]
 800e342:	6022      	str	r2, [r4, #0]
 800e344:	d504      	bpl.n	800e350 <__sflush_r+0x78>
 800e346:	1c42      	adds	r2, r0, #1
 800e348:	d101      	bne.n	800e34e <__sflush_r+0x76>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	b903      	cbnz	r3, 800e350 <__sflush_r+0x78>
 800e34e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e352:	602f      	str	r7, [r5, #0]
 800e354:	b1b9      	cbz	r1, 800e386 <__sflush_r+0xae>
 800e356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e35a:	4299      	cmp	r1, r3
 800e35c:	d002      	beq.n	800e364 <__sflush_r+0x8c>
 800e35e:	4628      	mov	r0, r5
 800e360:	f7ff ff70 	bl	800e244 <_free_r>
 800e364:	2300      	movs	r3, #0
 800e366:	6363      	str	r3, [r4, #52]	@ 0x34
 800e368:	e00d      	b.n	800e386 <__sflush_r+0xae>
 800e36a:	2301      	movs	r3, #1
 800e36c:	4628      	mov	r0, r5
 800e36e:	47b0      	blx	r6
 800e370:	4602      	mov	r2, r0
 800e372:	1c50      	adds	r0, r2, #1
 800e374:	d1c9      	bne.n	800e30a <__sflush_r+0x32>
 800e376:	682b      	ldr	r3, [r5, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d0c6      	beq.n	800e30a <__sflush_r+0x32>
 800e37c:	2b1d      	cmp	r3, #29
 800e37e:	d001      	beq.n	800e384 <__sflush_r+0xac>
 800e380:	2b16      	cmp	r3, #22
 800e382:	d11e      	bne.n	800e3c2 <__sflush_r+0xea>
 800e384:	602f      	str	r7, [r5, #0]
 800e386:	2000      	movs	r0, #0
 800e388:	e022      	b.n	800e3d0 <__sflush_r+0xf8>
 800e38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e38e:	b21b      	sxth	r3, r3
 800e390:	e01b      	b.n	800e3ca <__sflush_r+0xf2>
 800e392:	690f      	ldr	r7, [r1, #16]
 800e394:	2f00      	cmp	r7, #0
 800e396:	d0f6      	beq.n	800e386 <__sflush_r+0xae>
 800e398:	0793      	lsls	r3, r2, #30
 800e39a:	680e      	ldr	r6, [r1, #0]
 800e39c:	bf08      	it	eq
 800e39e:	694b      	ldreq	r3, [r1, #20]
 800e3a0:	600f      	str	r7, [r1, #0]
 800e3a2:	bf18      	it	ne
 800e3a4:	2300      	movne	r3, #0
 800e3a6:	eba6 0807 	sub.w	r8, r6, r7
 800e3aa:	608b      	str	r3, [r1, #8]
 800e3ac:	f1b8 0f00 	cmp.w	r8, #0
 800e3b0:	dde9      	ble.n	800e386 <__sflush_r+0xae>
 800e3b2:	6a21      	ldr	r1, [r4, #32]
 800e3b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3b6:	4643      	mov	r3, r8
 800e3b8:	463a      	mov	r2, r7
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	47b0      	blx	r6
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	dc08      	bgt.n	800e3d4 <__sflush_r+0xfc>
 800e3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d4:	4407      	add	r7, r0
 800e3d6:	eba8 0800 	sub.w	r8, r8, r0
 800e3da:	e7e7      	b.n	800e3ac <__sflush_r+0xd4>
 800e3dc:	dfbffffe 	.word	0xdfbffffe

0800e3e0 <_fflush_r>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	690b      	ldr	r3, [r1, #16]
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	b913      	cbnz	r3, 800e3f0 <_fflush_r+0x10>
 800e3ea:	2500      	movs	r5, #0
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	b118      	cbz	r0, 800e3fa <_fflush_r+0x1a>
 800e3f2:	6a03      	ldr	r3, [r0, #32]
 800e3f4:	b90b      	cbnz	r3, 800e3fa <_fflush_r+0x1a>
 800e3f6:	f7ff f81d 	bl	800d434 <__sinit>
 800e3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0f3      	beq.n	800e3ea <_fflush_r+0xa>
 800e402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e404:	07d0      	lsls	r0, r2, #31
 800e406:	d404      	bmi.n	800e412 <_fflush_r+0x32>
 800e408:	0599      	lsls	r1, r3, #22
 800e40a:	d402      	bmi.n	800e412 <_fflush_r+0x32>
 800e40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e40e:	f7ff f928 	bl	800d662 <__retarget_lock_acquire_recursive>
 800e412:	4628      	mov	r0, r5
 800e414:	4621      	mov	r1, r4
 800e416:	f7ff ff5f 	bl	800e2d8 <__sflush_r>
 800e41a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e41c:	07da      	lsls	r2, r3, #31
 800e41e:	4605      	mov	r5, r0
 800e420:	d4e4      	bmi.n	800e3ec <_fflush_r+0xc>
 800e422:	89a3      	ldrh	r3, [r4, #12]
 800e424:	059b      	lsls	r3, r3, #22
 800e426:	d4e1      	bmi.n	800e3ec <_fflush_r+0xc>
 800e428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e42a:	f7ff f91b 	bl	800d664 <__retarget_lock_release_recursive>
 800e42e:	e7dd      	b.n	800e3ec <_fflush_r+0xc>

0800e430 <_Balloc>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	69c6      	ldr	r6, [r0, #28]
 800e434:	4604      	mov	r4, r0
 800e436:	460d      	mov	r5, r1
 800e438:	b976      	cbnz	r6, 800e458 <_Balloc+0x28>
 800e43a:	2010      	movs	r0, #16
 800e43c:	f7fe fd2a 	bl	800ce94 <malloc>
 800e440:	4602      	mov	r2, r0
 800e442:	61e0      	str	r0, [r4, #28]
 800e444:	b920      	cbnz	r0, 800e450 <_Balloc+0x20>
 800e446:	4b18      	ldr	r3, [pc, #96]	@ (800e4a8 <_Balloc+0x78>)
 800e448:	4818      	ldr	r0, [pc, #96]	@ (800e4ac <_Balloc+0x7c>)
 800e44a:	216b      	movs	r1, #107	@ 0x6b
 800e44c:	f000 fbfc 	bl	800ec48 <__assert_func>
 800e450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e454:	6006      	str	r6, [r0, #0]
 800e456:	60c6      	str	r6, [r0, #12]
 800e458:	69e6      	ldr	r6, [r4, #28]
 800e45a:	68f3      	ldr	r3, [r6, #12]
 800e45c:	b183      	cbz	r3, 800e480 <_Balloc+0x50>
 800e45e:	69e3      	ldr	r3, [r4, #28]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e466:	b9b8      	cbnz	r0, 800e498 <_Balloc+0x68>
 800e468:	2101      	movs	r1, #1
 800e46a:	fa01 f605 	lsl.w	r6, r1, r5
 800e46e:	1d72      	adds	r2, r6, #5
 800e470:	0092      	lsls	r2, r2, #2
 800e472:	4620      	mov	r0, r4
 800e474:	f000 fc06 	bl	800ec84 <_calloc_r>
 800e478:	b160      	cbz	r0, 800e494 <_Balloc+0x64>
 800e47a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e47e:	e00e      	b.n	800e49e <_Balloc+0x6e>
 800e480:	2221      	movs	r2, #33	@ 0x21
 800e482:	2104      	movs	r1, #4
 800e484:	4620      	mov	r0, r4
 800e486:	f000 fbfd 	bl	800ec84 <_calloc_r>
 800e48a:	69e3      	ldr	r3, [r4, #28]
 800e48c:	60f0      	str	r0, [r6, #12]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e4      	bne.n	800e45e <_Balloc+0x2e>
 800e494:	2000      	movs	r0, #0
 800e496:	bd70      	pop	{r4, r5, r6, pc}
 800e498:	6802      	ldr	r2, [r0, #0]
 800e49a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4a4:	e7f7      	b.n	800e496 <_Balloc+0x66>
 800e4a6:	bf00      	nop
 800e4a8:	0800f2d9 	.word	0x0800f2d9
 800e4ac:	0800f359 	.word	0x0800f359

0800e4b0 <_Bfree>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	69c6      	ldr	r6, [r0, #28]
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	b976      	cbnz	r6, 800e4d8 <_Bfree+0x28>
 800e4ba:	2010      	movs	r0, #16
 800e4bc:	f7fe fcea 	bl	800ce94 <malloc>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	61e8      	str	r0, [r5, #28]
 800e4c4:	b920      	cbnz	r0, 800e4d0 <_Bfree+0x20>
 800e4c6:	4b09      	ldr	r3, [pc, #36]	@ (800e4ec <_Bfree+0x3c>)
 800e4c8:	4809      	ldr	r0, [pc, #36]	@ (800e4f0 <_Bfree+0x40>)
 800e4ca:	218f      	movs	r1, #143	@ 0x8f
 800e4cc:	f000 fbbc 	bl	800ec48 <__assert_func>
 800e4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4d4:	6006      	str	r6, [r0, #0]
 800e4d6:	60c6      	str	r6, [r0, #12]
 800e4d8:	b13c      	cbz	r4, 800e4ea <_Bfree+0x3a>
 800e4da:	69eb      	ldr	r3, [r5, #28]
 800e4dc:	6862      	ldr	r2, [r4, #4]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4e4:	6021      	str	r1, [r4, #0]
 800e4e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	0800f2d9 	.word	0x0800f2d9
 800e4f0:	0800f359 	.word	0x0800f359

0800e4f4 <__multadd>:
 800e4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f8:	690d      	ldr	r5, [r1, #16]
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	461e      	mov	r6, r3
 800e500:	f101 0c14 	add.w	ip, r1, #20
 800e504:	2000      	movs	r0, #0
 800e506:	f8dc 3000 	ldr.w	r3, [ip]
 800e50a:	b299      	uxth	r1, r3
 800e50c:	fb02 6101 	mla	r1, r2, r1, r6
 800e510:	0c1e      	lsrs	r6, r3, #16
 800e512:	0c0b      	lsrs	r3, r1, #16
 800e514:	fb02 3306 	mla	r3, r2, r6, r3
 800e518:	b289      	uxth	r1, r1
 800e51a:	3001      	adds	r0, #1
 800e51c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e520:	4285      	cmp	r5, r0
 800e522:	f84c 1b04 	str.w	r1, [ip], #4
 800e526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e52a:	dcec      	bgt.n	800e506 <__multadd+0x12>
 800e52c:	b30e      	cbz	r6, 800e572 <__multadd+0x7e>
 800e52e:	68a3      	ldr	r3, [r4, #8]
 800e530:	42ab      	cmp	r3, r5
 800e532:	dc19      	bgt.n	800e568 <__multadd+0x74>
 800e534:	6861      	ldr	r1, [r4, #4]
 800e536:	4638      	mov	r0, r7
 800e538:	3101      	adds	r1, #1
 800e53a:	f7ff ff79 	bl	800e430 <_Balloc>
 800e53e:	4680      	mov	r8, r0
 800e540:	b928      	cbnz	r0, 800e54e <__multadd+0x5a>
 800e542:	4602      	mov	r2, r0
 800e544:	4b0c      	ldr	r3, [pc, #48]	@ (800e578 <__multadd+0x84>)
 800e546:	480d      	ldr	r0, [pc, #52]	@ (800e57c <__multadd+0x88>)
 800e548:	21ba      	movs	r1, #186	@ 0xba
 800e54a:	f000 fb7d 	bl	800ec48 <__assert_func>
 800e54e:	6922      	ldr	r2, [r4, #16]
 800e550:	3202      	adds	r2, #2
 800e552:	f104 010c 	add.w	r1, r4, #12
 800e556:	0092      	lsls	r2, r2, #2
 800e558:	300c      	adds	r0, #12
 800e55a:	f7ff f884 	bl	800d666 <memcpy>
 800e55e:	4621      	mov	r1, r4
 800e560:	4638      	mov	r0, r7
 800e562:	f7ff ffa5 	bl	800e4b0 <_Bfree>
 800e566:	4644      	mov	r4, r8
 800e568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e56c:	3501      	adds	r5, #1
 800e56e:	615e      	str	r6, [r3, #20]
 800e570:	6125      	str	r5, [r4, #16]
 800e572:	4620      	mov	r0, r4
 800e574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e578:	0800f348 	.word	0x0800f348
 800e57c:	0800f359 	.word	0x0800f359

0800e580 <__hi0bits>:
 800e580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e584:	4603      	mov	r3, r0
 800e586:	bf36      	itet	cc
 800e588:	0403      	lslcc	r3, r0, #16
 800e58a:	2000      	movcs	r0, #0
 800e58c:	2010      	movcc	r0, #16
 800e58e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e592:	bf3c      	itt	cc
 800e594:	021b      	lslcc	r3, r3, #8
 800e596:	3008      	addcc	r0, #8
 800e598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e59c:	bf3c      	itt	cc
 800e59e:	011b      	lslcc	r3, r3, #4
 800e5a0:	3004      	addcc	r0, #4
 800e5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5a6:	bf3c      	itt	cc
 800e5a8:	009b      	lslcc	r3, r3, #2
 800e5aa:	3002      	addcc	r0, #2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	db05      	blt.n	800e5bc <__hi0bits+0x3c>
 800e5b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e5b4:	f100 0001 	add.w	r0, r0, #1
 800e5b8:	bf08      	it	eq
 800e5ba:	2020      	moveq	r0, #32
 800e5bc:	4770      	bx	lr

0800e5be <__lo0bits>:
 800e5be:	6803      	ldr	r3, [r0, #0]
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	f013 0007 	ands.w	r0, r3, #7
 800e5c6:	d00b      	beq.n	800e5e0 <__lo0bits+0x22>
 800e5c8:	07d9      	lsls	r1, r3, #31
 800e5ca:	d421      	bmi.n	800e610 <__lo0bits+0x52>
 800e5cc:	0798      	lsls	r0, r3, #30
 800e5ce:	bf49      	itett	mi
 800e5d0:	085b      	lsrmi	r3, r3, #1
 800e5d2:	089b      	lsrpl	r3, r3, #2
 800e5d4:	2001      	movmi	r0, #1
 800e5d6:	6013      	strmi	r3, [r2, #0]
 800e5d8:	bf5c      	itt	pl
 800e5da:	6013      	strpl	r3, [r2, #0]
 800e5dc:	2002      	movpl	r0, #2
 800e5de:	4770      	bx	lr
 800e5e0:	b299      	uxth	r1, r3
 800e5e2:	b909      	cbnz	r1, 800e5e8 <__lo0bits+0x2a>
 800e5e4:	0c1b      	lsrs	r3, r3, #16
 800e5e6:	2010      	movs	r0, #16
 800e5e8:	b2d9      	uxtb	r1, r3
 800e5ea:	b909      	cbnz	r1, 800e5f0 <__lo0bits+0x32>
 800e5ec:	3008      	adds	r0, #8
 800e5ee:	0a1b      	lsrs	r3, r3, #8
 800e5f0:	0719      	lsls	r1, r3, #28
 800e5f2:	bf04      	itt	eq
 800e5f4:	091b      	lsreq	r3, r3, #4
 800e5f6:	3004      	addeq	r0, #4
 800e5f8:	0799      	lsls	r1, r3, #30
 800e5fa:	bf04      	itt	eq
 800e5fc:	089b      	lsreq	r3, r3, #2
 800e5fe:	3002      	addeq	r0, #2
 800e600:	07d9      	lsls	r1, r3, #31
 800e602:	d403      	bmi.n	800e60c <__lo0bits+0x4e>
 800e604:	085b      	lsrs	r3, r3, #1
 800e606:	f100 0001 	add.w	r0, r0, #1
 800e60a:	d003      	beq.n	800e614 <__lo0bits+0x56>
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	4770      	bx	lr
 800e610:	2000      	movs	r0, #0
 800e612:	4770      	bx	lr
 800e614:	2020      	movs	r0, #32
 800e616:	4770      	bx	lr

0800e618 <__i2b>:
 800e618:	b510      	push	{r4, lr}
 800e61a:	460c      	mov	r4, r1
 800e61c:	2101      	movs	r1, #1
 800e61e:	f7ff ff07 	bl	800e430 <_Balloc>
 800e622:	4602      	mov	r2, r0
 800e624:	b928      	cbnz	r0, 800e632 <__i2b+0x1a>
 800e626:	4b05      	ldr	r3, [pc, #20]	@ (800e63c <__i2b+0x24>)
 800e628:	4805      	ldr	r0, [pc, #20]	@ (800e640 <__i2b+0x28>)
 800e62a:	f240 1145 	movw	r1, #325	@ 0x145
 800e62e:	f000 fb0b 	bl	800ec48 <__assert_func>
 800e632:	2301      	movs	r3, #1
 800e634:	6144      	str	r4, [r0, #20]
 800e636:	6103      	str	r3, [r0, #16]
 800e638:	bd10      	pop	{r4, pc}
 800e63a:	bf00      	nop
 800e63c:	0800f348 	.word	0x0800f348
 800e640:	0800f359 	.word	0x0800f359

0800e644 <__multiply>:
 800e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e648:	4614      	mov	r4, r2
 800e64a:	690a      	ldr	r2, [r1, #16]
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	429a      	cmp	r2, r3
 800e650:	bfa8      	it	ge
 800e652:	4623      	movge	r3, r4
 800e654:	460f      	mov	r7, r1
 800e656:	bfa4      	itt	ge
 800e658:	460c      	movge	r4, r1
 800e65a:	461f      	movge	r7, r3
 800e65c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e660:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e664:	68a3      	ldr	r3, [r4, #8]
 800e666:	6861      	ldr	r1, [r4, #4]
 800e668:	eb0a 0609 	add.w	r6, sl, r9
 800e66c:	42b3      	cmp	r3, r6
 800e66e:	b085      	sub	sp, #20
 800e670:	bfb8      	it	lt
 800e672:	3101      	addlt	r1, #1
 800e674:	f7ff fedc 	bl	800e430 <_Balloc>
 800e678:	b930      	cbnz	r0, 800e688 <__multiply+0x44>
 800e67a:	4602      	mov	r2, r0
 800e67c:	4b44      	ldr	r3, [pc, #272]	@ (800e790 <__multiply+0x14c>)
 800e67e:	4845      	ldr	r0, [pc, #276]	@ (800e794 <__multiply+0x150>)
 800e680:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e684:	f000 fae0 	bl	800ec48 <__assert_func>
 800e688:	f100 0514 	add.w	r5, r0, #20
 800e68c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e690:	462b      	mov	r3, r5
 800e692:	2200      	movs	r2, #0
 800e694:	4543      	cmp	r3, r8
 800e696:	d321      	bcc.n	800e6dc <__multiply+0x98>
 800e698:	f107 0114 	add.w	r1, r7, #20
 800e69c:	f104 0214 	add.w	r2, r4, #20
 800e6a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e6a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	1b13      	subs	r3, r2, r4
 800e6ac:	3b15      	subs	r3, #21
 800e6ae:	f023 0303 	bic.w	r3, r3, #3
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	f104 0715 	add.w	r7, r4, #21
 800e6b8:	42ba      	cmp	r2, r7
 800e6ba:	bf38      	it	cc
 800e6bc:	2304      	movcc	r3, #4
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	9b02      	ldr	r3, [sp, #8]
 800e6c2:	9103      	str	r1, [sp, #12]
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	d80c      	bhi.n	800e6e2 <__multiply+0x9e>
 800e6c8:	2e00      	cmp	r6, #0
 800e6ca:	dd03      	ble.n	800e6d4 <__multiply+0x90>
 800e6cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d05b      	beq.n	800e78c <__multiply+0x148>
 800e6d4:	6106      	str	r6, [r0, #16]
 800e6d6:	b005      	add	sp, #20
 800e6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6dc:	f843 2b04 	str.w	r2, [r3], #4
 800e6e0:	e7d8      	b.n	800e694 <__multiply+0x50>
 800e6e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e6e6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ea:	d024      	beq.n	800e736 <__multiply+0xf2>
 800e6ec:	f104 0e14 	add.w	lr, r4, #20
 800e6f0:	46a9      	mov	r9, r5
 800e6f2:	f04f 0c00 	mov.w	ip, #0
 800e6f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6fa:	f8d9 3000 	ldr.w	r3, [r9]
 800e6fe:	fa1f fb87 	uxth.w	fp, r7
 800e702:	b29b      	uxth	r3, r3
 800e704:	fb0a 330b 	mla	r3, sl, fp, r3
 800e708:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e70c:	f8d9 7000 	ldr.w	r7, [r9]
 800e710:	4463      	add	r3, ip
 800e712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e716:	fb0a c70b 	mla	r7, sl, fp, ip
 800e71a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e71e:	b29b      	uxth	r3, r3
 800e720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e724:	4572      	cmp	r2, lr
 800e726:	f849 3b04 	str.w	r3, [r9], #4
 800e72a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e72e:	d8e2      	bhi.n	800e6f6 <__multiply+0xb2>
 800e730:	9b01      	ldr	r3, [sp, #4]
 800e732:	f845 c003 	str.w	ip, [r5, r3]
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e73c:	3104      	adds	r1, #4
 800e73e:	f1b9 0f00 	cmp.w	r9, #0
 800e742:	d021      	beq.n	800e788 <__multiply+0x144>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	f104 0c14 	add.w	ip, r4, #20
 800e74a:	46ae      	mov	lr, r5
 800e74c:	f04f 0a00 	mov.w	sl, #0
 800e750:	f8bc b000 	ldrh.w	fp, [ip]
 800e754:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e758:	fb09 770b 	mla	r7, r9, fp, r7
 800e75c:	4457      	add	r7, sl
 800e75e:	b29b      	uxth	r3, r3
 800e760:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e764:	f84e 3b04 	str.w	r3, [lr], #4
 800e768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e76c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e770:	f8be 3000 	ldrh.w	r3, [lr]
 800e774:	fb09 330a 	mla	r3, r9, sl, r3
 800e778:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e77c:	4562      	cmp	r2, ip
 800e77e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e782:	d8e5      	bhi.n	800e750 <__multiply+0x10c>
 800e784:	9f01      	ldr	r7, [sp, #4]
 800e786:	51eb      	str	r3, [r5, r7]
 800e788:	3504      	adds	r5, #4
 800e78a:	e799      	b.n	800e6c0 <__multiply+0x7c>
 800e78c:	3e01      	subs	r6, #1
 800e78e:	e79b      	b.n	800e6c8 <__multiply+0x84>
 800e790:	0800f348 	.word	0x0800f348
 800e794:	0800f359 	.word	0x0800f359

0800e798 <__pow5mult>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4615      	mov	r5, r2
 800e79e:	f012 0203 	ands.w	r2, r2, #3
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	460e      	mov	r6, r1
 800e7a6:	d007      	beq.n	800e7b8 <__pow5mult+0x20>
 800e7a8:	4c25      	ldr	r4, [pc, #148]	@ (800e840 <__pow5mult+0xa8>)
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7b2:	f7ff fe9f 	bl	800e4f4 <__multadd>
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	10ad      	asrs	r5, r5, #2
 800e7ba:	d03d      	beq.n	800e838 <__pow5mult+0xa0>
 800e7bc:	69fc      	ldr	r4, [r7, #28]
 800e7be:	b97c      	cbnz	r4, 800e7e0 <__pow5mult+0x48>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7fe fb67 	bl	800ce94 <malloc>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	61f8      	str	r0, [r7, #28]
 800e7ca:	b928      	cbnz	r0, 800e7d8 <__pow5mult+0x40>
 800e7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e844 <__pow5mult+0xac>)
 800e7ce:	481e      	ldr	r0, [pc, #120]	@ (800e848 <__pow5mult+0xb0>)
 800e7d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e7d4:	f000 fa38 	bl	800ec48 <__assert_func>
 800e7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7dc:	6004      	str	r4, [r0, #0]
 800e7de:	60c4      	str	r4, [r0, #12]
 800e7e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7e8:	b94c      	cbnz	r4, 800e7fe <__pow5mult+0x66>
 800e7ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f7ff ff12 	bl	800e618 <__i2b>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	6003      	str	r3, [r0, #0]
 800e7fe:	f04f 0900 	mov.w	r9, #0
 800e802:	07eb      	lsls	r3, r5, #31
 800e804:	d50a      	bpl.n	800e81c <__pow5mult+0x84>
 800e806:	4631      	mov	r1, r6
 800e808:	4622      	mov	r2, r4
 800e80a:	4638      	mov	r0, r7
 800e80c:	f7ff ff1a 	bl	800e644 <__multiply>
 800e810:	4631      	mov	r1, r6
 800e812:	4680      	mov	r8, r0
 800e814:	4638      	mov	r0, r7
 800e816:	f7ff fe4b 	bl	800e4b0 <_Bfree>
 800e81a:	4646      	mov	r6, r8
 800e81c:	106d      	asrs	r5, r5, #1
 800e81e:	d00b      	beq.n	800e838 <__pow5mult+0xa0>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	b938      	cbnz	r0, 800e834 <__pow5mult+0x9c>
 800e824:	4622      	mov	r2, r4
 800e826:	4621      	mov	r1, r4
 800e828:	4638      	mov	r0, r7
 800e82a:	f7ff ff0b 	bl	800e644 <__multiply>
 800e82e:	6020      	str	r0, [r4, #0]
 800e830:	f8c0 9000 	str.w	r9, [r0]
 800e834:	4604      	mov	r4, r0
 800e836:	e7e4      	b.n	800e802 <__pow5mult+0x6a>
 800e838:	4630      	mov	r0, r6
 800e83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83e:	bf00      	nop
 800e840:	0800f3b4 	.word	0x0800f3b4
 800e844:	0800f2d9 	.word	0x0800f2d9
 800e848:	0800f359 	.word	0x0800f359

0800e84c <__lshift>:
 800e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e850:	460c      	mov	r4, r1
 800e852:	6849      	ldr	r1, [r1, #4]
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e85a:	68a3      	ldr	r3, [r4, #8]
 800e85c:	4607      	mov	r7, r0
 800e85e:	4691      	mov	r9, r2
 800e860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e864:	f108 0601 	add.w	r6, r8, #1
 800e868:	42b3      	cmp	r3, r6
 800e86a:	db0b      	blt.n	800e884 <__lshift+0x38>
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff fddf 	bl	800e430 <_Balloc>
 800e872:	4605      	mov	r5, r0
 800e874:	b948      	cbnz	r0, 800e88a <__lshift+0x3e>
 800e876:	4602      	mov	r2, r0
 800e878:	4b28      	ldr	r3, [pc, #160]	@ (800e91c <__lshift+0xd0>)
 800e87a:	4829      	ldr	r0, [pc, #164]	@ (800e920 <__lshift+0xd4>)
 800e87c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e880:	f000 f9e2 	bl	800ec48 <__assert_func>
 800e884:	3101      	adds	r1, #1
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	e7ee      	b.n	800e868 <__lshift+0x1c>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f100 0114 	add.w	r1, r0, #20
 800e890:	f100 0210 	add.w	r2, r0, #16
 800e894:	4618      	mov	r0, r3
 800e896:	4553      	cmp	r3, sl
 800e898:	db33      	blt.n	800e902 <__lshift+0xb6>
 800e89a:	6920      	ldr	r0, [r4, #16]
 800e89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8a0:	f104 0314 	add.w	r3, r4, #20
 800e8a4:	f019 091f 	ands.w	r9, r9, #31
 800e8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8b0:	d02b      	beq.n	800e90a <__lshift+0xbe>
 800e8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8b6:	468a      	mov	sl, r1
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e8c0:	4310      	orrs	r0, r2
 800e8c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ca:	459c      	cmp	ip, r3
 800e8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8d0:	d8f3      	bhi.n	800e8ba <__lshift+0x6e>
 800e8d2:	ebac 0304 	sub.w	r3, ip, r4
 800e8d6:	3b15      	subs	r3, #21
 800e8d8:	f023 0303 	bic.w	r3, r3, #3
 800e8dc:	3304      	adds	r3, #4
 800e8de:	f104 0015 	add.w	r0, r4, #21
 800e8e2:	4584      	cmp	ip, r0
 800e8e4:	bf38      	it	cc
 800e8e6:	2304      	movcc	r3, #4
 800e8e8:	50ca      	str	r2, [r1, r3]
 800e8ea:	b10a      	cbz	r2, 800e8f0 <__lshift+0xa4>
 800e8ec:	f108 0602 	add.w	r6, r8, #2
 800e8f0:	3e01      	subs	r6, #1
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	612e      	str	r6, [r5, #16]
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f7ff fdda 	bl	800e4b0 <_Bfree>
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	f842 0f04 	str.w	r0, [r2, #4]!
 800e906:	3301      	adds	r3, #1
 800e908:	e7c5      	b.n	800e896 <__lshift+0x4a>
 800e90a:	3904      	subs	r1, #4
 800e90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e910:	f841 2f04 	str.w	r2, [r1, #4]!
 800e914:	459c      	cmp	ip, r3
 800e916:	d8f9      	bhi.n	800e90c <__lshift+0xc0>
 800e918:	e7ea      	b.n	800e8f0 <__lshift+0xa4>
 800e91a:	bf00      	nop
 800e91c:	0800f348 	.word	0x0800f348
 800e920:	0800f359 	.word	0x0800f359

0800e924 <__mcmp>:
 800e924:	690a      	ldr	r2, [r1, #16]
 800e926:	4603      	mov	r3, r0
 800e928:	6900      	ldr	r0, [r0, #16]
 800e92a:	1a80      	subs	r0, r0, r2
 800e92c:	b530      	push	{r4, r5, lr}
 800e92e:	d10e      	bne.n	800e94e <__mcmp+0x2a>
 800e930:	3314      	adds	r3, #20
 800e932:	3114      	adds	r1, #20
 800e934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e93c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e944:	4295      	cmp	r5, r2
 800e946:	d003      	beq.n	800e950 <__mcmp+0x2c>
 800e948:	d205      	bcs.n	800e956 <__mcmp+0x32>
 800e94a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e94e:	bd30      	pop	{r4, r5, pc}
 800e950:	42a3      	cmp	r3, r4
 800e952:	d3f3      	bcc.n	800e93c <__mcmp+0x18>
 800e954:	e7fb      	b.n	800e94e <__mcmp+0x2a>
 800e956:	2001      	movs	r0, #1
 800e958:	e7f9      	b.n	800e94e <__mcmp+0x2a>
	...

0800e95c <__mdiff>:
 800e95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	4689      	mov	r9, r1
 800e962:	4606      	mov	r6, r0
 800e964:	4611      	mov	r1, r2
 800e966:	4648      	mov	r0, r9
 800e968:	4614      	mov	r4, r2
 800e96a:	f7ff ffdb 	bl	800e924 <__mcmp>
 800e96e:	1e05      	subs	r5, r0, #0
 800e970:	d112      	bne.n	800e998 <__mdiff+0x3c>
 800e972:	4629      	mov	r1, r5
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff fd5b 	bl	800e430 <_Balloc>
 800e97a:	4602      	mov	r2, r0
 800e97c:	b928      	cbnz	r0, 800e98a <__mdiff+0x2e>
 800e97e:	4b3f      	ldr	r3, [pc, #252]	@ (800ea7c <__mdiff+0x120>)
 800e980:	f240 2137 	movw	r1, #567	@ 0x237
 800e984:	483e      	ldr	r0, [pc, #248]	@ (800ea80 <__mdiff+0x124>)
 800e986:	f000 f95f 	bl	800ec48 <__assert_func>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e990:	4610      	mov	r0, r2
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e998:	bfbc      	itt	lt
 800e99a:	464b      	movlt	r3, r9
 800e99c:	46a1      	movlt	r9, r4
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e9a4:	bfba      	itte	lt
 800e9a6:	461c      	movlt	r4, r3
 800e9a8:	2501      	movlt	r5, #1
 800e9aa:	2500      	movge	r5, #0
 800e9ac:	f7ff fd40 	bl	800e430 <_Balloc>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	b918      	cbnz	r0, 800e9bc <__mdiff+0x60>
 800e9b4:	4b31      	ldr	r3, [pc, #196]	@ (800ea7c <__mdiff+0x120>)
 800e9b6:	f240 2145 	movw	r1, #581	@ 0x245
 800e9ba:	e7e3      	b.n	800e984 <__mdiff+0x28>
 800e9bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e9c0:	6926      	ldr	r6, [r4, #16]
 800e9c2:	60c5      	str	r5, [r0, #12]
 800e9c4:	f109 0310 	add.w	r3, r9, #16
 800e9c8:	f109 0514 	add.w	r5, r9, #20
 800e9cc:	f104 0e14 	add.w	lr, r4, #20
 800e9d0:	f100 0b14 	add.w	fp, r0, #20
 800e9d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e9d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	46d9      	mov	r9, fp
 800e9e0:	f04f 0c00 	mov.w	ip, #0
 800e9e4:	9b01      	ldr	r3, [sp, #4]
 800e9e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e9ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	fa1f f38a 	uxth.w	r3, sl
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	b283      	uxth	r3, r0
 800e9f8:	1acb      	subs	r3, r1, r3
 800e9fa:	0c00      	lsrs	r0, r0, #16
 800e9fc:	4463      	add	r3, ip
 800e9fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea0c:	4576      	cmp	r6, lr
 800ea0e:	f849 3b04 	str.w	r3, [r9], #4
 800ea12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea16:	d8e5      	bhi.n	800e9e4 <__mdiff+0x88>
 800ea18:	1b33      	subs	r3, r6, r4
 800ea1a:	3b15      	subs	r3, #21
 800ea1c:	f023 0303 	bic.w	r3, r3, #3
 800ea20:	3415      	adds	r4, #21
 800ea22:	3304      	adds	r3, #4
 800ea24:	42a6      	cmp	r6, r4
 800ea26:	bf38      	it	cc
 800ea28:	2304      	movcc	r3, #4
 800ea2a:	441d      	add	r5, r3
 800ea2c:	445b      	add	r3, fp
 800ea2e:	461e      	mov	r6, r3
 800ea30:	462c      	mov	r4, r5
 800ea32:	4544      	cmp	r4, r8
 800ea34:	d30e      	bcc.n	800ea54 <__mdiff+0xf8>
 800ea36:	f108 0103 	add.w	r1, r8, #3
 800ea3a:	1b49      	subs	r1, r1, r5
 800ea3c:	f021 0103 	bic.w	r1, r1, #3
 800ea40:	3d03      	subs	r5, #3
 800ea42:	45a8      	cmp	r8, r5
 800ea44:	bf38      	it	cc
 800ea46:	2100      	movcc	r1, #0
 800ea48:	440b      	add	r3, r1
 800ea4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea4e:	b191      	cbz	r1, 800ea76 <__mdiff+0x11a>
 800ea50:	6117      	str	r7, [r2, #16]
 800ea52:	e79d      	b.n	800e990 <__mdiff+0x34>
 800ea54:	f854 1b04 	ldr.w	r1, [r4], #4
 800ea58:	46e6      	mov	lr, ip
 800ea5a:	0c08      	lsrs	r0, r1, #16
 800ea5c:	fa1c fc81 	uxtah	ip, ip, r1
 800ea60:	4471      	add	r1, lr
 800ea62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ea66:	b289      	uxth	r1, r1
 800ea68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ea6c:	f846 1b04 	str.w	r1, [r6], #4
 800ea70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea74:	e7dd      	b.n	800ea32 <__mdiff+0xd6>
 800ea76:	3f01      	subs	r7, #1
 800ea78:	e7e7      	b.n	800ea4a <__mdiff+0xee>
 800ea7a:	bf00      	nop
 800ea7c:	0800f348 	.word	0x0800f348
 800ea80:	0800f359 	.word	0x0800f359

0800ea84 <__d2b>:
 800ea84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea88:	460f      	mov	r7, r1
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	ec59 8b10 	vmov	r8, r9, d0
 800ea90:	4616      	mov	r6, r2
 800ea92:	f7ff fccd 	bl	800e430 <_Balloc>
 800ea96:	4604      	mov	r4, r0
 800ea98:	b930      	cbnz	r0, 800eaa8 <__d2b+0x24>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	4b23      	ldr	r3, [pc, #140]	@ (800eb2c <__d2b+0xa8>)
 800ea9e:	4824      	ldr	r0, [pc, #144]	@ (800eb30 <__d2b+0xac>)
 800eaa0:	f240 310f 	movw	r1, #783	@ 0x30f
 800eaa4:	f000 f8d0 	bl	800ec48 <__assert_func>
 800eaa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eaac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eab0:	b10d      	cbz	r5, 800eab6 <__d2b+0x32>
 800eab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	f1b8 0300 	subs.w	r3, r8, #0
 800eabc:	d023      	beq.n	800eb06 <__d2b+0x82>
 800eabe:	4668      	mov	r0, sp
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	f7ff fd7c 	bl	800e5be <__lo0bits>
 800eac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eaca:	b1d0      	cbz	r0, 800eb02 <__d2b+0x7e>
 800eacc:	f1c0 0320 	rsb	r3, r0, #32
 800ead0:	fa02 f303 	lsl.w	r3, r2, r3
 800ead4:	430b      	orrs	r3, r1
 800ead6:	40c2      	lsrs	r2, r0
 800ead8:	6163      	str	r3, [r4, #20]
 800eada:	9201      	str	r2, [sp, #4]
 800eadc:	9b01      	ldr	r3, [sp, #4]
 800eade:	61a3      	str	r3, [r4, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	bf0c      	ite	eq
 800eae4:	2201      	moveq	r2, #1
 800eae6:	2202      	movne	r2, #2
 800eae8:	6122      	str	r2, [r4, #16]
 800eaea:	b1a5      	cbz	r5, 800eb16 <__d2b+0x92>
 800eaec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eaf0:	4405      	add	r5, r0
 800eaf2:	603d      	str	r5, [r7, #0]
 800eaf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eaf8:	6030      	str	r0, [r6, #0]
 800eafa:	4620      	mov	r0, r4
 800eafc:	b003      	add	sp, #12
 800eafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb02:	6161      	str	r1, [r4, #20]
 800eb04:	e7ea      	b.n	800eadc <__d2b+0x58>
 800eb06:	a801      	add	r0, sp, #4
 800eb08:	f7ff fd59 	bl	800e5be <__lo0bits>
 800eb0c:	9b01      	ldr	r3, [sp, #4]
 800eb0e:	6163      	str	r3, [r4, #20]
 800eb10:	3020      	adds	r0, #32
 800eb12:	2201      	movs	r2, #1
 800eb14:	e7e8      	b.n	800eae8 <__d2b+0x64>
 800eb16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb1e:	6038      	str	r0, [r7, #0]
 800eb20:	6918      	ldr	r0, [r3, #16]
 800eb22:	f7ff fd2d 	bl	800e580 <__hi0bits>
 800eb26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb2a:	e7e5      	b.n	800eaf8 <__d2b+0x74>
 800eb2c:	0800f348 	.word	0x0800f348
 800eb30:	0800f359 	.word	0x0800f359

0800eb34 <__sread>:
 800eb34:	b510      	push	{r4, lr}
 800eb36:	460c      	mov	r4, r1
 800eb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3c:	f000 f860 	bl	800ec00 <_read_r>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	bfab      	itete	ge
 800eb44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb46:	89a3      	ldrhlt	r3, [r4, #12]
 800eb48:	181b      	addge	r3, r3, r0
 800eb4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb4e:	bfac      	ite	ge
 800eb50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb52:	81a3      	strhlt	r3, [r4, #12]
 800eb54:	bd10      	pop	{r4, pc}

0800eb56 <__swrite>:
 800eb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5a:	461f      	mov	r7, r3
 800eb5c:	898b      	ldrh	r3, [r1, #12]
 800eb5e:	05db      	lsls	r3, r3, #23
 800eb60:	4605      	mov	r5, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	4616      	mov	r6, r2
 800eb66:	d505      	bpl.n	800eb74 <__swrite+0x1e>
 800eb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f000 f834 	bl	800ebdc <_lseek_r>
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	4632      	mov	r2, r6
 800eb82:	463b      	mov	r3, r7
 800eb84:	4628      	mov	r0, r5
 800eb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8a:	f000 b84b 	b.w	800ec24 <_write_r>

0800eb8e <__sseek>:
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	460c      	mov	r4, r1
 800eb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb96:	f000 f821 	bl	800ebdc <_lseek_r>
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	bf15      	itete	ne
 800eba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ebaa:	81a3      	strheq	r3, [r4, #12]
 800ebac:	bf18      	it	ne
 800ebae:	81a3      	strhne	r3, [r4, #12]
 800ebb0:	bd10      	pop	{r4, pc}

0800ebb2 <__sclose>:
 800ebb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb6:	f000 b801 	b.w	800ebbc <_close_r>
	...

0800ebbc <_close_r>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4d06      	ldr	r5, [pc, #24]	@ (800ebd8 <_close_r+0x1c>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	f7f3 fc9e 	bl	8002508 <_close>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d102      	bne.n	800ebd6 <_close_r+0x1a>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	b103      	cbz	r3, 800ebd6 <_close_r+0x1a>
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	240424f4 	.word	0x240424f4

0800ebdc <_lseek_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4d07      	ldr	r5, [pc, #28]	@ (800ebfc <_lseek_r+0x20>)
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	4608      	mov	r0, r1
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	602a      	str	r2, [r5, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	f7f3 fcb3 	bl	8002556 <_lseek>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	d102      	bne.n	800ebfa <_lseek_r+0x1e>
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	b103      	cbz	r3, 800ebfa <_lseek_r+0x1e>
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	bd38      	pop	{r3, r4, r5, pc}
 800ebfc:	240424f4 	.word	0x240424f4

0800ec00 <_read_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4d07      	ldr	r5, [pc, #28]	@ (800ec20 <_read_r+0x20>)
 800ec04:	4604      	mov	r4, r0
 800ec06:	4608      	mov	r0, r1
 800ec08:	4611      	mov	r1, r2
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	602a      	str	r2, [r5, #0]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	f7f3 fc41 	bl	8002496 <_read>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_read_r+0x1e>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_read_r+0x1e>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	240424f4 	.word	0x240424f4

0800ec24 <_write_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d07      	ldr	r5, [pc, #28]	@ (800ec44 <_write_r+0x20>)
 800ec28:	4604      	mov	r4, r0
 800ec2a:	4608      	mov	r0, r1
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	2200      	movs	r2, #0
 800ec30:	602a      	str	r2, [r5, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	f7f3 fc4c 	bl	80024d0 <_write>
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d102      	bne.n	800ec42 <_write_r+0x1e>
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	b103      	cbz	r3, 800ec42 <_write_r+0x1e>
 800ec40:	6023      	str	r3, [r4, #0]
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
 800ec44:	240424f4 	.word	0x240424f4

0800ec48 <__assert_func>:
 800ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b09      	ldr	r3, [pc, #36]	@ (800ec74 <__assert_func+0x2c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4605      	mov	r5, r0
 800ec54:	68d8      	ldr	r0, [r3, #12]
 800ec56:	b954      	cbnz	r4, 800ec6e <__assert_func+0x26>
 800ec58:	4b07      	ldr	r3, [pc, #28]	@ (800ec78 <__assert_func+0x30>)
 800ec5a:	461c      	mov	r4, r3
 800ec5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec60:	9100      	str	r1, [sp, #0]
 800ec62:	462b      	mov	r3, r5
 800ec64:	4905      	ldr	r1, [pc, #20]	@ (800ec7c <__assert_func+0x34>)
 800ec66:	f000 f833 	bl	800ecd0 <fiprintf>
 800ec6a:	f7fd fe63 	bl	800c934 <abort>
 800ec6e:	4b04      	ldr	r3, [pc, #16]	@ (800ec80 <__assert_func+0x38>)
 800ec70:	e7f4      	b.n	800ec5c <__assert_func+0x14>
 800ec72:	bf00      	nop
 800ec74:	24000020 	.word	0x24000020
 800ec78:	0800f5f6 	.word	0x0800f5f6
 800ec7c:	0800f5c8 	.word	0x0800f5c8
 800ec80:	0800f5bb 	.word	0x0800f5bb

0800ec84 <_calloc_r>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	fba1 5402 	umull	r5, r4, r1, r2
 800ec8a:	b93c      	cbnz	r4, 800ec9c <_calloc_r+0x18>
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	f7fe f92b 	bl	800cee8 <_malloc_r>
 800ec92:	4606      	mov	r6, r0
 800ec94:	b928      	cbnz	r0, 800eca2 <_calloc_r+0x1e>
 800ec96:	2600      	movs	r6, #0
 800ec98:	4630      	mov	r0, r6
 800ec9a:	bd70      	pop	{r4, r5, r6, pc}
 800ec9c:	220c      	movs	r2, #12
 800ec9e:	6002      	str	r2, [r0, #0]
 800eca0:	e7f9      	b.n	800ec96 <_calloc_r+0x12>
 800eca2:	462a      	mov	r2, r5
 800eca4:	4621      	mov	r1, r4
 800eca6:	f7fe fbfb 	bl	800d4a0 <memset>
 800ecaa:	e7f5      	b.n	800ec98 <_calloc_r+0x14>

0800ecac <__ascii_mbtowc>:
 800ecac:	b082      	sub	sp, #8
 800ecae:	b901      	cbnz	r1, 800ecb2 <__ascii_mbtowc+0x6>
 800ecb0:	a901      	add	r1, sp, #4
 800ecb2:	b142      	cbz	r2, 800ecc6 <__ascii_mbtowc+0x1a>
 800ecb4:	b14b      	cbz	r3, 800ecca <__ascii_mbtowc+0x1e>
 800ecb6:	7813      	ldrb	r3, [r2, #0]
 800ecb8:	600b      	str	r3, [r1, #0]
 800ecba:	7812      	ldrb	r2, [r2, #0]
 800ecbc:	1e10      	subs	r0, r2, #0
 800ecbe:	bf18      	it	ne
 800ecc0:	2001      	movne	r0, #1
 800ecc2:	b002      	add	sp, #8
 800ecc4:	4770      	bx	lr
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	e7fb      	b.n	800ecc2 <__ascii_mbtowc+0x16>
 800ecca:	f06f 0001 	mvn.w	r0, #1
 800ecce:	e7f8      	b.n	800ecc2 <__ascii_mbtowc+0x16>

0800ecd0 <fiprintf>:
 800ecd0:	b40e      	push	{r1, r2, r3}
 800ecd2:	b503      	push	{r0, r1, lr}
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	ab03      	add	r3, sp, #12
 800ecd8:	4805      	ldr	r0, [pc, #20]	@ (800ecf0 <fiprintf+0x20>)
 800ecda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	f000 f83d 	bl	800ed60 <_vfiprintf_r>
 800ece6:	b002      	add	sp, #8
 800ece8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecec:	b003      	add	sp, #12
 800ecee:	4770      	bx	lr
 800ecf0:	24000020 	.word	0x24000020

0800ecf4 <__ascii_wctomb>:
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	4608      	mov	r0, r1
 800ecf8:	b141      	cbz	r1, 800ed0c <__ascii_wctomb+0x18>
 800ecfa:	2aff      	cmp	r2, #255	@ 0xff
 800ecfc:	d904      	bls.n	800ed08 <__ascii_wctomb+0x14>
 800ecfe:	228a      	movs	r2, #138	@ 0x8a
 800ed00:	601a      	str	r2, [r3, #0]
 800ed02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed06:	4770      	bx	lr
 800ed08:	700a      	strb	r2, [r1, #0]
 800ed0a:	2001      	movs	r0, #1
 800ed0c:	4770      	bx	lr

0800ed0e <__sfputc_r>:
 800ed0e:	6893      	ldr	r3, [r2, #8]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	b410      	push	{r4}
 800ed16:	6093      	str	r3, [r2, #8]
 800ed18:	da08      	bge.n	800ed2c <__sfputc_r+0x1e>
 800ed1a:	6994      	ldr	r4, [r2, #24]
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	db01      	blt.n	800ed24 <__sfputc_r+0x16>
 800ed20:	290a      	cmp	r1, #10
 800ed22:	d103      	bne.n	800ed2c <__sfputc_r+0x1e>
 800ed24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed28:	f000 b932 	b.w	800ef90 <__swbuf_r>
 800ed2c:	6813      	ldr	r3, [r2, #0]
 800ed2e:	1c58      	adds	r0, r3, #1
 800ed30:	6010      	str	r0, [r2, #0]
 800ed32:	7019      	strb	r1, [r3, #0]
 800ed34:	4608      	mov	r0, r1
 800ed36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <__sfputs_r>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	4606      	mov	r6, r0
 800ed40:	460f      	mov	r7, r1
 800ed42:	4614      	mov	r4, r2
 800ed44:	18d5      	adds	r5, r2, r3
 800ed46:	42ac      	cmp	r4, r5
 800ed48:	d101      	bne.n	800ed4e <__sfputs_r+0x12>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	e007      	b.n	800ed5e <__sfputs_r+0x22>
 800ed4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed52:	463a      	mov	r2, r7
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff ffda 	bl	800ed0e <__sfputc_r>
 800ed5a:	1c43      	adds	r3, r0, #1
 800ed5c:	d1f3      	bne.n	800ed46 <__sfputs_r+0xa>
 800ed5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed60 <_vfiprintf_r>:
 800ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	460d      	mov	r5, r1
 800ed66:	b09d      	sub	sp, #116	@ 0x74
 800ed68:	4614      	mov	r4, r2
 800ed6a:	4698      	mov	r8, r3
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	b118      	cbz	r0, 800ed78 <_vfiprintf_r+0x18>
 800ed70:	6a03      	ldr	r3, [r0, #32]
 800ed72:	b90b      	cbnz	r3, 800ed78 <_vfiprintf_r+0x18>
 800ed74:	f7fe fb5e 	bl	800d434 <__sinit>
 800ed78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed7a:	07d9      	lsls	r1, r3, #31
 800ed7c:	d405      	bmi.n	800ed8a <_vfiprintf_r+0x2a>
 800ed7e:	89ab      	ldrh	r3, [r5, #12]
 800ed80:	059a      	lsls	r2, r3, #22
 800ed82:	d402      	bmi.n	800ed8a <_vfiprintf_r+0x2a>
 800ed84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed86:	f7fe fc6c 	bl	800d662 <__retarget_lock_acquire_recursive>
 800ed8a:	89ab      	ldrh	r3, [r5, #12]
 800ed8c:	071b      	lsls	r3, r3, #28
 800ed8e:	d501      	bpl.n	800ed94 <_vfiprintf_r+0x34>
 800ed90:	692b      	ldr	r3, [r5, #16]
 800ed92:	b99b      	cbnz	r3, 800edbc <_vfiprintf_r+0x5c>
 800ed94:	4629      	mov	r1, r5
 800ed96:	4630      	mov	r0, r6
 800ed98:	f000 f938 	bl	800f00c <__swsetup_r>
 800ed9c:	b170      	cbz	r0, 800edbc <_vfiprintf_r+0x5c>
 800ed9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eda0:	07dc      	lsls	r4, r3, #31
 800eda2:	d504      	bpl.n	800edae <_vfiprintf_r+0x4e>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eda8:	b01d      	add	sp, #116	@ 0x74
 800edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edae:	89ab      	ldrh	r3, [r5, #12]
 800edb0:	0598      	lsls	r0, r3, #22
 800edb2:	d4f7      	bmi.n	800eda4 <_vfiprintf_r+0x44>
 800edb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edb6:	f7fe fc55 	bl	800d664 <__retarget_lock_release_recursive>
 800edba:	e7f3      	b.n	800eda4 <_vfiprintf_r+0x44>
 800edbc:	2300      	movs	r3, #0
 800edbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc0:	2320      	movs	r3, #32
 800edc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800edca:	2330      	movs	r3, #48	@ 0x30
 800edcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef7c <_vfiprintf_r+0x21c>
 800edd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edd4:	f04f 0901 	mov.w	r9, #1
 800edd8:	4623      	mov	r3, r4
 800edda:	469a      	mov	sl, r3
 800eddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede0:	b10a      	cbz	r2, 800ede6 <_vfiprintf_r+0x86>
 800ede2:	2a25      	cmp	r2, #37	@ 0x25
 800ede4:	d1f9      	bne.n	800edda <_vfiprintf_r+0x7a>
 800ede6:	ebba 0b04 	subs.w	fp, sl, r4
 800edea:	d00b      	beq.n	800ee04 <_vfiprintf_r+0xa4>
 800edec:	465b      	mov	r3, fp
 800edee:	4622      	mov	r2, r4
 800edf0:	4629      	mov	r1, r5
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7ff ffa2 	bl	800ed3c <__sfputs_r>
 800edf8:	3001      	adds	r0, #1
 800edfa:	f000 80a7 	beq.w	800ef4c <_vfiprintf_r+0x1ec>
 800edfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee00:	445a      	add	r2, fp
 800ee02:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee04:	f89a 3000 	ldrb.w	r3, [sl]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f000 809f 	beq.w	800ef4c <_vfiprintf_r+0x1ec>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee18:	f10a 0a01 	add.w	sl, sl, #1
 800ee1c:	9304      	str	r3, [sp, #16]
 800ee1e:	9307      	str	r3, [sp, #28]
 800ee20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee24:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee26:	4654      	mov	r4, sl
 800ee28:	2205      	movs	r2, #5
 800ee2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2e:	4853      	ldr	r0, [pc, #332]	@ (800ef7c <_vfiprintf_r+0x21c>)
 800ee30:	f7f1 fa6e 	bl	8000310 <memchr>
 800ee34:	9a04      	ldr	r2, [sp, #16]
 800ee36:	b9d8      	cbnz	r0, 800ee70 <_vfiprintf_r+0x110>
 800ee38:	06d1      	lsls	r1, r2, #27
 800ee3a:	bf44      	itt	mi
 800ee3c:	2320      	movmi	r3, #32
 800ee3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee42:	0713      	lsls	r3, r2, #28
 800ee44:	bf44      	itt	mi
 800ee46:	232b      	movmi	r3, #43	@ 0x2b
 800ee48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee52:	d015      	beq.n	800ee80 <_vfiprintf_r+0x120>
 800ee54:	9a07      	ldr	r2, [sp, #28]
 800ee56:	4654      	mov	r4, sl
 800ee58:	2000      	movs	r0, #0
 800ee5a:	f04f 0c0a 	mov.w	ip, #10
 800ee5e:	4621      	mov	r1, r4
 800ee60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee64:	3b30      	subs	r3, #48	@ 0x30
 800ee66:	2b09      	cmp	r3, #9
 800ee68:	d94b      	bls.n	800ef02 <_vfiprintf_r+0x1a2>
 800ee6a:	b1b0      	cbz	r0, 800ee9a <_vfiprintf_r+0x13a>
 800ee6c:	9207      	str	r2, [sp, #28]
 800ee6e:	e014      	b.n	800ee9a <_vfiprintf_r+0x13a>
 800ee70:	eba0 0308 	sub.w	r3, r0, r8
 800ee74:	fa09 f303 	lsl.w	r3, r9, r3
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	9304      	str	r3, [sp, #16]
 800ee7c:	46a2      	mov	sl, r4
 800ee7e:	e7d2      	b.n	800ee26 <_vfiprintf_r+0xc6>
 800ee80:	9b03      	ldr	r3, [sp, #12]
 800ee82:	1d19      	adds	r1, r3, #4
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	9103      	str	r1, [sp, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	bfbb      	ittet	lt
 800ee8c:	425b      	neglt	r3, r3
 800ee8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee92:	9307      	strge	r3, [sp, #28]
 800ee94:	9307      	strlt	r3, [sp, #28]
 800ee96:	bfb8      	it	lt
 800ee98:	9204      	strlt	r2, [sp, #16]
 800ee9a:	7823      	ldrb	r3, [r4, #0]
 800ee9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee9e:	d10a      	bne.n	800eeb6 <_vfiprintf_r+0x156>
 800eea0:	7863      	ldrb	r3, [r4, #1]
 800eea2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea4:	d132      	bne.n	800ef0c <_vfiprintf_r+0x1ac>
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	1d1a      	adds	r2, r3, #4
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	9203      	str	r2, [sp, #12]
 800eeae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeb2:	3402      	adds	r4, #2
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef8c <_vfiprintf_r+0x22c>
 800eeba:	7821      	ldrb	r1, [r4, #0]
 800eebc:	2203      	movs	r2, #3
 800eebe:	4650      	mov	r0, sl
 800eec0:	f7f1 fa26 	bl	8000310 <memchr>
 800eec4:	b138      	cbz	r0, 800eed6 <_vfiprintf_r+0x176>
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	eba0 000a 	sub.w	r0, r0, sl
 800eecc:	2240      	movs	r2, #64	@ 0x40
 800eece:	4082      	lsls	r2, r0
 800eed0:	4313      	orrs	r3, r2
 800eed2:	3401      	adds	r4, #1
 800eed4:	9304      	str	r3, [sp, #16]
 800eed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeda:	4829      	ldr	r0, [pc, #164]	@ (800ef80 <_vfiprintf_r+0x220>)
 800eedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee0:	2206      	movs	r2, #6
 800eee2:	f7f1 fa15 	bl	8000310 <memchr>
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d03f      	beq.n	800ef6a <_vfiprintf_r+0x20a>
 800eeea:	4b26      	ldr	r3, [pc, #152]	@ (800ef84 <_vfiprintf_r+0x224>)
 800eeec:	bb1b      	cbnz	r3, 800ef36 <_vfiprintf_r+0x1d6>
 800eeee:	9b03      	ldr	r3, [sp, #12]
 800eef0:	3307      	adds	r3, #7
 800eef2:	f023 0307 	bic.w	r3, r3, #7
 800eef6:	3308      	adds	r3, #8
 800eef8:	9303      	str	r3, [sp, #12]
 800eefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefc:	443b      	add	r3, r7
 800eefe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef00:	e76a      	b.n	800edd8 <_vfiprintf_r+0x78>
 800ef02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef06:	460c      	mov	r4, r1
 800ef08:	2001      	movs	r0, #1
 800ef0a:	e7a8      	b.n	800ee5e <_vfiprintf_r+0xfe>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	3401      	adds	r4, #1
 800ef10:	9305      	str	r3, [sp, #20]
 800ef12:	4619      	mov	r1, r3
 800ef14:	f04f 0c0a 	mov.w	ip, #10
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef1e:	3a30      	subs	r2, #48	@ 0x30
 800ef20:	2a09      	cmp	r2, #9
 800ef22:	d903      	bls.n	800ef2c <_vfiprintf_r+0x1cc>
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d0c6      	beq.n	800eeb6 <_vfiprintf_r+0x156>
 800ef28:	9105      	str	r1, [sp, #20]
 800ef2a:	e7c4      	b.n	800eeb6 <_vfiprintf_r+0x156>
 800ef2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef30:	4604      	mov	r4, r0
 800ef32:	2301      	movs	r3, #1
 800ef34:	e7f0      	b.n	800ef18 <_vfiprintf_r+0x1b8>
 800ef36:	ab03      	add	r3, sp, #12
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	4b12      	ldr	r3, [pc, #72]	@ (800ef88 <_vfiprintf_r+0x228>)
 800ef3e:	a904      	add	r1, sp, #16
 800ef40:	4630      	mov	r0, r6
 800ef42:	f7fd fd8d 	bl	800ca60 <_printf_float>
 800ef46:	4607      	mov	r7, r0
 800ef48:	1c78      	adds	r0, r7, #1
 800ef4a:	d1d6      	bne.n	800eefa <_vfiprintf_r+0x19a>
 800ef4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef4e:	07d9      	lsls	r1, r3, #31
 800ef50:	d405      	bmi.n	800ef5e <_vfiprintf_r+0x1fe>
 800ef52:	89ab      	ldrh	r3, [r5, #12]
 800ef54:	059a      	lsls	r2, r3, #22
 800ef56:	d402      	bmi.n	800ef5e <_vfiprintf_r+0x1fe>
 800ef58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef5a:	f7fe fb83 	bl	800d664 <__retarget_lock_release_recursive>
 800ef5e:	89ab      	ldrh	r3, [r5, #12]
 800ef60:	065b      	lsls	r3, r3, #25
 800ef62:	f53f af1f 	bmi.w	800eda4 <_vfiprintf_r+0x44>
 800ef66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef68:	e71e      	b.n	800eda8 <_vfiprintf_r+0x48>
 800ef6a:	ab03      	add	r3, sp, #12
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	462a      	mov	r2, r5
 800ef70:	4b05      	ldr	r3, [pc, #20]	@ (800ef88 <_vfiprintf_r+0x228>)
 800ef72:	a904      	add	r1, sp, #16
 800ef74:	4630      	mov	r0, r6
 800ef76:	f7fe f8a5 	bl	800d0c4 <_printf_i>
 800ef7a:	e7e4      	b.n	800ef46 <_vfiprintf_r+0x1e6>
 800ef7c:	0800f5f7 	.word	0x0800f5f7
 800ef80:	0800f601 	.word	0x0800f601
 800ef84:	0800ca61 	.word	0x0800ca61
 800ef88:	0800ed3d 	.word	0x0800ed3d
 800ef8c:	0800f5fd 	.word	0x0800f5fd

0800ef90 <__swbuf_r>:
 800ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef92:	460e      	mov	r6, r1
 800ef94:	4614      	mov	r4, r2
 800ef96:	4605      	mov	r5, r0
 800ef98:	b118      	cbz	r0, 800efa2 <__swbuf_r+0x12>
 800ef9a:	6a03      	ldr	r3, [r0, #32]
 800ef9c:	b90b      	cbnz	r3, 800efa2 <__swbuf_r+0x12>
 800ef9e:	f7fe fa49 	bl	800d434 <__sinit>
 800efa2:	69a3      	ldr	r3, [r4, #24]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	071a      	lsls	r2, r3, #28
 800efaa:	d501      	bpl.n	800efb0 <__swbuf_r+0x20>
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	b943      	cbnz	r3, 800efc2 <__swbuf_r+0x32>
 800efb0:	4621      	mov	r1, r4
 800efb2:	4628      	mov	r0, r5
 800efb4:	f000 f82a 	bl	800f00c <__swsetup_r>
 800efb8:	b118      	cbz	r0, 800efc2 <__swbuf_r+0x32>
 800efba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800efbe:	4638      	mov	r0, r7
 800efc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	6922      	ldr	r2, [r4, #16]
 800efc6:	1a98      	subs	r0, r3, r2
 800efc8:	6963      	ldr	r3, [r4, #20]
 800efca:	b2f6      	uxtb	r6, r6
 800efcc:	4283      	cmp	r3, r0
 800efce:	4637      	mov	r7, r6
 800efd0:	dc05      	bgt.n	800efde <__swbuf_r+0x4e>
 800efd2:	4621      	mov	r1, r4
 800efd4:	4628      	mov	r0, r5
 800efd6:	f7ff fa03 	bl	800e3e0 <_fflush_r>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d1ed      	bne.n	800efba <__swbuf_r+0x2a>
 800efde:	68a3      	ldr	r3, [r4, #8]
 800efe0:	3b01      	subs	r3, #1
 800efe2:	60a3      	str	r3, [r4, #8]
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	1c5a      	adds	r2, r3, #1
 800efe8:	6022      	str	r2, [r4, #0]
 800efea:	701e      	strb	r6, [r3, #0]
 800efec:	6962      	ldr	r2, [r4, #20]
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d004      	beq.n	800effe <__swbuf_r+0x6e>
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	07db      	lsls	r3, r3, #31
 800eff8:	d5e1      	bpl.n	800efbe <__swbuf_r+0x2e>
 800effa:	2e0a      	cmp	r6, #10
 800effc:	d1df      	bne.n	800efbe <__swbuf_r+0x2e>
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	f7ff f9ed 	bl	800e3e0 <_fflush_r>
 800f006:	2800      	cmp	r0, #0
 800f008:	d0d9      	beq.n	800efbe <__swbuf_r+0x2e>
 800f00a:	e7d6      	b.n	800efba <__swbuf_r+0x2a>

0800f00c <__swsetup_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4b29      	ldr	r3, [pc, #164]	@ (800f0b4 <__swsetup_r+0xa8>)
 800f010:	4605      	mov	r5, r0
 800f012:	6818      	ldr	r0, [r3, #0]
 800f014:	460c      	mov	r4, r1
 800f016:	b118      	cbz	r0, 800f020 <__swsetup_r+0x14>
 800f018:	6a03      	ldr	r3, [r0, #32]
 800f01a:	b90b      	cbnz	r3, 800f020 <__swsetup_r+0x14>
 800f01c:	f7fe fa0a 	bl	800d434 <__sinit>
 800f020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f024:	0719      	lsls	r1, r3, #28
 800f026:	d422      	bmi.n	800f06e <__swsetup_r+0x62>
 800f028:	06da      	lsls	r2, r3, #27
 800f02a:	d407      	bmi.n	800f03c <__swsetup_r+0x30>
 800f02c:	2209      	movs	r2, #9
 800f02e:	602a      	str	r2, [r5, #0]
 800f030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f034:	81a3      	strh	r3, [r4, #12]
 800f036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f03a:	e033      	b.n	800f0a4 <__swsetup_r+0x98>
 800f03c:	0758      	lsls	r0, r3, #29
 800f03e:	d512      	bpl.n	800f066 <__swsetup_r+0x5a>
 800f040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f042:	b141      	cbz	r1, 800f056 <__swsetup_r+0x4a>
 800f044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f048:	4299      	cmp	r1, r3
 800f04a:	d002      	beq.n	800f052 <__swsetup_r+0x46>
 800f04c:	4628      	mov	r0, r5
 800f04e:	f7ff f8f9 	bl	800e244 <_free_r>
 800f052:	2300      	movs	r3, #0
 800f054:	6363      	str	r3, [r4, #52]	@ 0x34
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	2300      	movs	r3, #0
 800f060:	6063      	str	r3, [r4, #4]
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	f043 0308 	orr.w	r3, r3, #8
 800f06c:	81a3      	strh	r3, [r4, #12]
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	b94b      	cbnz	r3, 800f086 <__swsetup_r+0x7a>
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f07c:	d003      	beq.n	800f086 <__swsetup_r+0x7a>
 800f07e:	4621      	mov	r1, r4
 800f080:	4628      	mov	r0, r5
 800f082:	f000 f83f 	bl	800f104 <__smakebuf_r>
 800f086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08a:	f013 0201 	ands.w	r2, r3, #1
 800f08e:	d00a      	beq.n	800f0a6 <__swsetup_r+0x9a>
 800f090:	2200      	movs	r2, #0
 800f092:	60a2      	str	r2, [r4, #8]
 800f094:	6962      	ldr	r2, [r4, #20]
 800f096:	4252      	negs	r2, r2
 800f098:	61a2      	str	r2, [r4, #24]
 800f09a:	6922      	ldr	r2, [r4, #16]
 800f09c:	b942      	cbnz	r2, 800f0b0 <__swsetup_r+0xa4>
 800f09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0a2:	d1c5      	bne.n	800f030 <__swsetup_r+0x24>
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	0799      	lsls	r1, r3, #30
 800f0a8:	bf58      	it	pl
 800f0aa:	6962      	ldrpl	r2, [r4, #20]
 800f0ac:	60a2      	str	r2, [r4, #8]
 800f0ae:	e7f4      	b.n	800f09a <__swsetup_r+0x8e>
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	e7f7      	b.n	800f0a4 <__swsetup_r+0x98>
 800f0b4:	24000020 	.word	0x24000020

0800f0b8 <__swhatbuf_r>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c0:	2900      	cmp	r1, #0
 800f0c2:	b096      	sub	sp, #88	@ 0x58
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	461e      	mov	r6, r3
 800f0c8:	da0d      	bge.n	800f0e6 <__swhatbuf_r+0x2e>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f0d0:	f04f 0100 	mov.w	r1, #0
 800f0d4:	bf14      	ite	ne
 800f0d6:	2340      	movne	r3, #64	@ 0x40
 800f0d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0dc:	2000      	movs	r0, #0
 800f0de:	6031      	str	r1, [r6, #0]
 800f0e0:	602b      	str	r3, [r5, #0]
 800f0e2:	b016      	add	sp, #88	@ 0x58
 800f0e4:	bd70      	pop	{r4, r5, r6, pc}
 800f0e6:	466a      	mov	r2, sp
 800f0e8:	f000 f848 	bl	800f17c <_fstat_r>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	dbec      	blt.n	800f0ca <__swhatbuf_r+0x12>
 800f0f0:	9901      	ldr	r1, [sp, #4]
 800f0f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0fa:	4259      	negs	r1, r3
 800f0fc:	4159      	adcs	r1, r3
 800f0fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f102:	e7eb      	b.n	800f0dc <__swhatbuf_r+0x24>

0800f104 <__smakebuf_r>:
 800f104:	898b      	ldrh	r3, [r1, #12]
 800f106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f108:	079d      	lsls	r5, r3, #30
 800f10a:	4606      	mov	r6, r0
 800f10c:	460c      	mov	r4, r1
 800f10e:	d507      	bpl.n	800f120 <__smakebuf_r+0x1c>
 800f110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	6123      	str	r3, [r4, #16]
 800f118:	2301      	movs	r3, #1
 800f11a:	6163      	str	r3, [r4, #20]
 800f11c:	b003      	add	sp, #12
 800f11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f120:	ab01      	add	r3, sp, #4
 800f122:	466a      	mov	r2, sp
 800f124:	f7ff ffc8 	bl	800f0b8 <__swhatbuf_r>
 800f128:	9f00      	ldr	r7, [sp, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	4639      	mov	r1, r7
 800f12e:	4630      	mov	r0, r6
 800f130:	f7fd feda 	bl	800cee8 <_malloc_r>
 800f134:	b948      	cbnz	r0, 800f14a <__smakebuf_r+0x46>
 800f136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f13a:	059a      	lsls	r2, r3, #22
 800f13c:	d4ee      	bmi.n	800f11c <__smakebuf_r+0x18>
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	f043 0302 	orr.w	r3, r3, #2
 800f146:	81a3      	strh	r3, [r4, #12]
 800f148:	e7e2      	b.n	800f110 <__smakebuf_r+0xc>
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	6020      	str	r0, [r4, #0]
 800f14e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	9b01      	ldr	r3, [sp, #4]
 800f156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f15a:	b15b      	cbz	r3, 800f174 <__smakebuf_r+0x70>
 800f15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f160:	4630      	mov	r0, r6
 800f162:	f000 f81d 	bl	800f1a0 <_isatty_r>
 800f166:	b128      	cbz	r0, 800f174 <__smakebuf_r+0x70>
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f023 0303 	bic.w	r3, r3, #3
 800f16e:	f043 0301 	orr.w	r3, r3, #1
 800f172:	81a3      	strh	r3, [r4, #12]
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	431d      	orrs	r5, r3
 800f178:	81a5      	strh	r5, [r4, #12]
 800f17a:	e7cf      	b.n	800f11c <__smakebuf_r+0x18>

0800f17c <_fstat_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d07      	ldr	r5, [pc, #28]	@ (800f19c <_fstat_r+0x20>)
 800f180:	2300      	movs	r3, #0
 800f182:	4604      	mov	r4, r0
 800f184:	4608      	mov	r0, r1
 800f186:	4611      	mov	r1, r2
 800f188:	602b      	str	r3, [r5, #0]
 800f18a:	f7f3 f9c9 	bl	8002520 <_fstat>
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	d102      	bne.n	800f198 <_fstat_r+0x1c>
 800f192:	682b      	ldr	r3, [r5, #0]
 800f194:	b103      	cbz	r3, 800f198 <_fstat_r+0x1c>
 800f196:	6023      	str	r3, [r4, #0]
 800f198:	bd38      	pop	{r3, r4, r5, pc}
 800f19a:	bf00      	nop
 800f19c:	240424f4 	.word	0x240424f4

0800f1a0 <_isatty_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d06      	ldr	r5, [pc, #24]	@ (800f1bc <_isatty_r+0x1c>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	602b      	str	r3, [r5, #0]
 800f1ac:	f7f3 f9c8 	bl	8002540 <_isatty>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_isatty_r+0x1a>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_isatty_r+0x1a>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	240424f4 	.word	0x240424f4

0800f1c0 <_init>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	bf00      	nop
 800f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c6:	bc08      	pop	{r3}
 800f1c8:	469e      	mov	lr, r3
 800f1ca:	4770      	bx	lr

0800f1cc <_fini>:
 800f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ce:	bf00      	nop
 800f1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d2:	bc08      	pop	{r3}
 800f1d4:	469e      	mov	lr, r3
 800f1d6:	4770      	bx	lr
